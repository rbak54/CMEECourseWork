barplot(div[[1]],ylim=c(0,20),main="Size=500",xlab="Species Abundance octave",ylab="Mean frequency")
par(mfrow=c(2,2))
barplot(div[[1]],ylim=c(0,20),main="Size=500",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[2]],ylim=c(0,20),main="Size=1000",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[3]],ylim=c(0,20),main="Size=2500",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[4]],ylim=c(0,20),main="Size=5000",xlab="Species Abundance octave",ylab="Mean frequency")
div
a
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
#for (m in 1:4){
#   data<-as.data.frame((combined_results[[m]]))
#data[2]<-seq(1,nrow(data),1)
# }
## ggplot(data=data,aes(V2,(combined_results[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
#  do.call(grid.arrange,p)
# ggarrange(p[[1]])
#p<-list()  #   grid.arrange(p1, p2, nrow = 1)
save(combined_results,file="rbk119_cluster_results.rda")
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
load("rbk119_cluster_results.rda")
View(combined_results)
View(combined_results)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
#for (m in 1:4){
#   data<-as.data.frame((combined_results[[m]]))
#data[2]<-seq(1,nrow(data),1)
# }
## ggplot(data=data,aes(V2,(combined_results[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
#  do.call(grid.arrange,p)
# ggarrange(p[[1]])
#p<-list()  #   grid.arrange(p1, p2, nrow = 1)
save(combined_results,file="rbk119_cluster_results.rda")
combined_results
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
combined_results
process_cluster_results()
combined_results
load("rbk119_cluster_results.rda")
load("rbk119_cluster_results.rda")
View(combined_results)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
combined_results
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
#Author: Ruth Keane (ruth.keane19@imperial.ac.uk)
#Script: Vectorize1.R
#Desc: Summing the elements of a matrix using both a vectorized and non-vectorized function
#Arguments: none
#Input: none
#Output: none
#Date: Oct 2019
#matrix
M <- matrix(runif(1000000),1000,1000)
M
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize1.R', echo=TRUE)
a<-matrix(data=1,nrow=3,ncol=4)
a
SumAllElements(a)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize1.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R', echo=TRUE)
#Author: Ruth Keane (ruth.keane19@imperial.ac.uk)
#Script: Vectorize2.R
#Desc: vectorizing stochastic Ricker model
#Arguments: none
#Input: none
#Output: none
#Date: Oct 2019
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect<-function(r=1.2,K=1,sigma=0.2){
#make matrix
N<-matrix(NA,100,1000)
#add random initial population size
pop<-rnorm(1000,0.5,1.5)
N[1,]<-pop
#loop through the populations
for (yr in 2:100){ #for each pop, loop through the years
N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1,] / K) + rnorm(1,0,sigma))
}
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
N
A<-stochrich(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
A<-stochrick(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
A
B<-stochrickvect(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
View(A)
View(B)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
#initialize
N<-matrix(NA,numyears,length(p0))
p0=runif(1000,.5,1.5)
r=1.2
K=1
sigma=0.2
numyears=100
#initialize
N<-matrix(NA,numyears,length(p0))
N
runif(10,5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
help(runig)
help(runif)
help("rnorm")
setwd("~/Documents/CMEECourseWork/Week8/Code")
load("output2_1.rda")
load("output2_4.rda")
load("output2_8.rda")
load("output2_6.rda")
load("output2_7.rda")
View(res2)
View(res2)
View(res2)
View(oct)
View(oct)
load("output2_11.rda")
load("output2_19.rda")
load("../Results/output_2.rda")
reticulate::source_python('~/Documents/CMEECourseWork/Week7/Code/Nets_R.py')
load("output2_7.rda")
load("output2_37.rda")
load("output2_31.rda")
reticulate::repl_python()
reticulate::source_python('~/Documents/CMEECourseWork/Week7/Code/Nets_R.py')
load("output2_12.rda")
load("output2_13.rda")
load("output2_15.rda")
View(oct)
# CMEE 2019 HPC excercises R code main proforma
# you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
name <- "Ruth Keane"
preferred_name <- "Ruth"
email <- "ruth.keane19@imperial.ac.uk"
username <- "rbk119"
personal_speciation_rate <- 0.004345
#only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
require(ggplot2)
# Question 1
species_richness <- function(community){
richness<-length(unique(community))
return(richness)
}
# Question 2
init_community_max <- function(size){
imax<-as.vector(seq(1,size,1))
return(imax)
}
# Question 3
init_community_min <- function(size){
imin<-rep(1,length=size)
return(imin)
}
# Question 4
choose_two <- function(max_value){
imax<-as.vector(seq(1,max_value,1))
two<-as.vector(sample(imax,2,replace=FALSE))
return(two)
}
# Question 5
neutral_step <- function(community){
indexes<-choose_two(length(community))
community2<-community[-indexes[1]]
community2<-c((community[indexes[2]]),community2)
return(community2)
}
# Question 6
neutral_generation <- function(community){
a<-sample(1:2,1)
generations<-length(community)/2
if(a==1){
generations<-floor(generations)
}else{
generations<-ceiling(generations)
}
for (i in 1:generations){
community<-neutral_step(community)
}
return(community)
}
# Question 7
neutral_time_series <- function(community,duration)  {
richness<-vector(length=duration)
for(j in (1:duration)){
community<-neutral_generation(community)
richness[j]<-species_richness(community)
}
return(richness)
}
# Question 8
question_8 <- function() {
# clear any existing graphs and plot your graph within the R window
graphics.off()
plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
return("Species richness of 1 ")
}
# Question 9
neutral_step_speciation <- function(community,speciation_rate)  {
indexes<-choose_two(length(community))
community2<-community[-indexes[1]]
rand<-runif(1,0,1)
if(rand>speciation_rate){
community2<-c((community[indexes[2]]),community2)
}else{
community2<-c(community2,max(community)+1)
}
return(community2)
}
# Question 10
neutral_generation_speciation <- function(community,speciation_rate)  {
a<-sample(1:2,1)
generations<-length(community)/2
if(a==1){
generations<-floor(generations)
}else{
generations<-ceiling(generations)
}
for (i in 1:generations){
community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
}
return(community)
}
# Question 11
neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
richness<-vector(length=duration)
for(j in (1:duration)){
community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
richness[j]<-species_richness(community)
}
return(richness)
}
# Question 12
question_12 <- function()  {
graphics.off()
#plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
mat<-as.data.frame(matrix(ncol=3, nrow=400))
min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
time<-seq(1,200,1)
#  mat[1:200,2]<-min
# mat[201:400,2]<-max
#  mat[,1]<-time
# mat[1:200,3]<-"min"
#  mat[201:400,3]<-"max"
#  colnames(mat)<-c("time","rich","which")
graphics.off()
plot(time,min,col="blue",ylab="Species richness")
points(time,max,col="red")
#matrix<-matrix(c(a,b),nrow=200)
#  require(ggplot2)
#  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
}
# Question 13
species_abundance <- function(community)  {
# for (i in (1:range(max(community)))){
t<-table(community)
t<-sort(t,decreasing = TRUE)
# t<-as.data.frame(t)
f<-vector()
j=0
for (i in t){
j=j+1
f[j]<-i
}
return(f)
}
# Question 14
octaves <- function(abundance_vector) {
#to find n
m<-max(abundance_vector)
nm<-log(m)/log(2)
nm<-ceiling(nm)
t<-tabulate(abundance_vector)
v<-vector(length=nm)
for (n in (1:nm)){
a<-2^(n-1)
b<-(2^n)-1
v[n]<-sum(t[a:b],na.rm = TRUE)
}
return(v)
}
# Question 15
sum_vect <- function(x, y) {
lx<-length(x)
ly<-length(y)
if (lx>ly){
yn<-rep(0,lx)
yn[1:ly]<-y
y<-yn
}else{
xn<-rep(0,ly)
xn[1:lx]<-x
x<-xn
}
s<-x+y
return(s)
}
# Question 16
question_16 <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
oc<-matrix(nrow=200,ncol=10)
max<-init_community_max(100)
for (p in 1:200){
max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
}
ab<-species_abundance(max)
oc<-octaves(ab)
o<-1
#oc[1,1:length(octaves(ab))]<-octaves(ab)
#dont need to do both
gens<-seq(20,2000,20)
nint<-1:19
for (d in gens){
for (q in nint){
max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
ab<-species_abundance(max)
o<-o+1
#oc[o,1:length(octaves(ab))]<-octaves(ab)
oc<-sum_vect(oc,octaves(ab))
}
oc<-oc/o
barplot(oc)
#return(oc)
return("type your written answer here")
}
# Question 17
cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
community<-init_community_min(size=size)
a<-proc.time()
b<-proc.time()-a
nruns=0
richrows=0
richness<-c()
oct<-list()
while (((b[3])/60)<wall_time){
community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
nruns=nruns+1
b<-proc.time()-a
if (nruns<burn_in_generations){
if (nruns%%interval_rich==0){
richness<-c(richness,species_richness(community))
}
}
#oct<-list()
if (nruns%%interval_oct==1){
octrows=length(oct)+1
oct[[octrows]]<-(octaves(species_abundance(community)))
print(b)
}
}
c<-proc.time()-a
c<-c[3]
filename<-paste0(output_file_name,".rda")
save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
}
# Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
# Question 20
process_cluster_results <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
a<-list(vect500=c(0),vect1000=c(0),vect2500=c(0),vect5000=c(0))
count<-list(vect500=0,vect1000=0,vect2500=0,vect5000=0)
for (i in 1:100){
file<-paste0("output2_",i,".rda")
load(file)
v<-paste0("vect",size)
which<-(burn_in_generations/interval_oct)+1
for (j in (which:length(oct))){
a[[v]]<-sum_vect(a[[v]],oct[[j]])
count[[v]]<-count[[v]]+1
}
}
combined_results<-list(0,0,0,0)
for (k in (1:length(a))){
combined_results[[k]]<-a[[k]]/count[[k]]
}
}
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R', echo=TRUE)
process_cluster_results()
setwd("~/Documents/CMEECourseWork/Week3/Code")
file<-"../Data/trees.csv"
Trees<- read.csv(file, header= T )
View(Trees)
View(Trees)
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
length(p0)
length(N)
length(N,)
length(p0)
length(numyeara)
length(numyears)
F<-"aaa"
print("Output file is",F,"_treeheights")
print(paste0("Output file is ",F,"_treeheights.csv")
print(paste0("Output file is ",F,"_treeheights.csv"))
print(paste0("Output file is ",F,"_treeheights.csv"))
#utput file name as InputFileName_treeheights.csv.
#export data
TreeFile<-paste("../Results/",F,"_treeheights.csv",sep="")
TreeFile
dirname(TreeFile)
print("Directory of output file is",dirname(TreeFile))
print(paste0("Directory of output file is ",dirname(TreeFile))
print(paste0("Directory of output file is ",dirname(TreeFile))_
print(paste0("Directory of output file is ",dirname(TreeFile)))_
print(paste0("Directory of output file is ",directory)
print(paste0("Directory of output file is ",directory))
print(paste0("Directory of output file is ",directory,))
directory<-dirname((TreeFile))
print(paste0("Directory of output file is ",directory))
base<-basename(TreeFile)
directory<-dirname(TreeFile)
source('~/Documents/CMEECourseWork/Week3/Code/get_TreeHeight.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_test.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Week8/Code")
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_test.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_challengeG.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week8/Code/forrunning.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Week5/Code")
source('~/Documents/CMEECourseWork/Week5/Code/gispractical.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week5/Code/gispractical.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week5/Code/gispractical2.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week5/Code/Rodents.R', echo=TRUE)
install.packages("lme4")
source('~/Documents/CMEECourseWork/Week6/Code/divergence.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week5/Code/Rodents.R', echo=TRUE)
Rodents<-read.csv("../Data/rodents.csv")
DS<-subset(Rodents,species=="DS")
DSSub<-subset(DS,sex!="")
DSSub<-subset(DSSub,yr!="NA")
DSSub<-subset(DSSub,hfl!="NA")
MOD<-lmer(wgt~hfl*sex+(1|yr)+(1|mo), data=DSSub)
hist(hfl, data=Ds)
hist(Ds$hfl)
hist(DS$hfl)
View(DS)
source('~/Documents/CMEECourseWork/Week6/Code/divergence.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Week6/Code")
source('~/Documents/CMEECourseWork/Week6/Code/divergence.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week6/Code/bears.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week6/Code/demography.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week6/Code/coalescence.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week6/Code/coalescence.R', echo=TRUE)
install.packages(c("broom", "pander", "pwr"))
source('~/Documents/CMEECourseWork/Week4/Code/ho2.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Week4/Code")
source('~/Documents/CMEECourseWork/Week4/Code/ho2.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week4/Code/ho18.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week4/Code/ho15.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week4/Code/ho13.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week4/Code/ho10.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week4/Code/ho4.R', echo=TRUE)
setwd("~/Documents/CMEECourseWork/Miniproject/Code")
source('~/Documents/CMEECourseWork/Miniproject/Code/graphinit.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Miniproject/Code/datamodellingattempt.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Miniproject/Code/datamodellingtidied.R', echo=TRUE)
install.packages("maps")
setwd("~/Documents/CMEECourseWork/Week3/Code")
load("../Data/KeyWestAnnualMeanTemperature.RData")
