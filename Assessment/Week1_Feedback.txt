Starting weekly assessment for Ruth, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 120.13 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week8, Week5, Week2, Week9, Week4, .git, Miniproject, Week3

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.log
*-c*ance.tex
*.gz
*.odt
*.ods
*Sandbox*
output*.rda
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:
**********************************************************************
## My CMEE CourseWork Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 9 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7, Week8, Week9

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: readme.md

Checking for readme file in weekly directory...

Found README in parent directory, named: readme.md

Printing contents of readme.md:
**********************************************************************
# Directory Content for This Week


## boilerplate.sh



Desc: simple boilerplate for shell scripts

 

Input: none

 

## CompileLaTeX.sh



Desc: script compiling LaTex and bibtex

 

Input: $1-file to be compiled

 

## ConcatenateTwoFiles.sh



Desc: concatenating two files

 

Input: $1 and $2 -two files to be compiled, ($3- empty file for output)

 

Output: File containing contents of $1 and $2 called Concatenated.txt in Results (unless specified as argument)
## CountLines.sh



Desc: counting lines in a file

 

Input: $1-file to count lines in

 

## csvtospace.sh



Desc: make a new file with spaces instead of commas

 

Input: $1 -file to be converted 

 

Output: text file in Results
## FirstBiblio.bib


Desc: bibliography




 


 

## FirstExample.tex


Desc: file to be compiled

 


 

## MyExampleScript.sh



Desc: variables practice

 

Input: $USER-name

 

## tabtocsv.sh



Desc: substitutes the tabs in the files with commas and saves the output into a .csv file

 

Input: A tab deliminated file

 

Output: A CSV file in Results
## tiff2png.sh



Desc: converting tiff files to png files

 

Input: none (takes any in data folder)

 

Output: png file in Results
## UnixPrac1.txt



Desc: explores line and word counting for amino acid sequences. calculates AT/GC ratio for E.coli

 


 

## variables.sh



Desc: assigning variables in shell scripts

 

Input: three numbers-MyVar , a , b

 

**********************************************************************

Found following files in results directory: readme.txt...

Found 12 code files: ConcatenateTwoFiles.sh, CountLines.sh, variables.sh, CompileLaTeX.sh, tiff2png.sh, csvtospace.sh, FirstExample.tex, MyExampleScript.sh, FirstBiblio.bib, UnixPrac1.txt, tabtocsv.sh, boilerplate.sh

Found the following extra files: .Rhistory
0.5 pt deducted per extra file

Current Points = 99.5

======================================================================
Testing script/code files...

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: ConcatenateTwoFiles.sh
#Desc: concatenating two files
#Arguments: 3 
#Input: $1 and $2 -two files to be compiled, ($3- empty file for output)
#Output: File containing contents of $1 and $2 called Concatenated.txt in Results (unless specified as argument)
#Date: Oct 2019
# if there is a third argument, then can immediately concatenate
if [ -e "$3" ]
then
    cat $1 > $3
    cat $2 >> $3
    echo "Merged File is"
    cat $3
#if only two arguments, make a text file for new file- "Concatenated.txt in Results in directory"
else
    if [ -e "$2" ]
    then
        touch ../Results/Concatenated.txt
        FILE="../Results/Concatenated.txt"
        cat $1 > $FILE
        cat $2 >> $FILE
    echo "Merged File is"
    cat $FILE
    else
        if [ -e "$1" ]
        then
        #if one file, can't concatinate so print message
            echo "Only one file inputted."
        #if no files, can't concatinate so print message
        else 
            echo "No files inputted"
        fi
    fi
    #if [ -e "$1" ]
    #then
    #    echo "please input more arguments"
    #fi
fi
exit**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 

**********************************************************************
No files inputted

**********************************************************************

Code ran without errors

Time consumed = 0.00515s

======================================================================
Inspecting script file CountLines.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: CountLines
#Desc: counting lines in a file
#Input: $1-file to count lines in
#Arguments: 1
#Date: Oct 2019
if [ -e "$1" ]
then
    NumLines=`wc -l < $1`
#basename so doesn't print directory
    g=`basename $1`
    echo "The file $g has $NumLines lines"
    echo
#if no input, no error messages
else
    echo "No file inputted. Please input file."
fi
exit
**********************************************************************

Testing CountLines.sh...

Output (only first 500 characters): 

**********************************************************************
No file inputted. Please input file.

**********************************************************************

Code ran without errors

Time consumed = 0.00349s

======================================================================
Inspecting script file variables.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: variables.sh
#Desc: assigning variables in shell scripts
#Input: three numbers-MyVar , a , b
#Arguments: none
#Date: Oct 2019
#use of variables
MyVar='some string'
echo 'the current value of the variable is' $MyVar
echo 'please enter a new string'
read MyVar
echo 'the current value of the variable is' $MyVar
##using multiple variables
echo 'Enter two numbers separated by space(s)'
read a b
##if no values entered- defaults 0
a=${a:-0}
b=${b:-0}


echo "you entered" $a 'and' $b ". Their sum is:"
mysum=`expr $a + $b`
echo $mysum

##trying to remove error if no input- but always shows no variabels entered
#if [ -z "$2" ];
#then
#   echo "no variables were entered"
#else
#   mysum=`expr $a + $b`
#   echo $mysum
#fi
exit
**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 

**********************************************************************
the current value of the variable is some string
please enter a new string
the current value of the variable is
Enter two numbers separated by space(s)
you entered 0 and 0 . Their sum is:
0

**********************************************************************

Code ran without errors

Time consumed = 0.00383s

======================================================================
Inspecting script file CompileLaTeX.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: CompileLaTex.sh
#Desc: script compiling LaTex and bibtex
#Input: $1-file to be compiled
#Arguments: 1
#Date: Oct 2019
#change name so filename.tex works
if [ $# -eq 0 ]
then
echo "No file inputted.Please input file."
else
f=`basename $1 |cut -f 1 -d "."`
pdflatex $f
pdflatex $f
bibtex $f
pdflatex $f
pdflatex $f
#move pdf to results folder
mv ./$f.pdf ../Results/ ##generalise
evince ../Results/$f.pdf &

##Cleanup
rm *~
rm *.aux
rm *.dvi
rm *.log
rm *.nav
rm *.out
rm *.snm
rm *.toc
rm *.bbl
rm *.blg
fi**********************************************************************

Testing CompileLaTeX.sh...

Output (only first 500 characters): 

**********************************************************************
No file inputted.Please input file.

**********************************************************************

Code ran without errors

Time consumed = 0.00375s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: tiff2png.sh
#Desc: converting tiff files to png files
#Arguments: 1
#Input: none (takes any in data folder)
#Output: png file in Results
#Date: Oct 2019
for f in ../Data/*.tif;
    do
        echo "Converting $f";
        convert "$f" "$(basename "$f" .tif).png"; 
    done
mv *.png ../Results
exit
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 

**********************************************************************
Converting ../Data/tifffile.tif

**********************************************************************

Code ran without errors

Time consumed = 0.23807s

======================================================================
Inspecting script file csvtospace.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: csvtospace.sh
#Desc: make a new file with spaces instead of commas
#Arguments: 1
#Input: $1 -file to be converted 
#Output: text file in Results
#Date: October 2019
if [ -e "$1" ]
then
    new=`basename $1 | cut -f 1 -d "."` #cut with deliminator as ., 1st column
    cat $1 | tr -s "," " " >> ../Results/${new}.txt  # {} to contain variable 
    
else
    echo "No file to convert. Please input file."
fi
exit**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 

**********************************************************************
No file to convert. Please input file.

**********************************************************************

Code ran without errors

Time consumed = 0.00267s

======================================================================
Inspecting script file FirstExample.tex...

File contents are:
**********************************************************************
\documentclass[12pt]{article}
\title{A Simple Document}
\author{Ruth Keane}
\date{Oct 2019}
\begin{document}
    \maketitle

    \begin{abstract}
        This paper must be cool!
    \end{abstract}
    \section{Introduction}
    Blah Blah!
    \section{Materials \&Methods}
    One of the most famous equations is:
    \begin{equation}
     E=mc^2
    \end{equation}
     This equation was first proposed by Einstein in 1905
     \cite{einstein1905does}.
     \bibliographystyle{plain}
     \bibliography{FirstBiblio}
\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: MyExampleScript.sh
#Desc: variables practice
#Arguments: 1
#Input: $USER-name
#Date: Oct 2019
msg1="Hello"
msg2=$USER
echo "$msg1 $msg2"
echo "Hello $USER"
echo
exit
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 

**********************************************************************
Hello mhasoba
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00503s

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:
**********************************************************************
@article{einstein1905does,
  title={Does the inertia of a body depend upon its energy-content},
  author={Einstein, Albert},
  journal={Annalen der Physik},
  volume={18},
  number={13},
  pages={639--41},
  year={1905}
}
**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:
**********************************************************************
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Desc: explores line and word counting for amino acid sequences. calculates AT/GC ratio for E.coli
#Arguments: none
#Date: Oct 2019

#1
#Line count for each file
 wc -l < ../Data/fasta/407228326.fasta
 wc -l < ../Data/fasta/407228412.fasta 
 wc -l < ../Data/fasta/E.coli.fasta

#2
#Print E. coli genome from line 2
tail -n +2 ../Data/fasta/E.coli.fasta 

#3
#Sequence length for E.coli genome using wc
tail -n +2 ../Data/fasta/E.coli.fasta |tr -d '[:space:] '  | wc -m 

#4
#Count the matches of a particular sequence, "ATGC" in the genome of E. coli (hint: Start by removing the first line and removing newline characters)
tail -n +2 ../Data/fasta/E.coli.fasta |tr -d '[:space:]' | grep "ATGC" -o | wc -l

#AT/GC ratio
AT=$(tail -n +2 ../Data/fasta/E.coli.fasta |tr -d '[:space:]'| grep -o "A\|T" | wc -l) && CG=$(tail -n +2 ../Data/fasta/E.coli.fasta |tr -d '[:space:]'| grep -o "G\|C" | wc -l) && echo "scale=5; $AT/ $CG" | bc


**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: tabtocsv.sh
#Desc: substitutes the tabs in the files with commas and saves the output into a .csv file
#Arguments: 1 
#Input: A tab deliminated file
#Output: A CSV file in Results
#Date:Oct 2019

if [ -e "$1" ]
then
    echo "Creating a comma delimited verion of $1 ..."
    new=`basename $1 | cut -f 1 -d "."` #cut with deliminator as ., 1st column
    cat $1 | tr -s "\t",",">> ../Results/${new}.txt  # {} to contain variable 
    echo "Done!"
else
    echo "No file to convert. Please input file."
fi
exit**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 

**********************************************************************
No file to convert. Please input file.

**********************************************************************

Code ran without errors

Time consumed = 0.00489s

======================================================================
Inspecting script file boilerplate.sh...

File contents are:
**********************************************************************
#!/bin/bash
#Author: Ruth Keane ruth.keane19@imperial.ac.uk
#Script: boilerplate.sh
#Desc: simple boilerplate for shell scripts
#Arguments: none
#Input: none
#Date: Oct 2019
echo -e "\nThis is a shell script! \n" 
exit 
**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 

**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00389s

======================================================================
======================================================================
Finished running scripts

Ran into 0 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!