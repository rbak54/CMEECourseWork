 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.675   0.058   0.733 
   user  system elapsed 
266.296   2.505 269.501 
   user  system elapsed 
542.482   4.892 548.876 
   user  system elapsed 
809.019   7.000 818.242 
    user   system  elapsed 
1071.988    9.272 1084.171 
    user   system  elapsed 
1306.386   11.355 1321.076 
    user   system  elapsed 
1548.117   13.456 1565.344 
    user   system  elapsed 
1779.626   15.366 1799.167 
    user   system  elapsed 
1997.744   17.853 2020.084 
    user   system  elapsed 
2229.483   19.830 2254.196 
    user   system  elapsed 
2474.907   21.711 2501.978 
    user   system  elapsed 
2720.753   23.395 2749.965 
    user   system  elapsed 
2967.420   25.645 2999.386 
    user   system  elapsed 
3217.149   27.991 3251.960 
    user   system  elapsed 
3470.534   29.912 3507.782 
    user   system  elapsed 
3713.182   31.903 3752.889 
    user   system  elapsed 
4001.009   34.073 4043.612 
    user   system  elapsed 
4285.497   36.446 4331.161 
    user   system  elapsed 
4564.044   38.814 4612.796 
    user   system  elapsed 
4847.896   40.946 4899.540 
    user   system  elapsed 
5129.054   43.359 5183.771 
    user   system  elapsed 
5406.201   45.864 5464.047 
    user   system  elapsed 
5684.067   48.023 5744.738 
    user   system  elapsed 
5959.515   50.316 6023.149 
    user   system  elapsed 
6235.531   52.294 6301.781 
    user   system  elapsed 
6490.932   54.180 6559.534 
    user   system  elapsed 
6744.179   56.212 6815.261 
    user   system  elapsed 
6994.178   58.342 7067.809 
    user   system  elapsed 
7249.961   60.221 7325.945 
    user   system  elapsed 
7504.107   62.207 7582.533 
    user   system  elapsed 
7774.036   64.641 7855.418 
    user   system  elapsed 
8060.059   66.963 8144.329 
    user   system  elapsed 
8314.073   68.700 8400.525 
    user   system  elapsed 
8568.623   70.991 8657.824 
    user   system  elapsed 
8822.818   73.046 8914.520 
    user   system  elapsed 
9076.009   75.028 9170.162 
    user   system  elapsed 
9327.009   76.790 9423.363 
    user   system  elapsed 
9577.034   78.766 9675.792 
    user   system  elapsed 
9828.033   80.976 9929.422 
     user    system   elapsed 
10082.807    82.929 10186.604 
     user    system   elapsed 
10337.367    84.851 10443.528 
     user    system   elapsed 
10593.765    86.801 10702.322 
     user    system   elapsed 
10867.454    88.767 10978.520 
     user    system   elapsed 
11154.542    90.943 11268.430 
     user    system   elapsed 
11445.031    93.402 11562.055 
     user    system   elapsed 
11736.848    95.783 11856.914 
     user    system   elapsed 
12023.629    97.724 12146.301 
     user    system   elapsed 
12318.916    99.659 12444.242 
    user   system  elapsed 
12604.26   101.61 12732.21 
     user    system   elapsed 
12892.852   103.902 13023.742 
     user    system   elapsed 
13174.787   106.004 13308.447 
     user    system   elapsed 
13451.623   108.257 13588.152 
     user    system   elapsed 
13735.801   110.559 13875.288 
     user    system   elapsed 
14028.124   112.664 14170.397 
    user   system  elapsed 
14310.61   114.73 14455.59 
     user    system   elapsed 
14591.856   116.734 14739.485 
     user    system   elapsed 
14878.308   119.035 15028.916 
     user    system   elapsed 
15161.097   121.443 15314.761 
     user    system   elapsed 
15442.680   123.754 15599.308 
     user    system   elapsed 
15722.111   126.415 15882.040 
     user    system   elapsed 
16010.132   128.617 16172.929 
     user    system   elapsed 
16291.619   130.753 16457.203 
     user    system   elapsed 
16563.886   133.046 16732.355 
     user    system   elapsed 
16850.419   134.974 17021.518 
     user    system   elapsed 
17138.697   137.095 17312.618 
     user    system   elapsed 
17424.513   139.293 17601.328 
     user    system   elapsed 
17721.417   141.421 17901.067 
     user    system   elapsed 
18019.786   143.968 18202.737 
     user    system   elapsed 
18317.813   145.971 18503.476 
     user    system   elapsed 
18616.389   147.843 18804.685 
     user    system   elapsed 
18908.611   150.031 19099.802 
     user    system   elapsed 
19200.969   152.472 19395.323 
     user    system   elapsed 
19494.337   154.668 19691.566 
     user    system   elapsed 
19786.442   156.592 19986.294 
     user    system   elapsed 
20078.989   158.257 20281.240 
     user    system   elapsed 
20373.789   160.226 20578.730 
     user    system   elapsed 
20670.644   162.298 20878.380 
     user    system   elapsed 
20962.594   164.611 21173.352 
     user    system   elapsed 
21257.352   166.726 21470.915 
     user    system   elapsed 
21553.198   168.967 21769.726 
     user    system   elapsed 
21851.689   171.136 22071.159 
     user    system   elapsed 
22147.513   173.794 22370.364 
     user    system   elapsed 
22446.576   176.195 22672.722 
     user    system   elapsed 
22719.758   178.427 22948.729 
     user    system   elapsed 
22993.925   180.713 23225.754 
     user    system   elapsed 
23256.289   183.235 23491.167 
     user    system   elapsed 
23523.757   185.118 23761.054 
     user    system   elapsed 
23784.209   187.373 24024.257 
     user    system   elapsed 
24040.717   189.349 24283.211 
     user    system   elapsed 
24305.299   191.829 24550.777 
     user    system   elapsed 
24574.097   194.039 24822.321 
     user    system   elapsed 
24841.756   195.973 25092.453 
     user    system   elapsed 
25109.576   198.344 25363.171 
     user    system   elapsed 
25366.280   200.342 25622.309 
     user    system   elapsed 
25629.728   202.827 25888.744 
     user    system   elapsed 
25892.515   205.036 26154.275 
     user    system   elapsed 
26144.788   206.929 26408.903 
     user    system   elapsed 
26394.403   208.985 26661.019 
     user    system   elapsed 
26676.697   211.154 26946.058 
     user    system   elapsed 
26940.946   213.374 27213.017 
     user    system   elapsed 
27207.346   215.614 27482.212 
     user    system   elapsed 
27472.212   217.845 27749.824 
     user    system   elapsed 
27736.270   219.952 28016.469 
     user    system   elapsed 
28003.039   222.055 28285.885 
     user    system   elapsed 
28263.975   224.208 28549.446 
     user    system   elapsed 
28526.733   226.312 28814.776 
     user    system   elapsed 
28793.963   228.566 29084.803 
     user    system   elapsed 
29050.118   230.614 29343.440 
     user    system   elapsed 
29313.307   232.744 29609.264 
     user    system   elapsed 
29583.090   235.184 29882.026 
    user   system  elapsed 
29858.15   237.62 30160.06 
     user    system   elapsed 
30144.449   239.815 30449.217 
     user    system   elapsed 
30424.510   241.994 30732.053 
     user    system   elapsed 
30707.718   244.343 31018.167 
     user    system   elapsed 
30980.358   246.699 31293.696 
     user    system   elapsed 
31258.665   248.883 31574.814 
     user    system   elapsed 
31527.555   251.032 31846.373 
     user    system   elapsed 
31803.279   253.215 32124.860 
     user    system   elapsed 
32082.131   255.177 32406.245 
     user    system   elapsed 
32357.540   257.155 32684.176 
     user    system   elapsed 
32627.948   259.387 32957.371 
     user    system   elapsed 
32889.598   261.478 33221.611 
     user    system   elapsed 
33158.771   263.775 33493.615 
     user    system   elapsed 
33434.468   266.335 33772.493 
     user    system   elapsed 
33708.849   268.323 34049.446 
     user    system   elapsed 
33985.922   270.302 34329.105 
     user    system   elapsed 
34250.970   272.402 34596.812 
     user    system   elapsed 
34532.493   274.671 34881.246 
     user    system   elapsed 
34807.333   277.017 35159.073 
     user    system   elapsed 
35089.852   279.401 35444.744 
     user    system   elapsed 
35375.790   281.512 35733.377 
     user    system   elapsed 
35641.628   283.953 36002.133 
     user    system   elapsed 
35897.932   285.976 36260.851 
     user    system   elapsed 
36151.102   288.497 36517.056 
     user    system   elapsed 
36419.927   291.118 36789.437 
     user    system   elapsed 
36676.500   293.654 37049.040 
     user    system   elapsed 
36934.845   295.821 37309.968 
     user    system   elapsed 
37199.410   298.044 37577.249 
     user    system   elapsed 
37457.892   300.099 37838.309 
     user    system   elapsed 
37711.187   302.648 38094.867 
     user    system   elapsed 
37970.007   305.247 38357.010 
     user    system   elapsed 
38234.209   307.676 38624.413 
     user    system   elapsed 
38506.357   310.017 38899.480 
     user    system   elapsed 
38785.174   312.586 39181.487 
     user    system   elapsed 
39054.804   314.994 39454.120 
     user    system   elapsed 
39316.235   317.521 39718.805 
     user    system   elapsed 
39579.162   319.995 39984.950 
     user    system   elapsed 
39838.628   322.633 40247.767 
     user    system   elapsed 
40090.298   324.767 40502.141 
     user    system   elapsed 
40358.879   327.248 40773.833 
     user    system   elapsed 
40629.453   329.482 41047.237 
     user    system   elapsed 
40893.054   331.809 41313.714 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.99 (ave)

============================================
