 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.503   0.027   0.533 
   user  system elapsed 
253.057   2.639 256.343 
   user  system elapsed 
511.917   4.960 518.164 
   user  system elapsed 
771.287   7.305 780.540 
    user   system  elapsed 
1015.614    9.604 1027.694 
    user   system  elapsed 
1266.881   12.206 1282.239 
    user   system  elapsed 
1521.447   14.648 1539.960 
    user   system  elapsed 
1759.451   17.347 1781.153 
    user   system  elapsed 
1977.625   20.303 2002.702 
    user   system  elapsed 
2217.317   22.486 2245.182 
    user   system  elapsed 
2471.845   24.789 2502.709 
    user   system  elapsed 
2729.935   26.997 2763.656 
    user   system  elapsed 
2977.630   29.006 3013.928 
    user   system  elapsed 
3223.562   31.133 3262.552 
    user   system  elapsed 
3461.785   33.579 3503.751 
    user   system  elapsed 
3695.966   35.748 3740.556 
    user   system  elapsed 
3930.648   37.618 3977.592 
    user   system  elapsed 
4166.058   39.702 4215.602 
    user   system  elapsed 
4389.073   41.693 4441.047 
    user   system  elapsed 
4605.172   43.502 4659.371 
    user   system  elapsed 
4818.418   45.433 4874.903 
    user   system  elapsed 
5021.339   47.395 5080.102 
    user   system  elapsed 
5224.388   49.168 5285.244 
    user   system  elapsed 
5428.569   51.287 5491.863 
    user   system  elapsed 
5630.846   52.815 5695.951 
    user   system  elapsed 
5833.630   54.562 5900.771 
    user   system  elapsed 
6032.666   56.683 6102.251 
    user   system  elapsed 
6233.959   58.299 6305.437 
    user   system  elapsed 
6432.489   60.247 6506.171 
    user   system  elapsed 
6636.210   62.211 6712.224 
    user   system  elapsed 
6838.843   64.068 6917.152 
    user   system  elapsed 
7042.487   65.762 7122.735 
    user   system  elapsed 
7242.096   67.556 7324.334 
    user   system  elapsed 
7441.551   69.247 7525.659 
    user   system  elapsed 
7641.123   71.169 7727.339 
    user   system  elapsed 
7841.215   73.084 7929.548 
    user   system  elapsed 
8040.865   74.752 8131.064 
    user   system  elapsed 
8241.236   76.586 8333.469 
    user   system  elapsed 
8441.034   78.234 8535.110 
    user   system  elapsed 
8640.854   79.941 8736.826 
    user   system  elapsed 
8843.133   81.719 8941.138 
    user   system  elapsed 
9057.798   83.262 9157.683 
    user   system  elapsed 
9257.289   85.281 9359.532 
    user   system  elapsed 
9456.085   86.942 9560.329 
    user   system  elapsed 
9655.133   88.660 9761.463 
    user   system  elapsed 
9850.494   90.493 9958.897 
     user    system   elapsed 
10044.564    92.059 10154.746 
     user    system   elapsed 
10243.424    93.838 10355.745 
     user    system   elapsed 
10442.525    95.623 10557.019 
     user    system   elapsed 
10641.414    97.272 10757.925 
    user   system  elapsed 
10838.39    99.12 10957.12 
     user    system   elapsed 
11035.215   101.062 11156.264 
     user    system   elapsed 
11228.370   102.694 11351.301 
    user   system  elapsed 
11422.49   104.41 11547.40 
    user   system  elapsed 
11619.42   106.00 11746.20 
     user    system   elapsed 
11822.398   107.953 11951.709 
    user   system  elapsed 
12021.82   109.58 12152.98 
     user    system   elapsed 
12218.702   111.413 12351.903 
     user    system   elapsed 
12419.830   113.353 12555.245 
     user    system   elapsed 
12617.250   115.216 12754.748 
    user   system  elapsed 
12814.78   117.07 12954.35 
     user    system   elapsed 
13012.319   119.017 13154.064 
     user    system   elapsed 
13211.169   121.112 13355.521 
     user    system   elapsed 
13412.419   122.837 13558.844 
     user    system   elapsed 
13613.348   124.182 13761.366 
    user   system  elapsed 
13814.67   125.83 13964.74 
     user    system   elapsed 
14012.722   127.562 14164.770 
     user    system   elapsed 
14212.578   129.168 14366.502 
     user    system   elapsed 
14413.071   130.739 14568.843 
     user    system   elapsed 
14612.868   132.204 14770.364 
     user    system   elapsed 
14814.218   133.816 14973.612 
     user    system   elapsed 
15014.690   135.609 15176.147 
    user   system  elapsed 
15219.27   137.37 15382.76 
     user    system   elapsed 
15421.897   139.021 15587.327 
     user    system   elapsed 
15625.392   140.558 15792.629 
     user    system   elapsed 
15826.868   142.187 15996.002 
    user   system  elapsed 
16028.20   143.82 16199.22 
     user    system   elapsed 
16230.677   145.542 16403.676 
     user    system   elapsed 
16431.329   147.272 16606.293 
     user    system   elapsed 
16633.466   148.917 16810.306 
     user    system   elapsed 
16833.650   150.803 17012.767 
     user    system   elapsed 
17039.813   151.871 17220.308 
     user    system   elapsed 
17237.914   152.909 17419.657 
     user    system   elapsed 
17438.240   153.959 17621.240 
     user    system   elapsed 
17636.078   155.021 17820.349 
     user    system   elapsed 
17839.584   156.101 18025.155 
     user    system   elapsed 
18036.371   157.089 18223.137 
    user   system  elapsed 
18233.06   158.14 18421.08 
     user    system   elapsed 
18430.071   159.081 18619.237 
     user    system   elapsed 
18627.081   160.126 18817.497 
     user    system   elapsed 
18824.646   161.168 19016.308 
     user    system   elapsed 
19021.641   162.147 19214.481 
     user    system   elapsed 
19218.311   163.068 19412.276 
     user    system   elapsed 
19415.137   164.007 19610.234 
     user    system   elapsed 
19611.914   165.055 19808.251 
     user    system   elapsed 
19808.563   166.039 20006.065 
    user   system  elapsed 
20006.05   167.05 20204.75 
     user    system   elapsed 
20203.622   168.102 20403.580 
     user    system   elapsed 
20401.172   169.102 20602.331 
     user    system   elapsed 
20598.505   170.298 20801.055 
     user    system   elapsed 
20796.213   171.357 21000.247 
     user    system   elapsed 
20993.011   172.447 21198.380 
     user    system   elapsed 
21189.890   173.445 21396.504 
     user    system   elapsed 
21388.072   174.509 21596.003 
     user    system   elapsed 
21587.564   175.591 21796.818 
     user    system   elapsed 
21785.340   176.649 21995.864 
    user   system  elapsed 
21983.49   177.66 22195.24 
     user    system   elapsed 
22181.651   178.732 22394.710 
     user    system   elapsed 
22378.862   179.808 22593.208 
     user    system   elapsed 
22576.936   180.918 22792.630 
     user    system   elapsed 
22774.710   181.891 22991.611 
     user    system   elapsed 
22969.820   182.924 23187.947 
     user    system   elapsed 
23164.574   183.916 23383.884 
     user    system   elapsed 
23360.152   185.019 23580.763 
    user   system  elapsed 
23556.42   186.03 23778.24 
     user    system   elapsed 
23752.094   187.074 23975.150 
     user    system   elapsed 
23954.714   188.342 24179.290 
     user    system   elapsed 
24150.650   189.377 24376.463 
     user    system   elapsed 
24346.249   190.425 24573.292 
     user    system   elapsed 
24542.427   191.408 24770.657 
     user    system   elapsed 
24739.010   192.442 24968.471 
     user    system   elapsed 
24935.432   193.456 25166.102 
     user    system   elapsed 
25131.125   194.549 25363.082 
     user    system   elapsed 
25326.748   195.538 25559.890 
     user    system   elapsed 
25524.825   196.565 25759.210 
     user    system   elapsed 
25726.028   197.636 25961.705 
     user    system   elapsed 
25926.418   198.721 26163.412 
     user    system   elapsed 
26124.937   199.701 26363.174 
     user    system   elapsed 
26322.353   200.732 26561.866 
     user    system   elapsed 
26523.003   201.844 26763.883 
     user    system   elapsed 
26721.809   202.889 26963.981 
     user    system   elapsed 
26919.888   203.922 27163.324 
     user    system   elapsed 
27117.979   204.927 27362.645 
     user    system   elapsed 
27315.319   206.011 27561.294 
     user    system   elapsed 
27513.029   207.043 27760.269 
     user    system   elapsed 
27711.169   208.026 27959.629 
     user    system   elapsed 
27908.539   209.088 28158.273 
     user    system   elapsed 
28106.284   210.149 28357.287 
     user    system   elapsed 
28304.823   211.134 28557.031 
    user   system  elapsed 
28503.35   212.10 28756.75 
     user    system   elapsed 
28702.103   213.065 28956.698 
     user    system   elapsed 
28899.243   213.985 29154.970 
     user    system   elapsed 
29096.483   215.053 29353.500 
    user   system  elapsed 
29295.32   216.05 29553.56 
    user   system  elapsed 
29495.19   217.03 29754.65 
     user    system   elapsed 
29694.209   218.135 29955.006 
     user    system   elapsed 
29898.769   219.157 30161.041 
     user    system   elapsed 
30097.932   220.231 30361.513 
    user   system  elapsed 
30295.49   221.19 30560.22 
    user   system  elapsed 
30493.06   222.19 30758.97 
     user    system   elapsed 
30690.731   223.163 30957.815 
     user    system   elapsed 
30887.112   224.218 31155.459 
     user    system   elapsed 
31084.227   225.178 31353.756 
     user    system   elapsed 
31281.394   226.216 31552.180 
     user    system   elapsed 
31478.305   227.142 31750.241 
     user    system   elapsed 
31675.980   228.177 31949.153 
     user    system   elapsed 
31872.776   229.184 32147.150 
     user    system   elapsed 
32069.574   230.274 32345.241 
     user    system   elapsed 
32266.622   231.322 32543.553 
     user    system   elapsed 
32465.737   232.259 32743.802 
     user    system   elapsed 
32663.970   233.447 32943.427 
     user    system   elapsed 
32862.306   234.413 33142.931 
     user    system   elapsed 
33060.650   235.486 33342.546 
    user   system  elapsed 
33259.39   236.54 33542.55 
    user   system  elapsed 
33458.79   237.60 33743.21 
     user    system   elapsed 
33655.060   238.662 33940.724 
     user    system   elapsed 
33851.243   239.586 34138.006 
    user   system  elapsed 
34046.09   240.59 34333.99 
    user   system  elapsed 
34240.67   241.61 34529.72 
     user    system   elapsed 
34435.771   242.689 34726.049 
     user    system   elapsed 
34632.413   243.658 34923.836 
     user    system   elapsed 
34830.656   244.823 35123.652 
     user    system   elapsed 
35029.737   245.976 35324.101 
     user    system   elapsed 
35229.257   246.977 35524.817 
    user   system  elapsed 
35428.14   247.93 35724.86 
    user   system  elapsed 
35628.29   248.89 35926.18 
     user    system   elapsed 
35828.646   249.869 36127.708 
     user    system   elapsed 
36029.193   250.801 36329.379 
     user    system   elapsed 
36230.878   251.817 36532.297 
     user    system   elapsed 
36429.173   252.931 36731.881 
     user    system   elapsed 
36628.197   253.957 36932.112 
     user    system   elapsed 
36827.800   255.094 37133.042 
     user    system   elapsed 
37028.655   256.179 37335.180 
     user    system   elapsed 
37228.119   257.261 37535.931 
    user   system  elapsed 
37426.85   258.43 37736.02 
     user    system   elapsed 
37628.497   259.622 37939.055 
     user    system   elapsed 
37824.814   260.742 38136.682 
     user    system   elapsed 
38023.197   261.797 38336.313 
     user    system   elapsed 
38220.977   262.855 38535.316 
     user    system   elapsed 
38415.480   263.881 38730.948 
     user    system   elapsed 
38611.612   264.968 38928.285 
     user    system   elapsed 
38806.295   265.985 39124.096 
     user    system   elapsed 
39009.926   267.418 39329.768 
     user    system   elapsed 
39210.604   268.553 39531.739 
     user    system   elapsed 
39413.428   269.587 39735.747 
    user   system  elapsed 
39608.98   270.61 39932.47 
     user    system   elapsed 
39807.553   271.651 40132.211 
     user    system   elapsed 
40006.414   273.009 40332.737 
     user    system   elapsed 
40202.985   274.408 40531.264 
     user    system   elapsed 
40406.274   275.728 40736.185 
     user    system   elapsed 
40603.286   277.132 40935.046 
     user    system   elapsed 
40799.525   278.221 41132.495 
     user    system   elapsed 
40997.519   279.606 41332.359 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
