 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.666   0.055   0.724 
   user  system elapsed 
307.401   3.078 311.279 
   user  system elapsed 
607.122   5.332 614.306 
   user  system elapsed 
918.583   8.014 929.383 
    user   system  elapsed 
1222.216   10.460 1236.258 
    user   system  elapsed 
1521.659   13.042 1539.063 
    user   system  elapsed 
1828.672   15.628 1849.546 
    user   system  elapsed 
2125.047   18.306 2149.404 
    user   system  elapsed 
2424.281   21.245 2452.464 
    user   system  elapsed 
2721.635   23.970 2753.326 
    user   system  elapsed 
3021.966   26.519 3056.997 
    user   system  elapsed 
3322.272   28.635 3360.170 
    user   system  elapsed 
3624.117   31.228 3665.476 
    user   system  elapsed 
3930.084   33.604 3974.656 
    user   system  elapsed 
4242.348   36.255 4290.414 
    user   system  elapsed 
4551.212   38.563 4602.482 
    user   system  elapsed 
4857.243   40.669 4911.451 
    user   system  elapsed 
5156.895   43.036 5214.555 
    user   system  elapsed 
5469.841   45.066 5530.317 
    user   system  elapsed 
5771.055   46.984 5834.284 
    user   system  elapsed 
6070.783   49.350 6137.632 
    user   system  elapsed 
6370.627   51.712 6441.849 
    user   system  elapsed 
6671.759   53.873 6746.111 
    user   system  elapsed 
6978.425   56.410 7056.402 
    user   system  elapsed 
7263.898   58.564 7344.779 
    user   system  elapsed 
7508.832   60.499 7592.140 
    user   system  elapsed 
7772.342   62.445 7858.155 
    user   system  elapsed 
8029.536   64.385 8117.793 
    user   system  elapsed 
8280.051   66.827 8371.250 
    user   system  elapsed 
8546.666   68.943 8640.489 
    user   system  elapsed 
8832.895   71.289 8929.681 
    user   system  elapsed 
9108.988   73.469 9208.530 
    user   system  elapsed 
9395.150   75.817 9497.693 
    user   system  elapsed 
9679.485   77.985 9784.816 
     user    system   elapsed 
 9961.577    79.945 10069.456 
     user    system   elapsed 
10243.012    82.248 10353.811 
     user    system   elapsed 
10527.329    84.647 10641.141 
     user    system   elapsed 
10810.012    87.024 10926.819 
     user    system   elapsed 
11092.534    89.373 11212.295 
     user    system   elapsed 
11376.972    91.571 11499.549 
     user    system   elapsed 
11655.454    93.587 11780.641 
     user    system   elapsed 
11933.593    95.653 12061.435 
     user    system   elapsed 
12217.634    97.559 12348.011 
     user    system   elapsed 
12501.744    99.771 12634.971 
     user    system   elapsed 
12788.321   102.098 12924.497 
     user    system   elapsed 
13065.516   104.003 13204.182 
     user    system   elapsed 
13336.146   106.139 13477.491 
    user   system  elapsed 
13604.82   107.89 13748.43 
     user    system   elapsed 
13877.511   109.722 14023.514 
    user   system  elapsed 
14147.32   111.88 14296.02 
     user    system   elapsed 
14427.017   113.656 14578.070 
     user    system   elapsed 
14703.426   115.814 14857.194 
     user    system   elapsed 
14978.186   118.132 15134.843 
     user    system   elapsed 
15254.742   120.137 15413.980 
    user   system  elapsed 
15536.58   122.10 15698.38 
     user    system   elapsed 
15816.135   124.189 15980.627 
     user    system   elapsed 
16091.472   126.389 16258.750 
     user    system   elapsed 
16371.480   128.689 16541.646 
     user    system   elapsed 
16651.419   130.873 16824.354 
     user    system   elapsed 
16924.337   133.218 17100.174 
     user    system   elapsed 
17197.137   135.647 17375.943 
     user    system   elapsed 
17468.022   138.082 17649.819 
    user   system  elapsed 
17750.50   140.15 17935.00 
     user    system   elapsed 
18041.926   142.249 18229.157 
     user    system   elapsed 
18330.765   144.598 18520.982 
     user    system   elapsed 
18624.033   146.716 18817.000 
     user    system   elapsed 
18907.736   148.524 19103.093 
     user    system   elapsed 
19193.014   150.646 19391.109 
     user    system   elapsed 
19483.074   152.807 19683.975 
     user    system   elapsed 
19785.990   155.047 19989.771 
     user    system   elapsed 
20062.284   156.971 20268.534 
     user    system   elapsed 
20347.257   159.306 20556.466 
     user    system   elapsed 
20612.940   161.318 20824.649 
     user    system   elapsed 
20887.349   163.257 21101.552 
    user   system  elapsed 
21140.52   165.10 21357.03 
     user    system   elapsed 
21378.198   166.586 21596.618 
     user    system   elapsed 
21624.367   168.235 21844.892 
    user   system  elapsed 
21874.32   170.14 22097.20 
     user    system   elapsed 
22120.683   171.982 22345.856 
     user    system   elapsed 
22368.174   173.775 22595.585 
     user    system   elapsed 
22616.447   175.736 22846.280 
     user    system   elapsed 
22870.825   177.518 23102.933 
     user    system   elapsed 
23115.813   179.309 23350.148 
     user    system   elapsed 
23366.367   181.111 23602.964 
     user    system   elapsed 
23622.646   182.841 23861.443 
     user    system   elapsed 
23882.497   184.911 24123.856 
     user    system   elapsed 
24142.159   186.608 24385.701 
     user    system   elapsed 
24398.245   188.471 24644.108 
     user    system   elapsed 
24660.746   189.976 24908.618 
     user    system   elapsed 
24920.942   191.964 25171.292 
     user    system   elapsed 
25183.263   193.645 25435.798 
     user    system   elapsed 
25450.197   195.527 25705.139 
     user    system   elapsed 
25710.716   197.287 25967.912 
     user    system   elapsed 
25972.623   199.007 26232.040 
     user    system   elapsed 
26231.878   200.649 26493.410 
     user    system   elapsed 
26504.549   202.854 26768.823 
     user    system   elapsed 
26764.264   204.786 27030.958 
     user    system   elapsed 
27019.563   206.591 27288.539 
     user    system   elapsed 
27275.968   208.151 27546.999 
     user    system   elapsed 
27530.256   210.003 27803.635 
     user    system   elapsed 
27780.563   211.686 28056.096 
     user    system   elapsed 
28023.863   213.476 28301.602 
     user    system   elapsed 
28280.524   215.534 28560.829 
     user    system   elapsed 
28529.193   217.249 28811.664 
     user    system   elapsed 
28780.219   218.943 29064.829 
     user    system   elapsed 
29026.950   220.882 29313.936 
     user    system   elapsed 
29267.614   222.784 29556.926 
    user   system  elapsed 
29517.42   224.68 29809.08 
     user    system   elapsed 
29778.275   226.564 30072.374 
     user    system   elapsed 
30043.038   228.408 30339.548 
     user    system   elapsed 
30313.143   230.423 30612.268 
     user    system   elapsed 
30576.503   232.489 30878.278 
     user    system   elapsed 
30854.753   234.542 31159.181 
     user    system   elapsed 
31131.036   236.592 31438.165 
     user    system   elapsed 
31399.750   238.411 31709.323 
    user   system  elapsed 
31663.77   240.31 31975.81 
     user    system   elapsed 
31935.266   242.141 32249.761 
     user    system   elapsed 
32200.746   244.157 32517.853 
     user    system   elapsed 
32469.043   246.021 32788.620 
     user    system   elapsed 
32736.316   247.996 33058.434 
     user    system   elapsed 
32997.694   249.931 33322.288 
    user   system  elapsed 
33264.48   251.84 33591.60 
     user    system   elapsed 
33532.893   253.666 33862.408 
     user    system   elapsed 
33805.492   255.605 34137.626 
     user    system   elapsed 
34074.719   257.549 34409.436 
     user    system   elapsed 
34335.056   259.387 34672.111 
     user    system   elapsed 
34597.901   261.221 34937.314 
    user   system  elapsed 
34866.89   262.95 35208.65 
     user    system   elapsed 
35132.853   264.786 35477.020 
     user    system   elapsed 
35397.531   266.545 35744.008 
     user    system   elapsed 
35658.079   268.401 36006.935 
     user    system   elapsed 
35923.290   270.315 36274.637 
     user    system   elapsed 
36175.617   271.874 36529.009 
     user    system   elapsed 
36410.615   273.538 36766.038 
     user    system   elapsed 
36642.284   275.281 36999.854 
     user    system   elapsed 
36874.981   276.984 37234.679 
    user   system  elapsed 
37116.34   278.55 37478.13 
    user   system  elapsed 
37360.84   280.47 37725.08 
     user    system   elapsed 
37600.568   282.346 37967.186 
    user   system  elapsed 
37837.80   283.95 38206.44 
     user    system   elapsed 
38086.773   285.773 38457.675 
     user    system   elapsed 
38341.133   287.499 38714.247 
     user    system   elapsed 
38591.084   289.311 38966.517 
     user    system   elapsed 
38847.258   290.988 39224.885 
     user    system   elapsed 
39107.763   292.934 39487.901 
     user    system   elapsed 
39361.874   294.663 39744.262 
     user    system   elapsed 
39613.428   296.385 39998.066 
     user    system   elapsed 
39873.712   298.171 40260.664 
     user    system   elapsed 
40133.080   300.119 40522.509 
     user    system   elapsed 
40393.681   302.055 40785.573 
     user    system   elapsed 
40658.456   303.927 41052.821 
     user    system   elapsed 
40925.364   305.624 41322.001 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
