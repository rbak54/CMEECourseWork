 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.688   0.035   0.725 
   user  system elapsed 
274.873   2.660 278.159 
   user  system elapsed 
549.671   5.246 556.176 
   user  system elapsed 
828.433   7.646 838.040 
    user   system  elapsed 
1094.997    9.906 1107.480 
    user   system  elapsed 
1356.043   12.303 1371.427 
    user   system  elapsed 
1623.428   14.701 1641.795 
    user   system  elapsed 
1862.549   17.041 1883.731 
    user   system  elapsed 
2089.525   19.694 2113.757 
    user   system  elapsed 
2353.702   22.384 2381.321 
    user   system  elapsed 
2615.874   24.652 2646.343 
    user   system  elapsed 
2903.860   26.811 2937.188 
    user   system  elapsed 
3195.087   28.964 3231.495 
    user   system  elapsed 
3481.559   31.018 3520.770 
    user   system  elapsed 
3763.694   33.326 3806.122 
    user   system  elapsed 
4045.174   35.514 4090.587 
    user   system  elapsed 
4316.205   37.669 4364.378 
    user   system  elapsed 
4595.642   39.659 4646.481 
    user   system  elapsed 
4873.057   41.788 4926.671 
    user   system  elapsed 
5152.528   43.843 5208.891 
    user   system  elapsed 
5431.950   46.146 5491.299 
    user   system  elapsed 
5695.513   48.384 5757.654 
    user   system  elapsed 
5953.362   50.247 6017.858 
    user   system  elapsed 
6208.365   52.224 6275.332 
    user   system  elapsed 
6473.080   54.153 6542.541 
    user   system  elapsed 
6736.678   56.210 6808.720 
    user   system  elapsed 
7004.283   58.282 7078.989 
    user   system  elapsed 
7282.305   60.590 7359.975 
    user   system  elapsed 
7547.408   63.096 7628.138 
    user   system  elapsed 
7807.638   65.132 7890.904 
    user   system  elapsed 
8067.342   67.270 8153.284 
    user   system  elapsed 
8318.672   69.298 8407.118 
    user   system  elapsed 
8564.845   70.901 8655.326 
    user   system  elapsed 
8814.034   73.051 8907.104 
    user   system  elapsed 
9059.431   75.084 9154.990 
    user   system  elapsed 
9309.567   77.188 9407.699 
    user   system  elapsed 
9565.734   79.364 9666.538 
    user   system  elapsed 
9816.306   81.473 9919.657 
    user   system  elapsed 
10073.92    83.25 10179.52 
     user    system   elapsed 
10323.117    85.379 10431.302 
    user   system  elapsed 
10573.70    87.19 10684.14 
     user    system   elapsed 
10826.455    89.161 10939.328 
     user    system   elapsed 
11068.891    90.984 11184.005 
     user    system   elapsed 
11314.660    93.037 11432.262 
     user    system   elapsed 
11595.556    95.156 11715.905 
     user    system   elapsed 
11875.817    97.018 11998.611 
     user    system   elapsed 
12156.868    99.164 12282.408 
     user    system   elapsed 
12440.800   101.211 12569.036 
     user    system   elapsed 
12727.080   103.326 12858.071 
    user   system  elapsed 
13007.24   105.53 13141.04 
     user    system   elapsed 
13282.458   107.615 13418.912 
     user    system   elapsed 
13559.780   109.903 13699.094 
     user    system   elapsed 
13837.292   111.818 13979.124 
     user    system   elapsed 
14117.827   114.219 14262.661 
     user    system   elapsed 
14400.058   116.123 14547.414 
     user    system   elapsed 
14690.361   118.072 14840.317 
     user    system   elapsed 
14973.128   119.973 15125.619 
     user    system   elapsed 
15258.646   122.127 15413.941 
     user    system   elapsed 
15536.548   124.646 15694.984 
     user    system   elapsed 
15804.588   127.189 15966.137 
     user    system   elapsed 
16101.260   129.723 16266.087 
     user    system   elapsed 
16390.375   132.401 16558.554 
     user    system   elapsed 
16673.435   134.475 16844.296 
     user    system   elapsed 
16964.091   136.663 17137.796 
     user    system   elapsed 
17250.830   138.927 17427.441 
     user    system   elapsed 
17536.897   140.767 17715.949 
     user    system   elapsed 
17827.880   142.742 18009.582 
     user    system   elapsed 
18115.196   144.772 18299.574 
     user    system   elapsed 
18400.326   146.582 18587.131 
    user   system  elapsed 
18690.67   148.52 18880.07 
    user   system  elapsed 
18976.93   150.46 19168.89 
     user    system   elapsed 
19268.758   152.918 19463.856 
     user    system   elapsed 
19557.641   155.168 19755.615 
     user    system   elapsed 
19850.463   157.255 20051.177 
     user    system   elapsed 
20146.115   158.952 20349.215 
     user    system   elapsed 
20441.713   160.936 20647.484 
    user   system  elapsed 
20739.46   163.06 20948.09 
     user    system   elapsed 
21032.053   165.055 21243.324 
     user    system   elapsed 
21347.659   166.963 21561.845 
     user    system   elapsed 
21654.540   169.207 21871.647 
     user    system   elapsed 
21955.660   171.715 22176.491 
    user   system  elapsed 
22264.16   174.22 22488.42 
     user    system   elapsed 
22572.624   176.729 22800.070 
     user    system   elapsed 
22856.053   179.167 23086.614 
     user    system   elapsed 
23136.509   181.704 23370.162 
     user    system   elapsed 
23422.913   183.995 23659.429 
     user    system   elapsed 
23714.235   186.437 23953.829 
     user    system   elapsed 
23997.603   188.396 24239.735 
     user    system   elapsed 
24273.374   190.978 24518.590 
     user    system   elapsed 
24559.361   193.213 24807.376 
     user    system   elapsed 
24830.647   195.476 25081.365 
     user    system   elapsed 
25107.239   197.514 25360.491 
     user    system   elapsed 
25386.184   200.066 25642.505 
     user    system   elapsed 
25671.034   202.779 25930.621 
     user    system   elapsed 
25948.100   205.445 26210.858 
     user    system   elapsed 
26236.521   207.808 26502.214 
     user    system   elapsed 
26522.304   210.464 26791.226 
     user    system   elapsed 
26827.020   212.825 27098.973 
     user    system   elapsed 
27113.402   215.022 27388.197 
     user    system   elapsed 
27401.754   216.957 27679.128 
     user    system   elapsed 
27691.969   219.648 27972.716 
     user    system   elapsed 
27979.091   222.004 28262.831 
     user    system   elapsed 
28270.214   224.082 28556.680 
    user   system  elapsed 
28558.76   226.35 28848.16 
     user    system   elapsed 
28844.276   228.693 29136.656 
     user    system   elapsed 
29128.098   231.194 29423.614 
     user    system   elapsed 
29415.084   233.397 29713.454 
     user    system   elapsed 
29705.660   235.608 30006.894 
     user    system   elapsed 
29989.356   237.682 30293.293 
     user    system   elapsed 
30273.782   240.119 30580.804 
     user    system   elapsed 
30561.324   242.665 30871.527 
    user   system  elapsed 
30852.20   244.94 31165.33 
     user    system   elapsed 
31139.042   246.993 31454.850 
     user    system   elapsed 
31424.498   249.295 31743.250 
     user    system   elapsed 
31707.414   251.624 32029.124 
     user    system   elapsed 
32001.592   253.758 32326.160 
     user    system   elapsed 
32280.143   256.033 32607.595 
     user    system   elapsed 
32566.056   258.382 32896.522 
    user   system  elapsed 
32849.75   260.50 33182.98 
     user    system   elapsed 
33140.790   262.947 33477.126 
     user    system   elapsed 
33425.082   265.167 33764.295 
     user    system   elapsed 
33716.597   267.368 34058.698 
     user    system   elapsed 
33998.963   269.353 34343.690 
     user    system   elapsed 
34286.694   271.772 34634.508 
     user    system   elapsed 
34562.130   273.995 34912.762 
     user    system   elapsed 
34844.238   276.093 35197.590 
     user    system   elapsed 
35126.708   278.145 35482.747 
     user    system   elapsed 
35410.202   280.536 35769.267 
     user    system   elapsed 
35691.131   282.616 36052.899 
     user    system   elapsed 
35975.736   284.832 36340.402 
     user    system   elapsed 
36273.364   287.425 36641.371 
     user    system   elapsed 
36568.696   289.655 36939.647 
     user    system   elapsed 
36856.149   291.896 37230.014 
     user    system   elapsed 
37147.426   294.268 37524.338 
     user    system   elapsed 
37428.297   296.601 37808.165 
     user    system   elapsed 
37719.222   298.982 38102.158 
     user    system   elapsed 
38004.447   301.021 38390.096 
     user    system   elapsed 
38281.300   303.051 38669.572 
     user    system   elapsed 
38568.476   305.401 38959.769 
     user    system   elapsed 
38856.556   307.806 39250.914 
     user    system   elapsed 
39145.902   310.285 39543.429 
     user    system   elapsed 
39438.297   312.616 39838.848 
     user    system   elapsed 
39719.354   314.938 40122.853 
    user   system  elapsed 
40012.65   317.25 40419.16 
     user    system   elapsed 
40293.074   319.685 40702.639 
     user    system   elapsed 
40585.937   322.013 40998.538 
     user    system   elapsed 
40876.022   324.191 41291.481 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
