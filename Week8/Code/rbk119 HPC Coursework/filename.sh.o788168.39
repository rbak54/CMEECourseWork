 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.726   0.031   0.758 
   user  system elapsed 
266.168   2.686 269.421 
   user  system elapsed 
534.004   5.068 540.234 
   user  system elapsed 
811.246   7.361 820.477 
    user   system  elapsed 
1087.327    9.826 1099.687 
    user   system  elapsed 
1373.569   12.648 1389.449 
    user   system  elapsed 
1642.569   15.442 1661.884 
    user   system  elapsed 
1888.046   17.421 1909.819 
    user   system  elapsed 
2142.338   19.997 2167.413 
    user   system  elapsed 
2417.348   22.578 2445.726 
    user   system  elapsed 
2690.730   24.896 2722.124 
    user   system  elapsed 
2972.870   27.471 3007.622 
    user   system  elapsed 
3256.947   29.932 3294.913 
    user   system  elapsed 
3540.920   32.175 3581.839 
    user   system  elapsed 
3816.060   34.488 3859.940 
    user   system  elapsed 
4097.496   36.865 4144.406 
    user   system  elapsed 
4389.829   38.875 4439.588 
    user   system  elapsed 
4697.503   41.324 4750.915 
    user   system  elapsed 
4996.198   43.424 5052.734 
    user   system  elapsed 
5304.073   45.629 5363.720 
    user   system  elapsed 
5607.425   48.053 5670.373 
    user   system  elapsed 
5910.990   50.369 5977.089 
    user   system  elapsed 
6206.939   52.575 6276.062 
    user   system  elapsed 
6517.929   54.981 6590.444 
    user   system  elapsed 
6822.181   57.278 6897.817 
    user   system  elapsed 
7131.571   59.463 7210.148 
    user   system  elapsed 
7431.781   62.061 7513.894 
    user   system  elapsed 
7735.423   64.253 7820.601 
    user   system  elapsed 
8031.658   66.674 8120.091 
    user   system  elapsed 
8329.956   69.346 8422.081 
    user   system  elapsed 
8637.102   71.977 8732.645 
    user   system  elapsed 
8937.616   74.153 9036.184 
    user   system  elapsed 
9235.295   76.520 9336.957 
    user   system  elapsed 
9531.473   78.879 9636.198 
    user   system  elapsed 
9820.590   81.289 9928.372 
     user    system   elapsed 
10107.851    83.668 10218.676 
     user    system   elapsed 
10404.486    86.061 10518.439 
     user    system   elapsed 
10689.616    88.128 10806.308 
    user   system  elapsed 
10982.02    90.20 11101.48 
     user    system   elapsed 
11294.624    92.562 11417.248 
     user    system   elapsed 
11609.990    95.264 11736.199 
     user    system   elapsed 
11923.375    97.474 12052.591 
     user    system   elapsed 
12246.040    99.881 12378.524 
     user    system   elapsed 
12560.144   102.543 12696.159 
     user    system   elapsed 
12879.249   105.052 13018.653 
     user    system   elapsed 
13210.192   107.473 13352.909 
     user    system   elapsed 
13537.828   110.361 13684.340 
     user    system   elapsed 
13863.026   112.771 14012.891 
     user    system   elapsed 
14177.120   115.308 14330.351 
     user    system   elapsed 
14485.321   117.831 14642.010 
     user    system   elapsed 
14786.913   119.958 14946.818 
     user    system   elapsed 
15090.332   122.208 15255.705 
     user    system   elapsed 
15397.345   124.428 15567.003 
     user    system   elapsed 
15706.211   126.957 15879.280 
     user    system   elapsed 
16010.980   129.222 16188.001 
     user    system   elapsed 
16323.817   131.763 16504.242 
     user    system   elapsed 
16629.330   134.142 16813.430 
     user    system   elapsed 
16935.468   136.591 17123.317 
     user    system   elapsed 
17244.622   139.156 17435.829 
     user    system   elapsed 
17554.382   141.725 17749.069 
     user    system   elapsed 
17863.771   144.183 18061.979 
     user    system   elapsed 
18166.379   146.592 18367.824 
     user    system   elapsed 
18468.050   148.616 18672.601 
    user   system  elapsed 
18769.68   150.72 18977.12 
     user    system   elapsed 
19074.548   152.501 19284.570 
     user    system   elapsed 
19385.956   154.969 19600.461 
     user    system   elapsed 
19693.204   157.133 19910.685 
     user    system   elapsed 
20003.458   159.457 20224.373 
     user    system   elapsed 
20311.474   161.782 20535.772 
     user    system   elapsed 
20616.274   163.952 20843.783 
     user    system   elapsed 
20925.287   166.094 21155.754 
    user   system  elapsed 
21231.78   168.48 21465.72 
     user    system   elapsed 
21526.560   170.889 21763.674 
     user    system   elapsed 
21832.604   172.923 22072.531 
     user    system   elapsed 
22137.515   174.815 22381.040 
     user    system   elapsed 
22441.226   176.956 22687.924 
     user    system   elapsed 
22737.354   179.089 22987.059 
     user    system   elapsed 
23022.634   181.028 23274.948 
     user    system   elapsed 
23309.900   183.072 23564.908 
     user    system   elapsed 
23598.817   185.193 23856.593 
     user    system   elapsed 
23891.355   187.643 24152.282 
     user    system   elapsed 
24182.268   190.482 24446.728 
     user    system   elapsed 
24477.465   193.139 24745.252 
     user    system   elapsed 
24785.019   195.804 25056.137 
     user    system   elapsed 
25075.694   198.182 25349.862 
     user    system   elapsed 
25369.937   200.775 25647.403 
    user   system  elapsed 
25662.85   203.34 25943.54 
    user   system  elapsed 
25955.20   205.54 26238.78 
    user   system  elapsed 
26248.07   207.80 26534.58 
     user    system   elapsed 
26546.260   210.312 26835.999 
    user   system  elapsed 
26834.20   212.45 27126.73 
     user    system   elapsed 
27130.328   214.877 27425.962 
     user    system   elapsed 
27423.335   217.452 27722.270 
    user   system  elapsed 
27712.27   220.01 28014.44 
     user    system   elapsed 
28010.704   222.477 28316.073 
     user    system   elapsed 
28304.457   225.087 28613.107 
     user    system   elapsed 
28598.116   227.606 28909.959 
     user    system   elapsed 
28888.244   229.854 29203.007 
     user    system   elapsed 
29188.622   232.341 29506.568 
     user    system   elapsed 
29485.388   234.777 29806.464 
     user    system   elapsed 
29784.898   237.411 30109.353 
     user    system   elapsed 
30090.798   239.759 30418.392 
     user    system   elapsed 
30391.165   242.265 30722.083 
     user    system   elapsed 
30690.949   244.666 31025.067 
     user    system   elapsed 
30995.941   247.095 31333.288 
     user    system   elapsed 
31293.859   249.649 31634.561 
     user    system   elapsed 
31593.132   252.389 31937.852 
     user    system   elapsed 
31896.252   255.842 32245.897 
    user   system  elapsed 
32193.45   258.71 32546.75 
     user    system   elapsed 
32485.855   261.194 32842.420 
     user    system   elapsed 
32780.665   263.695 33140.468 
     user    system   elapsed 
33070.925   266.305 33434.370 
    user   system  elapsed 
33370.77   268.94 33738.08 
     user    system   elapsed 
33669.543   270.988 34039.659 
     user    system   elapsed 
33966.251   273.611 34339.747 
     user    system   elapsed 
34259.213   275.971 34635.833 
     user    system   elapsed 
34563.633   278.845 34944.306 
     user    system   elapsed 
34862.999   281.268 35247.047 
    user   system  elapsed 
35164.71   284.10 35552.31 
     user    system   elapsed 
35469.848   286.764 35860.880 
     user    system   elapsed 
35763.750   289.344 36158.425 
     user    system   elapsed 
36062.207   292.403 36461.674 
     user    system   elapsed 
36360.929   295.059 36763.867 
     user    system   elapsed 
36659.998   297.572 37066.178 
    user   system  elapsed 
36958.21   299.81 37367.34 
     user    system   elapsed 
37249.799   302.414 37662.659 
     user    system   elapsed 
37543.654   305.277 37960.559 
     user    system   elapsed 
37836.338   307.889 38256.674 
     user    system   elapsed 
38138.057   310.151 38561.415 
     user    system   elapsed 
38436.032   312.563 38862.563 
     user    system   elapsed 
38729.147   315.215 39159.410 
     user    system   elapsed 
39026.231   317.806 39460.485 
     user    system   elapsed 
39321.071   320.752 39759.492 
     user    system   elapsed 
39613.455   323.141 40055.053 
     user    system   elapsed 
39909.245   325.299 40353.748 
     user    system   elapsed 
40217.091   328.034 40665.075 
     user    system   elapsed 
40524.688   330.733 40976.407 
     user    system   elapsed 
40829.733   333.478 41285.120 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
