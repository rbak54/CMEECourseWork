 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.651   0.035   0.691 
   user  system elapsed 
288.762   2.762 292.003 
   user  system elapsed 
555.208   4.891 560.761 
   user  system elapsed 
829.957   7.549 838.358 
    user   system  elapsed 
1117.185   10.214 1128.268 
    user   system  elapsed 
1408.977   12.966 1422.846 
    user   system  elapsed 
1700.477   16.325 1717.738 
    user   system  elapsed 
1989.502   19.291 2009.753 
    user   system  elapsed 
2284.754   22.498 2308.281 
    user   system  elapsed 
2579.844   25.435 2606.383 
    user   system  elapsed 
2874.405   28.079 2903.614 
    user   system  elapsed 
3168.998   30.662 3200.808 
    user   system  elapsed 
3461.398   33.036 3495.614 
    user   system  elapsed 
3764.496   35.575 3801.471 
    user   system  elapsed 
4064.092   38.293 4103.821 
    user   system  elapsed 
4358.833   40.767 4401.064 
    user   system  elapsed 
4653.243   42.907 4697.643 
    user   system  elapsed 
4946.131   45.112 4992.764 
    user   system  elapsed 
5237.019   47.498 5286.066 
    user   system  elapsed 
5528.895   49.829 5580.342 
    user   system  elapsed 
5819.259   52.460 5873.401 
    user   system  elapsed 
6112.953   55.147 6169.967 
    user   system  elapsed 
6402.924   57.255 6462.075 
    user   system  elapsed 
6691.483   60.095 6753.509 
    user   system  elapsed 
6985.370   62.295 7049.644 
    user   system  elapsed 
7279.319   64.725 7346.106 
    user   system  elapsed 
7563.370   67.229 7632.721 
    user   system  elapsed 
7855.638   69.434 7927.269 
    user   system  elapsed 
8122.350   71.850 8196.458 
    user   system  elapsed 
8352.904   73.961 8429.159 
    user   system  elapsed 
8590.912   75.907 8669.160 
    user   system  elapsed 
8832.660   77.956 8913.007 
    user   system  elapsed 
9070.242   79.992 9152.676 
    user   system  elapsed 
9300.338   82.078 9384.895 
    user   system  elapsed 
9539.285   84.004 9625.822 
    user   system  elapsed 
9774.791   85.963 9863.339 
     user    system   elapsed 
10005.990    87.693 10096.306 
     user    system   elapsed 
10232.345    89.805 10324.801 
     user    system   elapsed 
10461.580    91.711 10555.979 
     user    system   elapsed 
10675.572    93.522 10771.802 
     user    system   elapsed 
10901.765    95.195 10999.699 
     user    system   elapsed 
11134.410    96.904 11234.096 
     user    system   elapsed 
11355.881    98.734 11457.414 
     user    system   elapsed 
11594.442   100.962 11698.244 
     user    system   elapsed 
11841.458   102.933 11947.285 
    user   system  elapsed 
12096.36   104.85 12204.16 
     user    system   elapsed 
12347.294   106.972 12457.294 
     user    system   elapsed 
12590.258   108.773 12702.099 
     user    system   elapsed 
12835.604   110.761 12949.493 
     user    system   elapsed 
13089.505   112.786 13205.462 
     user    system   elapsed 
13341.350   114.639 13459.227 
    user   system  elapsed 
13585.12   116.19 13704.59 
     user    system   elapsed 
13838.355   117.961 13959.663 
     user    system   elapsed 
14092.495   120.052 14215.978 
     user    system   elapsed 
14345.060   122.403 14470.939 
     user    system   elapsed 
14607.830   124.642 14736.039 
     user    system   elapsed 
14861.042   126.953 14991.600 
     user    system   elapsed 
15116.289   129.136 15249.117 
     user    system   elapsed 
15366.379   131.339 15501.459 
     user    system   elapsed 
15619.732   133.463 15757.023 
     user    system   elapsed 
15867.570   135.604 16007.077 
     user    system   elapsed 
16119.840   137.967 16261.776 
     user    system   elapsed 
16365.482   140.313 16509.797 
     user    system   elapsed 
16607.688   142.172 16753.896 
     user    system   elapsed 
16866.632   144.032 17014.759 
     user    system   elapsed 
17108.453   145.808 17258.380 
     user    system   elapsed 
17365.832   147.672 17517.678 
     user    system   elapsed 
17631.979   149.626 17785.843 
     user    system   elapsed 
17888.630   151.524 18044.447 
     user    system   elapsed 
18157.113   153.442 18314.920 
     user    system   elapsed 
18414.897   155.684 18575.003 
     user    system   elapsed 
18664.282   157.668 18826.419 
     user    system   elapsed 
18927.449   159.766 19091.746 
     user    system   elapsed 
19180.515   161.869 19346.975 
    user   system  elapsed 
19430.29   163.62 19598.54 
     user    system   elapsed 
19680.605   165.392 19850.677 
     user    system   elapsed 
19941.042   167.533 20113.317 
     user    system   elapsed 
20200.927   169.362 20375.119 
     user    system   elapsed 
20462.089   171.323 20638.307 
     user    system   elapsed 
20727.091   173.551 20905.626 
     user    system   elapsed 
20988.351   175.657 21169.052 
    user   system  elapsed 
21251.15   177.72 21433.98 
     user    system   elapsed 
21515.343   179.658 21700.193 
     user    system   elapsed 
21774.909   181.449 21961.613 
     user    system   elapsed 
22037.491   183.373 22226.192 
    user   system  elapsed 
22280.80   185.13 22471.30 
     user    system   elapsed 
22498.011   186.765 22690.182 
     user    system   elapsed 
22721.591   188.464 22915.510 
     user    system   elapsed 
22947.895   190.035 23143.438 
     user    system   elapsed 
23172.476   191.977 23370.009 
     user    system   elapsed 
23393.102   193.841 23592.538 
     user    system   elapsed 
23617.157   195.583 23818.388 
     user    system   elapsed 
23838.023   197.443 24041.160 
     user    system   elapsed 
24061.232   199.062 24266.035 
     user    system   elapsed 
24283.457   200.972 24490.212 
     user    system   elapsed 
24510.918   202.754 24719.514 
     user    system   elapsed 
24734.226   204.611 24944.730 
     user    system   elapsed 
24959.544   206.298 25171.781 
     user    system   elapsed 
25184.724   208.016 25398.735 
     user    system   elapsed 
25406.778   209.764 25622.590 
     user    system   elapsed 
25631.682   211.908 25849.698 
     user    system   elapsed 
25861.313   213.699 26081.202 
     user    system   elapsed 
26090.955   215.611 26312.832 
     user    system   elapsed 
26316.372   217.708 26540.406 
     user    system   elapsed 
26537.848   219.781 26764.002 
    user   system  elapsed 
26768.09   221.72 26996.25 
     user    system   elapsed 
26990.843   223.642 27220.960 
     user    system   elapsed 
27211.042   225.452 27443.017 
     user    system   elapsed 
27435.821   227.458 27669.875 
     user    system   elapsed 
27656.197   229.108 27891.936 
    user   system  elapsed 
27879.96   230.86 28117.51 
     user    system   elapsed 
28095.866   232.512 28335.094 
     user    system   elapsed 
28313.220   234.475 28554.437 
    user   system  elapsed 
28537.73   236.43 28780.95 
    user   system  elapsed 
28758.05   238.42 29003.30 
    user   system  elapsed 
28980.12   240.51 29227.50 
     user    system   elapsed 
29201.194   242.346 29450.465 
     user    system   elapsed 
29418.488   244.045 29669.487 
     user    system   elapsed 
29637.851   245.799 29890.630 
     user    system   elapsed 
29861.512   247.629 30116.168 
     user    system   elapsed 
30089.375   249.662 30346.120 
    user   system  elapsed 
30309.70   251.39 30568.21 
     user    system   elapsed 
30535.478   253.093 30795.731 
     user    system   elapsed 
30761.684   254.983 31023.883 
     user    system   elapsed 
30984.659   256.844 31248.759 
     user    system   elapsed 
31202.918   258.581 31468.778 
     user    system   elapsed 
31426.382   260.452 31694.153 
     user    system   elapsed 
31645.944   262.179 31915.479 
     user    system   elapsed 
31868.862   264.049 32140.306 
     user    system   elapsed 
32088.660   265.839 32361.924 
     user    system   elapsed 
32306.557   267.816 32581.840 
     user    system   elapsed 
32528.728   269.886 32806.119 
     user    system   elapsed 
32752.369   271.666 33031.587 
     user    system   elapsed 
32973.326   273.407 33254.317 
     user    system   elapsed 
33197.219   275.469 33480.320 
     user    system   elapsed 
33422.613   277.261 33707.549 
     user    system   elapsed 
33644.625   279.276 33931.616 
     user    system   elapsed 
33866.053   281.313 34155.115 
    user   system  elapsed 
34085.95   283.15 34376.89 
     user    system   elapsed 
34305.060   285.101 34597.980 
     user    system   elapsed 
34524.984   286.864 34819.700 
     user    system   elapsed 
34738.487   288.658 35035.022 
     user    system   elapsed 
34953.906   290.658 35252.486 
     user    system   elapsed 
35175.774   292.401 35476.153 
     user    system   elapsed 
35397.554   294.099 35699.676 
     user    system   elapsed 
35620.620   295.865 35924.552 
     user    system   elapsed 
35840.760   297.613 36146.481 
    user   system  elapsed 
36061.52   299.46 36369.13 
     user    system   elapsed 
36284.985   301.071 36594.262 
     user    system   elapsed 
36507.628   302.787 36818.684 
     user    system   elapsed 
36724.997   304.511 37037.820 
     user    system   elapsed 
36947.990   306.478 37262.844 
     user    system   elapsed 
37165.002   308.249 37481.664 
     user    system   elapsed 
37381.489   310.039 37699.972 
     user    system   elapsed 
37598.309   312.031 37918.819 
     user    system   elapsed 
37821.090   313.912 38143.545 
    user   system  elapsed 
38040.32   315.69 38364.59 
     user    system   elapsed 
38261.421   317.527 38587.568 
     user    system   elapsed 
38483.495   319.251 38811.414 
     user    system   elapsed 
38702.537   321.251 39032.485 
    user   system  elapsed 
38920.80   323.07 39252.62 
     user    system   elapsed 
39139.436   325.139 39473.349 
     user    system   elapsed 
39352.938   326.961 39688.704 
     user    system   elapsed 
39571.027   328.835 39908.699 
     user    system   elapsed 
39784.491   330.656 40124.012 
     user    system   elapsed 
40004.737   332.468 40346.111 
     user    system   elapsed 
40221.943   334.334 40565.224 
     user    system   elapsed 
40439.159   336.278 40784.415 
     user    system   elapsed 
40656.722   338.108 41003.869 
    user   system  elapsed 
40873.80   340.24 41223.12 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
