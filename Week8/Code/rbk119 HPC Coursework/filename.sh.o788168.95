 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.781   0.045   0.828 
   user  system elapsed 
288.477   2.550 291.192 
   user  system elapsed 
573.326   5.134 578.815 
   user  system elapsed 
839.570   7.453 847.478 
    user   system  elapsed 
1120.507   10.037 1131.174 
    user   system  elapsed 
1393.499   12.545 1406.806 
    user   system  elapsed 
1667.296   14.983 1683.189 
    user   system  elapsed 
1916.730   17.588 1935.415 
    user   system  elapsed 
2162.806   20.251 2184.206 
    user   system  elapsed 
2437.596   22.996 2461.860 
    user   system  elapsed 
2715.100   25.443 2741.942 
    user   system  elapsed 
2995.732   27.844 3025.184 
    user   system  elapsed 
3281.292   29.857 3312.857 
    user   system  elapsed 
3559.014   32.196 3593.093 
    user   system  elapsed 
3839.201   34.282 3875.530 
    user   system  elapsed 
4128.236   36.599 4167.108 
    user   system  elapsed 
4373.732   38.692 4414.766 
    user   system  elapsed 
4611.803   40.754 4654.925 
    user   system  elapsed 
4857.371   42.446 4902.213 
    user   system  elapsed 
5103.918   44.254 5150.602 
    user   system  elapsed 
5349.020   46.329 5397.817 
    user   system  elapsed 
5588.642   48.914 5640.044 
    user   system  elapsed 
5827.195   51.014 5880.721 
    user   system  elapsed 
6060.331   53.102 6115.959 
    user   system  elapsed 
6292.470   55.103 6350.112 
    user   system  elapsed 
6526.917   57.136 6586.607 
    user   system  elapsed 
6760.613   58.907 6822.090 
    user   system  elapsed 
6992.665   60.855 7056.105 
    user   system  elapsed 
7225.726   62.811 7291.135 
    user   system  elapsed 
7458.680   65.014 7526.307 
    user   system  elapsed 
7691.734   67.038 7761.399 
    user   system  elapsed 
7924.710   68.773 7996.124 
    user   system  elapsed 
8157.875   70.548 8231.079 
    user   system  elapsed 
8391.029   72.413 8466.112 
    user   system  elapsed 
8626.303   74.100 8703.087 
    user   system  elapsed 
8860.488   76.042 8939.229 
    user   system  elapsed 
9094.252   78.070 9175.035 
    user   system  elapsed 
9327.505   79.748 9409.981 
    user   system  elapsed 
9560.822   81.898 9645.463 
    user   system  elapsed 
9793.957   83.727 9880.441 
     user    system   elapsed 
10027.671    85.527 10115.969 
     user    system   elapsed 
10261.143    87.198 10351.127 
    user   system  elapsed 
10494.44    88.95 10586.19 
     user    system   elapsed 
10727.924    90.669 10821.407 
     user    system   elapsed 
10961.583    92.515 11056.926 
     user    system   elapsed 
11195.173    94.416 11292.437 
    user   system  elapsed 
11429.31    96.26 11528.44 
     user    system   elapsed 
11662.184    97.973 11763.042 
    user   system  elapsed 
11895.49    99.64 11998.03 
     user    system   elapsed 
12128.283   101.454 12232.653 
     user    system   elapsed 
12362.085   103.232 12468.248 
    user   system  elapsed 
12596.26   105.12 12704.32 
     user    system   elapsed 
12830.779   106.964 12940.703 
     user    system   elapsed 
13064.760   108.937 13176.673 
    user   system  elapsed 
13298.55   110.82 13412.36 
     user    system   elapsed 
13530.415   112.813 13646.295 
     user    system   elapsed 
13763.690   115.088 13881.861 
     user    system   elapsed 
13999.422   117.243 14119.761 
     user    system   elapsed 
14234.205   119.265 14356.605 
     user    system   elapsed 
14465.473   121.467 14590.090 
     user    system   elapsed 
14696.037   123.637 14822.839 
     user    system   elapsed 
14927.261   125.704 15056.144 
     user    system   elapsed 
15159.453   127.496 15290.142 
     user    system   elapsed 
15394.673   129.599 15527.480 
    user   system  elapsed 
15626.09   131.20 15760.52 
     user    system   elapsed 
15858.711   133.211 15995.161 
     user    system   elapsed 
16091.107   135.082 16229.443 
     user    system   elapsed 
16323.820   136.867 16463.957 
     user    system   elapsed 
16556.678   138.569 16698.532 
     user    system   elapsed 
16788.428   139.993 16931.719 
     user    system   elapsed 
17022.361   141.933 17167.610 
     user    system   elapsed 
17254.382   144.029 17401.745 
     user    system   elapsed 
17485.207   146.131 17634.688 
     user    system   elapsed 
17719.434   147.844 17870.644 
     user    system   elapsed 
17953.082   149.595 18106.058 
     user    system   elapsed 
18190.302   151.196 18344.907 
     user    system   elapsed 
18428.002   153.169 18584.595 
     user    system   elapsed 
18663.352   155.094 18821.885 
     user    system   elapsed 
18899.647   156.772 19059.879 
     user    system   elapsed 
19134.226   158.671 19296.373 
     user    system   elapsed 
19368.424   160.845 19532.761 
     user    system   elapsed 
19602.447   162.759 19768.715 
     user    system   elapsed 
19836.714   164.655 20004.895 
     user    system   elapsed 
20070.894   166.438 20240.872 
     user    system   elapsed 
20305.309   168.303 20477.169 
     user    system   elapsed 
20540.457   170.062 20714.091 
     user    system   elapsed 
20774.851   171.915 20950.354 
     user    system   elapsed 
21009.147   173.594 21186.344 
     user    system   elapsed 
21244.361   175.528 21423.511 
    user   system  elapsed 
21482.07   177.53 21663.25 
     user    system   elapsed 
21717.502   179.488 21900.649 
     user    system   elapsed 
21952.254   181.616 22137.543 
     user    system   elapsed 
22187.025   183.448 22374.162 
     user    system   elapsed 
22421.613   185.247 22610.564 
     user    system   elapsed 
22656.488   186.952 22847.160 
     user    system   elapsed 
22902.004   189.153 23094.900 
    user   system  elapsed 
23137.58   191.34 23332.67 
     user    system   elapsed 
23374.444   193.196 23571.420 
     user    system   elapsed 
23608.227   194.763 23806.790 
     user    system   elapsed 
23843.116   196.652 24043.583 
     user    system   elapsed 
24081.018   198.428 24283.275 
     user    system   elapsed 
24321.570   200.188 24525.606 
     user    system   elapsed 
24562.356   202.312 24768.539 
     user    system   elapsed 
24801.796   204.381 25010.073 
     user    system   elapsed 
25034.635   206.196 25244.741 
     user    system   elapsed 
25267.456   208.038 25479.421 
     user    system   elapsed 
25500.201   209.753 25713.896 
     user    system   elapsed 
25732.839   211.464 25948.260 
     user    system   elapsed 
25964.020   212.983 26180.974 
     user    system   elapsed 
26197.690   214.914 26416.591 
     user    system   elapsed 
26431.907   216.783 26652.693 
     user    system   elapsed 
26666.921   218.533 26889.472 
     user    system   elapsed 
26900.617   220.261 27124.909 
     user    system   elapsed 
27134.318   222.212 27360.572 
     user    system   elapsed 
27364.731   223.945 27592.731 
     user    system   elapsed 
27595.911   225.567 27825.546 
     user    system   elapsed 
27827.136   227.447 28058.664 
     user    system   elapsed 
28058.417   229.168 28291.677 
     user    system   elapsed 
28289.790   230.821 28524.716 
     user    system   elapsed 
28520.384   232.581 28757.081 
     user    system   elapsed 
28751.375   234.378 28989.881 
     user    system   elapsed 
28981.799   236.328 29222.267 
     user    system   elapsed 
29213.735   238.184 29456.072 
     user    system   elapsed 
29444.656   240.252 29689.072 
     user    system   elapsed 
29675.171   242.114 29921.461 
     user    system   elapsed 
29906.315   243.971 30154.475 
     user    system   elapsed 
30137.918   245.833 30387.952 
     user    system   elapsed 
30368.495   247.477 30620.186 
    user   system  elapsed 
30599.06   249.13 30852.42 
     user    system   elapsed 
30829.706   251.158 31085.101 
     user    system   elapsed 
31060.054   252.921 31317.225 
     user    system   elapsed 
31291.149   254.668 31550.079 
     user    system   elapsed 
31522.651   256.561 31783.486 
    user   system  elapsed 
31754.49   258.31 32017.09 
     user    system   elapsed 
31986.474   260.036 32250.808 
     user    system   elapsed 
32219.210   261.633 32485.154 
     user    system   elapsed 
32451.798   263.278 32719.399 
     user    system   elapsed 
32683.029   265.147 32952.511 
     user    system   elapsed 
32915.080   267.211 33186.639 
    user   system  elapsed 
33147.02   268.89 33420.27 
     user    system   elapsed 
33379.179   270.806 33654.358 
     user    system   elapsed 
33609.710   272.544 33886.638 
     user    system   elapsed 
33839.167   274.359 34117.923 
     user    system   elapsed 
34069.919   276.664 34350.992 
     user    system   elapsed 
34301.205   278.336 34583.963 
     user    system   elapsed 
34529.120   280.302 34813.859 
     user    system   elapsed 
34755.928   282.029 35042.408 
     user    system   elapsed 
34980.760   283.857 35269.148 
     user    system   elapsed 
35211.302   285.708 35501.564 
     user    system   elapsed 
35447.791   287.988 35740.348 
     user    system   elapsed 
35677.915   289.577 35972.077 
     user    system   elapsed 
35909.424   291.481 36205.506 
     user    system   elapsed 
36143.039   293.483 36441.160 
    user   system  elapsed 
36370.57   295.20 36670.43 
     user    system   elapsed 
36603.967   296.934 36905.575 
     user    system   elapsed 
36836.626   298.525 37139.846 
     user    system   elapsed 
37066.681   300.343 37371.735 
     user    system   elapsed 
37300.017   302.145 37606.889 
     user    system   elapsed 
37527.359   304.139 37836.239 
     user    system   elapsed 
37757.447   305.839 38068.043 
     user    system   elapsed 
37991.406   307.945 38304.128 
     user    system   elapsed 
38222.861   309.988 38537.643 
     user    system   elapsed 
38455.950   312.041 38772.800 
     user    system   elapsed 
38684.282   313.918 39003.024 
    user   system  elapsed 
38913.20   315.97 39234.01 
     user    system   elapsed 
39145.178   318.025 39468.071 
     user    system   elapsed 
39378.055   319.648 39702.599 
     user    system   elapsed 
39612.689   321.525 39939.219 
     user    system   elapsed 
39843.124   323.352 40171.494 
     user    system   elapsed 
40072.485   324.912 40402.428 
     user    system   elapsed 
40300.297   326.868 40632.208 
     user    system   elapsed 
40531.507   328.668 40865.231 
     user    system   elapsed 
40764.387   330.423 41099.893 
     user    system   elapsed 
41003.306   332.552 41340.969 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
