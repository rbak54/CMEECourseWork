 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.515   0.027   0.543 
   user  system elapsed 
219.527   2.048 221.591 
   user  system elapsed 
438.198   3.871 442.101 
   user  system elapsed 
671.522   6.284 677.881 
   user  system elapsed 
901.570   8.373 910.058 
    user   system  elapsed 
1119.026   10.593 1129.771 
    user   system  elapsed 
1335.657   12.985 1348.824 
    user   system  elapsed 
1554.743   15.399 1570.364 
    user   system  elapsed 
1762.039   17.577 1779.845 
    user   system  elapsed 
1975.199   19.733 1995.183 
    user   system  elapsed 
2211.627   21.845 2233.773 
    user   system  elapsed 
2461.904   24.009 2486.287 
    user   system  elapsed 
2683.500   26.087 2709.998 
    user   system  elapsed 
2897.463   28.025 2925.915 
    user   system  elapsed 
3122.547   29.809 3152.816 
    user   system  elapsed 
3344.955   31.731 3377.191 
    user   system  elapsed 
3556.741   33.448 3590.706 
    user   system  elapsed 
3770.207   35.439 3806.173 
    user   system  elapsed 
3984.494   37.120 4022.168 
    user   system  elapsed 
4197.760   39.034 4237.371 
    user   system  elapsed 
4408.645   40.766 4449.997 
    user   system  elapsed 
4614.510   43.130 4658.235 
    user   system  elapsed 
4822.439   45.144 4868.186 
    user   system  elapsed 
5029.487   46.741 5076.837 
    user   system  elapsed 
5236.995   48.524 5286.134 
    user   system  elapsed 
5443.571   50.341 5494.533 
    user   system  elapsed 
5649.697   51.932 5702.256 
    user   system  elapsed 
5855.399   53.822 5909.855 
    user   system  elapsed 
6062.253   55.426 6118.319 
    user   system  elapsed 
6268.443   57.406 6326.495 
    user   system  elapsed 
6474.275   59.415 6534.342 
    user   system  elapsed 
6682.205   61.427 6744.291 
    user   system  elapsed 
6886.991   63.030 6950.686 
    user   system  elapsed 
7093.729   64.716 7159.117 
    user   system  elapsed 
7302.846   66.468 7369.992 
    user   system  elapsed 
7512.229   68.361 7581.274 
    user   system  elapsed 
7721.302   70.076 7792.068 
    user   system  elapsed 
7929.594   72.011 8002.301 
    user   system  elapsed 
8138.730   74.117 8213.550 
    user   system  elapsed 
8345.913   75.733 8422.356 
    user   system  elapsed 
8552.553   77.248 8630.517 
    user   system  elapsed 
8760.224   78.955 8839.903 
    user   system  elapsed 
8968.991   80.596 9050.318 
    user   system  elapsed 
9176.924   82.589 9260.250 
    user   system  elapsed 
9384.780   84.294 9469.817 
    user   system  elapsed 
9592.169   85.812 9678.731 
    user   system  elapsed 
9797.589   87.810 9886.156 
     user    system   elapsed 
10004.250    89.447 10094.460 
     user    system   elapsed 
10212.990    91.215 10304.974 
     user    system   elapsed 
10418.712    92.814 10512.302 
     user    system   elapsed 
10621.580    94.498 10716.860 
     user    system   elapsed 
10827.789    96.175 10924.753 
     user    system   elapsed 
11036.028    97.672 11134.495 
     user    system   elapsed 
11246.551    99.498 11346.850 
     user    system   elapsed 
11456.721   101.255 11558.784 
     user    system   elapsed 
11665.037   103.221 11769.072 
     user    system   elapsed 
11873.342   105.218 11979.380 
     user    system   elapsed 
12081.580   107.037 12189.444 
    user   system  elapsed 
12289.92   108.99 12399.74 
     user    system   elapsed 
12498.477   110.952 12610.269 
    user   system  elapsed 
12707.42   113.15 12821.42 
     user    system   elapsed 
12915.819   115.174 13031.848 
     user    system   elapsed 
13138.578   116.758 13256.230 
     user    system   elapsed 
13352.558   118.576 13472.059 
    user   system  elapsed 
13564.29   120.47 13685.70 
     user    system   elapsed 
13774.467   122.074 13897.501 
     user    system   elapsed 
13991.656   123.827 14116.468 
    user   system  elapsed 
14211.71   125.82 14338.55 
    user   system  elapsed 
14436.66   127.73 14565.44 
     user    system   elapsed 
14666.166   129.515 14796.776 
     user    system   elapsed 
14890.654   131.362 15023.144 
    user   system  elapsed 
15116.48   133.58 15251.23 
     user    system   elapsed 
15342.515   135.464 15479.211 
     user    system   elapsed 
15570.831   137.237 15709.348 
     user    system   elapsed 
15800.095   138.732 15940.160 
     user    system   elapsed 
16026.218   140.128 16167.736 
     user    system   elapsed 
16251.315   142.076 16394.825 
     user    system   elapsed 
16475.177   143.801 16620.453 
     user    system   elapsed 
16693.640   145.511 16840.651 
    user   system  elapsed 
16906.62   147.66 17055.80 
    user   system  elapsed 
17117.69   149.65 17268.87 
     user    system   elapsed 
17328.394   151.467 17481.394 
     user    system   elapsed 
17538.822   153.535 17693.899 
     user    system   elapsed 
17749.549   155.436 17906.535 
     user    system   elapsed 
17959.348   157.271 18118.178 
     user    system   elapsed 
18169.342   159.268 18330.178 
     user    system   elapsed 
18378.781   161.117 18541.474 
     user    system   elapsed 
18588.698   163.181 18753.464 
     user    system   elapsed 
18798.991   165.082 18965.666 
     user    system   elapsed 
19009.422   166.901 19177.925 
     user    system   elapsed 
19216.075   168.703 19386.387 
     user    system   elapsed 
19419.059   170.505 19591.179 
     user    system   elapsed 
19621.549   172.095 19795.266 
     user    system   elapsed 
19823.952   173.912 19999.493 
     user    system   elapsed 
20028.858   175.689 20206.389 
     user    system   elapsed 
20231.885   177.614 20411.349 
     user    system   elapsed 
20434.754   179.474 20616.086 
     user    system   elapsed 
20636.686   181.217 20819.769 
     user    system   elapsed 
20839.757   183.332 21024.964 
    user   system  elapsed 
21043.03   185.43 21230.34 
     user    system   elapsed 
21246.212   186.986 21435.088 
     user    system   elapsed 
21449.486   188.717 21640.101 
     user    system   elapsed 
21653.895   190.547 21846.349 
     user    system   elapsed 
21856.233   192.421 22050.568 
     user    system   elapsed 
22058.548   194.115 22254.584 
     user    system   elapsed 
22260.914   195.851 22458.694 
     user    system   elapsed 
22463.083   197.518 22662.538 
     user    system   elapsed 
22662.388   199.323 22863.655 
     user    system   elapsed 
22861.365   200.859 23064.176 
     user    system   elapsed 
23060.150   202.563 23264.672 
     user    system   elapsed 
23258.933   204.299 23465.198 
     user    system   elapsed 
23457.535   205.987 23665.495 
     user    system   elapsed 
23656.219   207.873 23866.073 
     user    system   elapsed 
23854.598   209.591 24066.176 
    user   system  elapsed 
24053.12   211.35 24266.46 
     user    system   elapsed 
24251.527   213.162 24466.691 
     user    system   elapsed 
24450.295   215.113 24667.417 
    user   system  elapsed 
24648.99   216.87 24867.88 
     user    system   elapsed 
24847.681   218.666 25068.370 
     user    system   elapsed 
25055.776   220.888 25278.698 
    user   system  elapsed 
25259.58   222.69 25484.31 
     user    system   elapsed 
25459.915   224.444 25686.410 
     user    system   elapsed 
25659.104   226.359 25887.522 
    user   system  elapsed 
25858.49   228.26 26088.82 
     user    system   elapsed 
26058.088   230.021 26290.184 
     user    system   elapsed 
26257.782   231.957 26491.821 
     user    system   elapsed 
26457.632   233.748 26693.469 
     user    system   elapsed 
26657.002   235.592 26894.691 
     user    system   elapsed 
26857.197   237.612 27096.913 
     user    system   elapsed 
27056.240   239.473 27297.825 
     user    system   elapsed 
27255.226   241.161 27498.507 
     user    system   elapsed 
27454.803   242.937 27699.867 
     user    system   elapsed 
27653.915   244.575 27900.624 
     user    system   elapsed 
27853.435   246.399 28101.975 
     user    system   elapsed 
28052.460   248.172 28302.783 
     user    system   elapsed 
28251.327   250.122 28503.606 
     user    system   elapsed 
28459.042   251.777 28712.983 
     user    system   elapsed 
28664.222   253.811 28920.206 
     user    system   elapsed 
28865.172   255.634 29122.986 
     user    system   elapsed 
29065.323   257.477 29324.985 
     user    system   elapsed 
29269.138   259.193 29530.522 
     user    system   elapsed 
29468.709   260.977 29731.884 
     user    system   elapsed 
29682.981   262.883 29948.081 
     user    system   elapsed 
29883.255   264.728 30150.206 
     user    system   elapsed 
30090.559   266.364 30359.154 
    user   system  elapsed 
30295.79   268.24 30566.27 
     user    system   elapsed 
30494.893   270.373 30767.514 
     user    system   elapsed 
30692.853   272.038 30967.145 
     user    system   elapsed 
30890.281   273.767 31166.309 
     user    system   elapsed 
31087.894   275.494 31365.655 
     user    system   elapsed 
31287.555   277.408 31567.382 
     user    system   elapsed 
31485.976   279.352 31767.932 
     user    system   elapsed 
31684.297   281.409 31968.496 
     user    system   elapsed 
31887.287   283.332 32173.499 
     user    system   elapsed 
32086.511   285.299 32374.697 
     user    system   elapsed 
32284.295   287.014 32574.203 
     user    system   elapsed 
32482.409   288.821 32774.131 
    user   system  elapsed 
32682.07   290.76 32975.75 
     user    system   elapsed 
32881.501   292.542 33176.981 
    user   system  elapsed 
33081.10   294.37 33378.43 
     user    system   elapsed 
33288.512   296.068 33587.605 
     user    system   elapsed 
33490.186   297.885 33791.105 
     user    system   elapsed 
33695.748   299.654 33998.487 
     user    system   elapsed 
33903.959   301.604 34208.711 
     user    system   elapsed 
34105.956   303.569 34412.680 
     user    system   elapsed 
34307.479   305.236 34615.877 
    user   system  elapsed 
34508.57   307.27 34819.01 
     user    system   elapsed 
34713.022   309.519 35025.783 
     user    system   elapsed 
34919.925   311.152 35234.329 
     user    system   elapsed 
35121.263   313.102 35437.622 
     user    system   elapsed 
35322.705   314.708 35640.678 
     user    system   elapsed 
35525.050   316.631 35844.954 
     user    system   elapsed 
35726.174   318.546 36048.001 
     user    system   elapsed 
35926.455   320.126 36249.871 
     user    system   elapsed 
36129.757   321.924 36454.977 
     user    system   elapsed 
36337.572   323.506 36664.380 
     user    system   elapsed 
36540.290   325.329 36868.927 
     user    system   elapsed 
36741.221   327.269 37071.805 
    user   system  elapsed 
36942.82   328.98 37275.12 
     user    system   elapsed 
37142.909   330.735 37476.971 
    user   system  elapsed 
37343.79   332.34 37679.47 
     user    system   elapsed 
37544.044   334.436 37881.820 
     user    system   elapsed 
37747.709   336.087 38087.143 
     user    system   elapsed 
37952.343   337.524 38293.221 
     user    system   elapsed 
38157.347   339.298 38500.006 
     user    system   elapsed 
38361.046   341.068 38705.482 
     user    system   elapsed 
38564.851   342.648 38910.876 
     user    system   elapsed 
38769.468   344.265 39117.127 
     user    system   elapsed 
38973.128   345.951 39322.491 
     user    system   elapsed 
39176.873   347.867 39528.161 
     user    system   elapsed 
39379.658   349.688 39732.775 
     user    system   elapsed 
39582.079   351.492 39937.006 
     user    system   elapsed 
39785.685   353.289 40142.417 
     user    system   elapsed 
39988.979   355.102 40347.531 
     user    system   elapsed 
40195.322   357.308 40556.169 
     user    system   elapsed 
40402.011   359.647 40765.238 
     user    system   elapsed 
40607.201   362.086 40973.160 
     user    system   elapsed 
40819.446   364.112 41187.439 
     user    system   elapsed 
41023.348   365.935 41393.211 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.99 (ave)

============================================
