 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.702   0.076   0.779 
   user  system elapsed 
249.426   2.381 252.371 
   user  system elapsed 
490.095   4.373 495.493 
   user  system elapsed 
736.106   6.588 744.254 
   user  system elapsed 
986.734   8.751 997.593 
    user   system  elapsed 
1235.016   11.299 1248.938 
    user   system  elapsed 
1474.702   13.371 1491.144 
    user   system  elapsed 
1708.636   15.596 1727.744 
    user   system  elapsed 
1923.126   17.939 1944.911 
    user   system  elapsed 
2153.521   19.997 2177.840 
    user   system  elapsed 
2415.822   22.114 2442.877 
    user   system  elapsed 
2658.652   24.068 2688.153 
    user   system  elapsed 
2902.444   25.964 2934.376 
    user   system  elapsed 
3160.368   27.980 3194.886 
    user   system  elapsed 
3402.108   30.144 3439.285 
    user   system  elapsed 
3648.366   32.002 3687.861 
    user   system  elapsed 
3891.559   33.920 3933.461 
    user   system  elapsed 
4120.155   35.637 4164.151 
    user   system  elapsed 
4344.178   37.409 4390.293 
    user   system  elapsed 
4584.838   39.401 4633.374 
    user   system  elapsed 
4825.650   41.398 4876.617 
    user   system  elapsed 
5060.408   43.308 5113.669 
    user   system  elapsed 
5255.276   44.894 5310.346 
    user   system  elapsed 
5458.515   46.633 5515.569 
    user   system  elapsed 
5659.860   48.161 5718.683 
    user   system  elapsed 
5858.192   49.781 5918.804 
    user   system  elapsed 
6067.689   51.533 6130.241 
    user   system  elapsed 
6275.605   53.215 6340.042 
    user   system  elapsed 
6475.634   55.294 6542.335 
    user   system  elapsed 
6685.618   57.001 6754.235 
    user   system  elapsed 
6889.499   58.918 6960.236 
    user   system  elapsed 
7093.445   60.675 7166.133 
    user   system  elapsed 
7290.200   62.547 7364.942 
    user   system  elapsed 
7486.956   64.133 7563.468 
    user   system  elapsed 
7685.567   65.913 7764.050 
    user   system  elapsed 
7886.926   67.416 7967.092 
    user   system  elapsed 
8087.625   69.189 8169.742 
    user   system  elapsed 
8285.755   70.720 8369.580 
    user   system  elapsed 
8485.044   72.335 8570.655 
    user   system  elapsed 
8685.127   73.876 8772.456 
    user   system  elapsed 
8889.049   75.287 8977.976 
    user   system  elapsed 
9091.667   76.970 9182.458 
    user   system  elapsed 
9296.823   78.719 9389.549 
    user   system  elapsed 
9495.628   80.620 9590.443 
    user   system  elapsed 
9692.609   82.200 9789.176 
    user   system  elapsed 
9888.566   83.772 9986.875 
     user    system   elapsed 
10084.865    85.363 10184.938 
     user    system   elapsed 
10288.320    86.887 10390.099 
     user    system   elapsed 
10486.681    88.521 10590.274 
    user   system  elapsed 
10685.14    90.39 10790.78 
     user    system   elapsed 
10883.708    91.959 10991.088 
     user    system   elapsed 
11085.134    93.831 11194.579 
     user    system   elapsed 
11299.429    95.551 11410.882 
     user    system   elapsed 
11527.148    97.375 11640.800 
     user    system   elapsed 
11768.082    99.409 11884.194 
     user    system   elapsed 
12006.160   101.213 12124.491 
     user    system   elapsed 
12247.019   103.339 12367.901 
    user   system  elapsed 
12482.31   105.42 12605.67 
    user   system  elapsed 
12728.71   107.57 12854.68 
     user    system   elapsed 
12973.042   109.725 13101.617 
     user    system   elapsed 
13218.865   111.955 13350.125 
     user    system   elapsed 
13466.127   114.086 13599.941 
    user   system  elapsed 
13707.66   116.08 13843.89 
     user    system   elapsed 
13960.312   118.133 14099.052 
     user    system   elapsed 
14218.738   120.202 14360.051 
     user    system   elapsed 
14483.970   121.952 14627.591 
     user    system   elapsed 
14736.259   123.693 14882.087 
     user    system   elapsed 
14984.923   125.562 15133.090 
     user    system   elapsed 
15236.539   127.079 15386.683 
     user    system   elapsed 
15486.175   128.792 15638.489 
     user    system   elapsed 
15741.681   130.465 15896.196 
     user    system   elapsed 
15995.897   132.404 16152.849 
     user    system   elapsed 
16240.246   133.908 16399.124 
     user    system   elapsed 
16482.456   135.206 16643.041 
     user    system   elapsed 
16732.821   136.907 16895.570 
     user    system   elapsed 
16978.689   138.279 17143.258 
     user    system   elapsed 
17225.719   139.767 17392.223 
     user    system   elapsed 
17466.598   141.542 17635.289 
     user    system   elapsed 
17710.447   143.246 17881.285 
    user   system  elapsed 
17951.65   145.12 18124.78 
     user    system   elapsed 
18194.727   146.995 18370.163 
     user    system   elapsed 
18434.213   148.976 18612.036 
     user    system   elapsed 
18674.413   151.136 18854.807 
     user    system   elapsed 
18914.297   153.242 19097.211 
     user    system   elapsed 
19153.413   155.108 19338.591 
     user    system   elapsed 
19390.624   157.239 19578.326 
     user    system   elapsed 
19633.505   159.179 19823.580 
     user    system   elapsed 
19870.085   161.257 20062.626 
     user    system   elapsed 
20104.094   163.216 20298.971 
     user    system   elapsed 
20342.942   165.318 20540.332 
     user    system   elapsed 
20584.815   167.255 20784.560 
     user    system   elapsed 
20819.886   169.129 21021.883 
     user    system   elapsed 
21066.663   171.444 21271.428 
     user    system   elapsed 
21341.812   173.465 21549.167 
    user   system  elapsed 
21618.45   175.46 21828.36 
    user   system  elapsed 
21883.55   177.71 22096.23 
     user    system   elapsed 
22155.936   179.944 22371.410 
     user    system   elapsed 
22369.316   182.001 22587.159 
     user    system   elapsed 
22567.614   183.619 22787.286 
     user    system   elapsed 
22770.115   185.453 22991.854 
    user   system  elapsed 
22970.41   187.26 23194.19 
     user    system   elapsed 
23171.126   188.913 23396.781 
     user    system   elapsed 
23374.445   190.874 23602.291 
     user    system   elapsed 
23575.695   192.693 23805.594 
    user   system  elapsed 
23775.88   194.45 24007.76 
     user    system   elapsed 
23976.290   196.258 24210.198 
     user    system   elapsed 
24177.056   197.964 24412.891 
     user    system   elapsed 
24378.394   199.672 24616.164 
     user    system   elapsed 
24579.629   201.415 24819.363 
    user   system  elapsed 
24776.60   203.10 25018.23 
     user    system   elapsed 
24972.606   204.716 25216.066 
     user    system   elapsed 
25168.627   206.461 25414.049 
     user    system   elapsed 
25363.593   208.201 25610.979 
     user    system   elapsed 
25559.771   210.097 25809.256 
     user    system   elapsed 
25758.054   211.849 26009.499 
     user    system   elapsed 
25955.476   213.563 26208.844 
     user    system   elapsed 
26152.330   215.331 26407.676 
     user    system   elapsed 
26348.167   216.919 26605.312 
     user    system   elapsed 
26549.361   218.683 26808.484 
     user    system   elapsed 
26758.365   220.582 27019.625 
    user   system  elapsed 
26969.38   222.41 27232.70 
    user   system  elapsed 
27183.34   224.15 27448.67 
     user    system   elapsed 
27390.505   225.997 27657.929 
     user    system   elapsed 
27597.475   227.677 27866.835 
     user    system   elapsed 
27803.305   229.379 28074.620 
     user    system   elapsed 
28009.535   231.352 28283.081 
     user    system   elapsed 
28215.993   233.366 28491.817 
     user    system   elapsed 
28422.910   235.145 28700.785 
     user    system   elapsed 
28631.781   236.833 28911.604 
     user    system   elapsed 
28840.649   238.734 29122.620 
     user    system   elapsed 
29051.785   240.684 29335.964 
     user    system   elapsed 
29261.394   242.454 29547.587 
     user    system   elapsed 
29469.866   244.369 29758.234 
    user   system  elapsed 
29679.04   246.16 29969.46 
     user    system   elapsed 
29889.361   248.045 30181.917 
     user    system   elapsed 
30093.849   249.957 30388.538 
    user   system  elapsed 
30295.80   251.80 30592.56 
     user    system   elapsed 
30496.023   253.626 30794.875 
     user    system   elapsed 
30702.007   255.514 31003.033 
     user    system   elapsed 
30914.703   257.722 31218.246 
     user    system   elapsed 
31129.514   259.703 31435.369 
     user    system   elapsed 
31342.862   261.562 31650.911 
    user   system  elapsed 
31566.80   263.47 31877.11 
     user    system   elapsed 
31784.636   265.234 32097.031 
     user    system   elapsed 
31993.494   267.293 32308.245 
     user    system   elapsed 
32195.369   269.248 32512.317 
     user    system   elapsed 
32396.320   270.718 32714.965 
     user    system   elapsed 
32602.479   272.564 32923.199 
     user    system   elapsed 
32805.235   274.428 33128.046 
     user    system   elapsed 
33008.999   276.186 33333.822 
     user    system   elapsed 
33211.112   277.763 33537.758 
     user    system   elapsed 
33414.457   279.394 33742.980 
     user    system   elapsed 
33618.000   281.184 33948.560 
     user    system   elapsed 
33819.962   282.907 34152.493 
     user    system   elapsed 
34020.793   284.753 34355.406 
     user    system   elapsed 
34227.660   286.639 34564.435 
     user    system   elapsed 
34431.181   288.333 34769.894 
    user   system  elapsed 
34634.45   289.82 34974.89 
     user    system   elapsed 
34838.897   291.682 35181.437 
     user    system   elapsed 
35046.372   293.163 35390.637 
     user    system   elapsed 
35249.192   294.998 35595.547 
     user    system   elapsed 
35454.734   296.914 35803.276 
    user   system  elapsed 
35657.66   298.44 36007.96 
     user    system   elapsed 
35864.795   300.404 36217.347 
     user    system   elapsed 
36068.586   302.141 36423.092 
     user    system   elapsed 
36270.972   303.948 36627.507 
     user    system   elapsed 
36473.180   305.892 36831.891 
     user    system   elapsed 
36673.835   307.657 37034.541 
     user    system   elapsed 
36873.889   309.279 37236.438 
     user    system   elapsed 
37072.084   311.036 37436.613 
     user    system   elapsed 
37274.854   312.841 37641.433 
     user    system   elapsed 
37480.753   314.706 37849.436 
     user    system   elapsed 
37687.593   316.515 38058.317 
    user   system  elapsed 
37888.98   318.30 38261.71 
     user    system   elapsed 
38099.381   320.454 38474.530 
     user    system   elapsed 
38300.669   322.229 38677.837 
     user    system   elapsed 
38503.696   323.889 38882.766 
    user   system  elapsed 
38708.76   325.59 39089.79 
    user   system  elapsed 
38913.46   327.35 39296.51 
     user    system   elapsed 
39121.530   329.008 39506.496 
     user    system   elapsed 
39325.037   330.869 39712.110 
     user    system   elapsed 
39527.610   332.832 39916.892 
     user    system   elapsed 
39730.056   334.678 40121.431 
     user    system   elapsed 
39934.855   336.521 40328.345 
    user   system  elapsed 
40141.89   338.52 40537.68 
     user    system   elapsed 
40343.229   340.229 40741.002 
     user    system   elapsed 
40555.623   342.257 40955.746 
     user    system   elapsed 
40769.690   344.021 41171.892 
     user    system   elapsed 
40978.461   345.894 41382.829 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
