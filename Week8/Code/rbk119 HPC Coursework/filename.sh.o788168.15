 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.561   0.030   0.592 
   user  system elapsed 
231.776   2.137 234.353 
   user  system elapsed 
462.309   4.221 467.409 
   user  system elapsed 
694.586   6.197 702.101 
   user  system elapsed 
924.231   8.149 934.175 
    user   system  elapsed 
1139.143   10.150 1151.483 
    user   system  elapsed 
1357.084   11.966 1371.596 
    user   system  elapsed 
1589.139   14.176 1606.301 
    user   system  elapsed 
1792.602   16.187 1812.057 
    user   system  elapsed 
2005.867   18.267 2027.723 
    user   system  elapsed 
2233.996   20.153 2258.166 
    user   system  elapsed 
2449.495   21.882 2475.735 
    user   system  elapsed 
2659.135   23.721 2687.543 
    user   system  elapsed 
2868.013   25.525 2898.571 
    user   system  elapsed 
3064.515   26.998 3096.817 
    user   system  elapsed 
3264.356   28.699 3298.655 
    user   system  elapsed 
3463.995   30.300 3500.178 
    user   system  elapsed 
3668.644   31.838 3706.704 
    user   system  elapsed 
3887.399   33.556 3927.536 
    user   system  elapsed 
4096.709   35.042 4138.611 
    user   system  elapsed 
4310.253   36.949 4354.339 
    user   system  elapsed 
4522.975   39.052 4569.448 
    user   system  elapsed 
4734.653   40.826 4783.180 
    user   system  elapsed 
4943.416   42.599 4993.975 
    user   system  elapsed 
5151.971   44.164 5204.350 
    user   system  elapsed 
5373.537   46.175 5428.195 
    user   system  elapsed 
5590.823   48.426 5647.999 
    user   system  elapsed 
5811.149   50.919 5871.107 
    user   system  elapsed 
6022.548   52.921 6084.750 
    user   system  elapsed 
6235.189   54.914 6299.661 
    user   system  elapsed 
6452.683   56.633 6519.113 
    user   system  elapsed 
6670.718   58.451 6739.204 
    user   system  elapsed 
6896.338   60.111 6966.739 
    user   system  elapsed 
7115.967   61.976 7188.484 
    user   system  elapsed 
7336.017   63.854 7410.665 
    user   system  elapsed 
7554.191   65.511 7630.723 
    user   system  elapsed 
7769.940   67.380 7848.576 
    user   system  elapsed 
7986.055   69.253 8066.796 
    user   system  elapsed 
8201.871   71.063 8284.660 
    user   system  elapsed 
8419.343   72.785 8504.089 
    user   system  elapsed 
8636.088   74.525 8722.807 
    user   system  elapsed 
8851.423   76.319 8940.173 
    user   system  elapsed 
9067.981   77.892 9158.541 
    user   system  elapsed 
9284.591   79.708 9377.212 
    user   system  elapsed 
9501.208   81.252 9595.617 
    user   system  elapsed 
9717.742   82.782 9813.922 
     user    system   elapsed 
 9934.197    84.452 10032.286 
     user    system   elapsed 
10150.699    85.982 10250.559 
     user    system   elapsed 
10366.647    87.521 10468.291 
     user    system   elapsed 
10578.417    89.054 10681.840 
     user    system   elapsed 
10797.078    90.707 10902.467 
     user    system   elapsed 
11015.484    92.473 11122.962 
    user   system  elapsed 
11240.31    94.22 11349.91 
     user    system   elapsed 
11487.662    96.183 11599.694 
     user    system   elapsed 
11753.712    98.285 11868.447 
     user    system   elapsed 
12028.702   100.469 12146.294 
     user    system   elapsed 
12295.680   102.628 12416.041 
     user    system   elapsed 
12573.364   104.891 12696.633 
     user    system   elapsed 
12852.969   107.228 12979.250 
     user    system   elapsed 
13125.387   109.467 13254.539 
     user    system   elapsed 
13398.673   111.787 13530.811 
     user    system   elapsed 
13675.242   114.068 13810.397 
     user    system   elapsed 
13946.851   116.482 14085.101 
     user    system   elapsed 
14220.916   118.618 14362.003 
     user    system   elapsed 
14491.651   120.686 14635.465 
     user    system   elapsed 
14761.110   122.989 14907.887 
     user    system   elapsed 
15032.367   124.803 15181.717 
     user    system   elapsed 
15303.376   126.848 15455.461 
     user    system   elapsed 
15575.098   128.719 15729.726 
     user    system   elapsed 
15845.904   130.582 16003.062 
     user    system   elapsed 
16121.583   132.567 16281.433 
     user    system   elapsed 
16390.714   134.616 16553.267 
     user    system   elapsed 
16659.251   136.674 16824.533 
     user    system   elapsed 
16940.163   138.753 17108.188 
     user    system   elapsed 
17217.241   140.212 17387.425 
     user    system   elapsed 
17484.485   141.933 17657.024 
     user    system   elapsed 
17752.076   143.824 17927.168 
     user    system   elapsed 
18021.466   145.687 18199.114 
     user    system   elapsed 
18274.682   147.584 18454.775 
     user    system   elapsed 
18540.228   149.438 18722.757 
     user    system   elapsed 
18809.407   151.327 18994.408 
     user    system   elapsed 
19058.267   153.301 19245.744 
     user    system   elapsed 
19324.760   155.306 19514.875 
     user    system   elapsed 
19606.403   157.481 19799.390 
     user    system   elapsed 
19888.352   159.242 20083.789 
     user    system   elapsed 
20157.947   161.166 20355.947 
     user    system   elapsed 
20428.420   163.277 20629.148 
     user    system   elapsed 
20698.777   165.176 20902.040 
     user    system   elapsed 
20970.546   167.141 21176.435 
     user    system   elapsed 
21239.957   169.241 21448.597 
     user    system   elapsed 
21520.571   171.346 21732.009 
     user    system   elapsed 
21796.797   173.363 22010.917 
     user    system   elapsed 
22082.640   175.405 22299.481 
     user    system   elapsed 
22362.773   177.338 22582.195 
     user    system   elapsed 
22632.202   179.413 22854.338 
     user    system   elapsed 
22900.332   181.043 23124.695 
     user    system   elapsed 
23129.411   182.811 23355.954 
     user    system   elapsed 
23364.915   184.791 23593.930 
     user    system   elapsed 
23595.539   186.498 23826.719 
     user    system   elapsed 
23816.796   188.195 24050.084 
     user    system   elapsed 
24036.655   189.755 24271.913 
     user    system   elapsed 
24254.706   191.514 24492.125 
     user    system   elapsed 
24480.267   193.328 24719.921 
     user    system   elapsed 
24693.304   195.021 24934.978 
     user    system   elapsed 
24893.271   196.586 25136.755 
     user    system   elapsed 
25106.394   198.176 25351.758 
     user    system   elapsed 
25317.470   199.802 25564.742 
     user    system   elapsed 
25527.884   201.209 25776.852 
     user    system   elapsed 
25740.028   202.915 25990.997 
     user    system   elapsed 
25945.054   204.389 26197.760 
     user    system   elapsed 
26144.094   205.975 26398.659 
     user    system   elapsed 
26345.040   207.558 26601.457 
     user    system   elapsed 
26557.994   209.147 26816.280 
     user    system   elapsed 
26759.707   210.758 27019.874 
     user    system   elapsed 
26960.801   212.389 27222.866 
     user    system   elapsed 
27161.541   213.993 27425.476 
     user    system   elapsed 
27368.643   215.654 27634.508 
     user    system   elapsed 
27572.788   217.241 27840.512 
     user    system   elapsed 
27784.760   218.816 28054.365 
     user    system   elapsed 
27986.926   220.453 28258.447 
     user    system   elapsed 
28193.124   222.055 28466.526 
     user    system   elapsed 
28394.446   223.662 28669.702 
     user    system   elapsed 
28596.928   225.312 28874.101 
     user    system   elapsed 
28803.132   226.936 29082.213 
     user    system   elapsed 
29012.632   228.668 29293.718 
     user    system   elapsed 
29212.314   230.356 29495.321 
     user    system   elapsed 
29411.133   231.928 29695.946 
     user    system   elapsed 
29620.403   233.557 29907.114 
     user    system   elapsed 
29826.666   235.017 30115.124 
     user    system   elapsed 
30033.026   236.654 30323.427 
     user    system   elapsed 
30234.317   238.217 30526.538 
     user    system   elapsed 
30441.791   239.675 30735.753 
    user   system  elapsed 
30649.76   241.28 30945.62 
     user    system   elapsed 
30853.523   242.823 31151.232 
     user    system   elapsed 
31057.100   244.484 31356.788 
     user    system   elapsed 
31258.283   246.123 31559.904 
     user    system   elapsed 
31459.776   247.861 31763.436 
     user    system   elapsed 
31661.008   249.431 31966.551 
     user    system   elapsed 
31865.604   250.905 32172.912 
     user    system   elapsed 
32073.946   252.726 32383.392 
     user    system   elapsed 
32274.606   254.477 32586.109 
     user    system   elapsed 
32478.502   256.252 32792.087 
     user    system   elapsed 
32678.260   257.771 32993.662 
    user   system  elapsed 
32880.53   259.20 33197.65 
     user    system   elapsed 
33089.719   260.577 33408.516 
     user    system   elapsed 
33304.120   262.239 33624.908 
     user    system   elapsed 
33514.216   263.756 33836.851 
     user    system   elapsed 
33721.833   265.547 34046.567 
     user    system   elapsed 
33930.484   267.005 34257.004 
     user    system   elapsed 
34138.518   268.873 34467.236 
     user    system   elapsed 
34348.323   270.391 34678.868 
     user    system   elapsed 
34555.503   271.783 34887.740 
     user    system   elapsed 
34761.451   273.539 35095.740 
     user    system   elapsed 
34966.749   274.976 35302.753 
     user    system   elapsed 
35171.943   276.619 35509.838 
    user   system  elapsed 
35382.90   278.22 35722.76 
     user    system   elapsed 
35589.863   279.598 35931.368 
     user    system   elapsed 
35796.046   281.191 36139.411 
     user    system   elapsed 
36001.642   282.877 36346.948 
     user    system   elapsed 
36208.441   284.401 36555.610 
     user    system   elapsed 
36420.446   285.974 36769.727 
    user   system  elapsed 
36629.22   287.39 36980.16 
     user    system   elapsed 
36839.514   289.051 37192.403 
     user    system   elapsed 
37048.730   290.495 37403.337 
     user    system   elapsed 
37258.589   292.285 37615.370 
     user    system   elapsed 
37465.754   293.851 37824.371 
     user    system   elapsed 
37675.238   295.451 38035.737 
     user    system   elapsed 
37885.790   297.263 38248.379 
     user    system   elapsed 
38098.492   299.156 38463.237 
    user   system  elapsed 
38309.78   301.04 38676.69 
     user    system   elapsed 
38527.892   302.788 38896.817 
     user    system   elapsed 
38748.229   304.542 39119.198 
     user    system   elapsed 
38965.958   306.424 39339.113 
     user    system   elapsed 
39178.745   308.103 39553.865 
     user    system   elapsed 
39391.694   309.662 39768.638 
     user    system   elapsed 
39599.737   311.333 39978.612 
     user    system   elapsed 
39808.994   312.829 40189.609 
     user    system   elapsed 
40014.733   314.396 40397.139 
     user    system   elapsed 
40220.567   315.961 40604.781 
     user    system   elapsed 
40428.561   317.662 40814.681 
     user    system   elapsed 
40637.050   319.347 41025.078 
     user    system   elapsed 
40839.290   321.123 41229.310 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
