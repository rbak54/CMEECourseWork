 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.733   0.069   0.805 
   user  system elapsed 
310.519   2.933 314.322 
   user  system elapsed 
608.803   5.327 615.828 
   user  system elapsed 
910.159   7.986 920.629 
    user   system  elapsed 
1210.521   10.953 1224.758 
    user   system  elapsed 
1519.839   13.667 1537.671 
    user   system  elapsed 
1823.627   16.700 1845.357 
    user   system  elapsed 
2121.525   19.300 2146.629 
    user   system  elapsed 
2417.733   22.333 2446.663 
    user   system  elapsed 
2714.341   24.753 2746.518 
    user   system  elapsed 
3017.454   27.490 3053.218 
    user   system  elapsed 
3323.596   30.096 3362.902 
    user   system  elapsed 
3622.936   32.460 3665.383 
    user   system  elapsed 
3925.771   35.120 3971.688 
    user   system  elapsed 
4222.592   37.499 4271.692 
    user   system  elapsed 
4525.309   39.469 4577.244 
    user   system  elapsed 
4824.956   41.791 4880.088 
    user   system  elapsed 
5125.144   44.056 5183.458 
    user   system  elapsed 
5421.622   46.294 5483.022 
    user   system  elapsed 
5718.938   48.596 5783.431 
    user   system  elapsed 
6014.678   51.089 6082.440 
    user   system  elapsed 
6318.450   53.541 6389.523 
    user   system  elapsed 
6622.650   55.928 6696.951 
    user   system  elapsed 
6925.276   58.457 7002.977 
    user   system  elapsed 
7208.086   60.715 7288.737 
    user   system  elapsed 
7455.800   62.752 7538.938 
    user   system  elapsed 
7703.986   64.559 7789.385 
    user   system  elapsed 
7959.517   66.697 8047.550 
    user   system  elapsed 
8197.025   68.703 8287.474 
    user   system  elapsed 
8431.881   70.552 8524.577 
    user   system  elapsed 
8699.006   72.836 8794.490 
    user   system  elapsed 
8978.864   74.928 9077.032 
    user   system  elapsed 
9255.687   76.837 9356.338 
    user   system  elapsed 
9541.916   79.008 9645.351 
    user   system  elapsed 
9820.765   81.372 9927.131 
     user    system   elapsed 
10096.062    83.459 10205.084 
     user    system   elapsed 
10377.469    85.846 10489.484 
    user   system  elapsed 
10658.30    88.04 10773.10 
     user    system   elapsed 
10941.725    90.396 11059.482 
    user   system  elapsed 
11217.15    92.37 11337.45 
     user    system   elapsed 
11496.992    94.131 11619.634 
     user    system   elapsed 
11781.281    96.212 11906.617 
     user    system   elapsed 
12069.725    98.019 12197.502 
     user    system   elapsed 
12348.654   100.261 12479.258 
     user    system   elapsed 
12634.738   102.382 12768.083 
     user    system   elapsed 
12920.603   104.623 13056.818 
     user    system   elapsed 
13201.062   106.798 13340.045 
     user    system   elapsed 
13475.909   108.542 13617.201 
    user   system  elapsed 
13756.14   110.56 13900.05 
     user    system   elapsed 
14022.468   112.756 14169.075 
     user    system   elapsed 
14306.612   115.032 14456.114 
     user    system   elapsed 
14580.936   117.189 14733.145 
     user    system   elapsed 
14852.612   119.399 15007.571 
     user    system   elapsed 
15122.537   121.318 15279.938 
     user    system   elapsed 
15395.483   123.486 15555.597 
    user   system  elapsed 
15673.54   125.74 15836.48 
     user    system   elapsed 
15945.258   128.144 16111.162 
     user    system   elapsed 
16220.238   130.639 16389.201 
     user    system   elapsed 
16500.101   133.065 16672.087 
     user    system   elapsed 
16766.832   135.474 16941.734 
     user    system   elapsed 
17041.673   138.028 17219.677 
     user    system   elapsed 
17312.027   140.199 17492.730 
     user    system   elapsed 
17590.150   142.339 17773.588 
    user   system  elapsed 
17869.74   144.45 18055.87 
     user    system   elapsed 
18156.345   146.383 18345.010 
     user    system   elapsed 
18442.635   148.366 18633.890 
     user    system   elapsed 
18720.890   150.427 18914.756 
     user    system   elapsed 
19005.336   152.271 19201.632 
     user    system   elapsed 
19283.118   154.355 19482.075 
    user   system  elapsed 
19558.97   156.21 19760.33 
     user    system   elapsed 
19833.453   157.543 20036.689 
     user    system   elapsed 
20110.202   159.551 20316.008 
     user    system   elapsed 
20391.288   161.422 20599.544 
     user    system   elapsed 
20669.296   163.545 20880.252 
     user    system   elapsed 
20941.788   165.336 21155.056 
     user    system   elapsed 
21198.456   167.392 21414.297 
     user    system   elapsed 
21436.404   169.217 21654.478 
     user    system   elapsed 
21678.735   170.914 21898.924 
     user    system   elapsed 
21919.455   172.714 22141.853 
    user   system  elapsed 
22165.93   174.62 22390.67 
    user   system  elapsed 
22410.81   176.72 22638.09 
     user    system   elapsed 
22662.929   179.029 22892.985 
     user    system   elapsed 
22913.287   181.436 23146.210 
     user    system   elapsed 
23163.364   183.594 23398.904 
     user    system   elapsed 
23411.575   185.892 23649.854 
     user    system   elapsed 
23667.432   188.227 23908.512 
     user    system   elapsed 
23930.484   190.433 24174.285 
     user    system   elapsed 
24184.096   192.739 24430.644 
     user    system   elapsed 
24442.277   194.996 24691.548 
    user   system  elapsed 
24702.87   197.39 24955.02 
     user    system   elapsed 
24964.676   199.825 25219.754 
     user    system   elapsed 
25228.213   202.303 25486.264 
     user    system   elapsed 
25490.006   204.624 25750.866 
     user    system   elapsed 
25750.651   206.813 26014.193 
     user    system   elapsed 
26005.206   208.981 26271.369 
     user    system   elapsed 
26257.940   211.361 26526.915 
     user    system   elapsed 
26514.811   213.762 26786.660 
     user    system   elapsed 
26777.451   216.167 27052.202 
     user    system   elapsed 
27034.790   218.547 27312.401 
     user    system   elapsed 
27292.329   220.903 27572.799 
     user    system   elapsed 
27544.590   223.223 27827.860 
     user    system   elapsed 
27782.207   225.301 28067.942 
     user    system   elapsed 
28035.650   227.472 28324.032 
    user   system  elapsed 
28276.92   229.43 28567.67 
     user    system   elapsed 
28528.659   231.699 28822.146 
     user    system   elapsed 
28776.126   233.989 29072.357 
     user    system   elapsed 
29023.675   236.308 29322.665 
     user    system   elapsed 
29267.266   238.671 29569.055 
     user    system   elapsed 
29512.580   240.911 29817.040 
     user    system   elapsed 
29777.053   243.311 30084.492 
     user    system   elapsed 
30049.871   245.488 30360.125 
     user    system   elapsed 
30320.690   248.068 30634.135 
     user    system   elapsed 
30588.733   250.371 30905.128 
     user    system   elapsed 
30848.920   252.568 31168.039 
    user   system  elapsed 
31119.97   254.92 31442.10 
    user   system  elapsed 
31388.23   257.29 31713.31 
     user    system   elapsed 
31656.945   259.721 31985.040 
     user    system   elapsed 
31927.225   261.915 32258.085 
     user    system   elapsed 
32190.205   264.139 32523.812 
     user    system   elapsed 
32453.854   266.486 32790.376 
     user    system   elapsed 
32719.736   268.812 33059.145 
     user    system   elapsed 
32982.630   271.374 33325.198 
     user    system   elapsed 
33248.955   273.452 33594.195 
     user    system   elapsed 
33513.191   276.006 33861.555 
     user    system   elapsed 
33779.323   278.134 34130.438 
     user    system   elapsed 
34048.578   280.707 34402.840 
     user    system   elapsed 
34316.686   282.962 34673.795 
     user    system   elapsed 
34580.790   285.612 34941.109 
     user    system   elapsed 
34843.381   288.091 35206.710 
     user    system   elapsed 
35109.649   290.347 35475.824 
     user    system   elapsed 
35375.491   292.557 35744.481 
     user    system   elapsed 
35636.657   294.785 36008.471 
     user    system   elapsed 
35899.019   297.151 36273.707 
     user    system   elapsed 
36150.950   299.669 36528.617 
     user    system   elapsed 
36392.132   301.575 36772.102 
     user    system   elapsed 
36622.503   303.522 37004.798 
     user    system   elapsed 
36853.950   305.622 37238.757 
     user    system   elapsed 
37096.435   307.966 37484.154 
     user    system   elapsed 
37342.221   310.198 37732.744 
     user    system   elapsed 
37576.314   312.493 37969.588 
     user    system   elapsed 
37815.520   314.725 38211.471 
     user    system   elapsed 
38065.371   316.928 38463.958 
     user    system   elapsed 
38321.992   319.437 38723.592 
     user    system   elapsed 
38572.598   321.878 38977.120 
     user    system   elapsed 
38827.236   324.132 39234.512 
     user    system   elapsed 
39082.426   326.349 39492.444 
     user    system   elapsed 
39341.467   328.771 39754.456 
     user    system   elapsed 
39590.897   330.946 40006.537 
     user    system   elapsed 
39849.626   333.403 40268.248 
    user   system  elapsed 
40109.86   335.52 40531.11 
     user    system   elapsed 
40364.852   337.936 40789.065 
     user    system   elapsed 
40630.785   340.432 41058.123 
     user    system   elapsed 
40901.534   342.823 41331.888 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
