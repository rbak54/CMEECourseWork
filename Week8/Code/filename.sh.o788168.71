 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.679   0.079   0.759 
   user  system elapsed 
266.925   2.803 270.403 
   user  system elapsed 
527.926   5.143 534.349 
   user  system elapsed 
791.561   7.492 800.936 
    user   system  elapsed 
1065.249   10.000 1077.868 
    user   system  elapsed 
1339.064   12.790 1355.220 
    user   system  elapsed 
1605.994   15.559 1625.566 
    user   system  elapsed 
1835.387   18.104 1857.964 
    user   system  elapsed 
2075.971   21.047 2102.059 
    user   system  elapsed 
2342.909   23.955 2372.694 
    user   system  elapsed 
2590.352   26.076 2622.749 
    user   system  elapsed 
2853.109   28.202 2888.317 
    user   system  elapsed 
3119.095   30.339 3157.081 
    user   system  elapsed 
3393.905   32.743 3434.957 
    user   system  elapsed 
3667.590   35.037 3711.606 
    user   system  elapsed 
3943.128   37.297 3990.069 
    user   system  elapsed 
4222.968   39.433 4272.756 
    user   system  elapsed 
4495.590   42.102 4548.663 
    user   system  elapsed 
4768.477   44.331 4824.359 
    user   system  elapsed 
5042.658   46.561 5101.365 
    user   system  elapsed 
5306.378   48.857 5367.931 
    user   system  elapsed 
5566.932   51.404 5631.554 
    user   system  elapsed 
5826.710   53.489 5893.933 
    user   system  elapsed 
6082.369   55.757 6152.337 
    user   system  elapsed 
6335.299   57.854 6407.846 
    user   system  elapsed 
6589.677   60.342 6665.197 
    user   system  elapsed 
6839.269   62.357 6917.259 
    user   system  elapsed 
7090.173   64.571 7170.809 
    user   system  elapsed 
7341.100   66.776 7424.365 
    user   system  elapsed 
7591.197   69.225 7677.332 
    user   system  elapsed 
7850.564   71.881 7939.826 
    user   system  elapsed 
8112.445   73.957 8204.237 
    user   system  elapsed 
8374.708   76.545 8469.600 
    user   system  elapsed 
8642.816   78.803 8740.520 
    user   system  elapsed 
8909.386   81.088 9009.889 
    user   system  elapsed 
9181.336   83.304 9284.605 
    user   system  elapsed 
9455.074   85.712 9561.349 
    user   system  elapsed 
9741.544   88.082 9850.836 
     user    system   elapsed 
10026.697    90.163 10138.694 
     user    system   elapsed 
10311.258    92.603 10426.325 
     user    system   elapsed 
10601.216    94.595 10718.931 
     user    system   elapsed 
10880.196    96.909 11000.834 
     user    system   elapsed 
11160.757    99.176 11284.254 
     user    system   elapsed 
11449.238   101.542 11575.755 
    user   system  elapsed 
11742.21   103.98 11871.87 
    user   system  elapsed 
12029.39   106.20 12162.00 
    user   system  elapsed 
12321.94   108.36 12457.47 
     user    system   elapsed 
12614.796   110.409 12753.094 
     user    system   elapsed 
12904.551   112.589 13045.755 
     user    system   elapsed 
13186.603   114.791 13330.682 
     user    system   elapsed 
13469.937   117.228 13617.122 
     user    system   elapsed 
13751.483   119.451 13901.572 
    user   system  elapsed 
14039.83   121.79 14193.02 
    user   system  elapsed 
14321.39   124.04 14477.47 
     user    system   elapsed 
14608.094   126.708 14767.550 
     user    system   elapsed 
14900.592   128.957 15063.025 
     user    system   elapsed 
15190.953   131.424 15356.608 
     user    system   elapsed 
15480.444   134.169 15649.570 
     user    system   elapsed 
15759.860   136.437 15931.912 
    user   system  elapsed 
16044.68   139.17 16220.21 
     user    system   elapsed 
16332.823   141.715 16511.591 
     user    system   elapsed 
16628.219   144.485 16810.516 
     user    system   elapsed 
16921.037   147.142 17106.697 
     user    system   elapsed 
17213.259   149.563 17402.006 
     user    system   elapsed 
17509.236   152.188 17701.245 
     user    system   elapsed 
17801.149   154.502 17996.130 
     user    system   elapsed 
18085.039   156.613 18282.723 
     user    system   elapsed 
18369.078   158.592 18569.332 
     user    system   elapsed 
18651.888   160.797 18854.909 
     user    system   elapsed 
18939.196   162.934 19145.032 
     user    system   elapsed 
19226.935   164.974 19435.419 
     user    system   elapsed 
19511.924   167.251 19723.277 
    user   system  elapsed 
19809.41   169.55 20023.70 
     user    system   elapsed 
20105.018   171.762 20322.167 
    user   system  elapsed 
20389.06   173.61 20608.67 
     user    system   elapsed 
20675.198   175.735 20897.508 
     user    system   elapsed 
20960.980   177.866 21186.018 
     user    system   elapsed 
21252.431   179.845 21480.073 
     user    system   elapsed 
21541.169   182.133 21771.711 
     user    system   elapsed 
21823.497   184.578 22057.044 
     user    system   elapsed 
22102.317   186.992 22338.838 
     user    system   elapsed 
22385.949   189.471 22625.551 
     user    system   elapsed 
22653.544   192.007 22896.179 
    user   system  elapsed 
22896.36   194.85 23142.23 
     user    system   elapsed 
23163.907   197.107 23412.568 
     user    system   elapsed 
23429.994   199.383 23681.466 
     user    system   elapsed 
23684.722   201.822 23939.092 
     user    system   elapsed 
23943.632   203.806 24200.467 
     user    system   elapsed 
24202.553   206.066 24462.128 
     user    system   elapsed 
24468.079   208.601 24730.714 
     user    system   elapsed 
24733.521   211.026 24999.099 
    user   system  elapsed 
24998.97   213.62 25267.65 
     user    system   elapsed 
25253.166   216.107 25524.789 
     user    system   elapsed 
25504.642   218.361 25778.928 
     user    system   elapsed 
25765.935   220.372 26042.696 
     user    system   elapsed 
26017.472   222.432 26296.707 
     user    system   elapsed 
26262.711   224.813 26544.735 
    user   system  elapsed 
26524.93   227.22 26809.82 
     user    system   elapsed 
26773.911   229.545 27061.522 
     user    system   elapsed 
27024.368   232.003 27314.832 
     user    system   elapsed 
27279.411   234.256 27572.555 
    user   system  elapsed 
27532.63   236.42 27828.36 
     user    system   elapsed 
27785.645   238.645 28084.028 
     user    system   elapsed 
28040.524   241.069 28341.769 
     user    system   elapsed 
28307.167   243.689 28611.511 
     user    system   elapsed 
28561.188   245.607 28867.857 
     user    system   elapsed 
28807.527   247.998 29116.967 
     user    system   elapsed 
29055.140   250.138 29367.100 
     user    system   elapsed 
29309.798   252.251 29624.294 
     user    system   elapsed 
29562.317   254.141 29879.107 
     user    system   elapsed 
29819.358   256.369 30138.807 
    user   system  elapsed 
30072.97   258.34 30394.81 
     user    system   elapsed 
30331.087   260.635 30655.673 
     user    system   elapsed 
30592.631   263.103 30920.160 
     user    system   elapsed 
30853.893   265.425 31184.215 
     user    system   elapsed 
31113.657   268.094 31447.151 
     user    system   elapsed 
31374.783   270.882 31711.550 
     user    system   elapsed 
31636.700   273.325 31976.394 
     user    system   elapsed 
31895.973   275.615 32238.415 
     user    system   elapsed 
32152.978   278.085 32498.412 
     user    system   elapsed 
32406.916   280.374 32755.101 
     user    system   elapsed 
32660.430   282.612 33011.282 
     user    system   elapsed 
32912.966   285.122 33266.772 
     user    system   elapsed 
33159.003   287.411 33515.507 
     user    system   elapsed 
33409.146   289.687 33768.387 
     user    system   elapsed 
33656.587   292.088 34018.665 
     user    system   elapsed 
33911.107   294.223 34275.780 
     user    system   elapsed 
34165.234   296.648 34532.812 
    user   system  elapsed 
34426.94   299.02 34797.40 
     user    system   elapsed 
34690.721   301.812 35064.484 
     user    system   elapsed 
34942.895   304.243 35319.539 
     user    system   elapsed 
35199.030   306.378 35578.281 
     user    system   elapsed 
35453.103   308.776 35835.212 
     user    system   elapsed 
35710.278   311.523 36095.635 
     user    system   elapsed 
35960.226   313.642 36348.150 
     user    system   elapsed 
36225.497   316.133 36616.515 
     user    system   elapsed 
36485.921   318.724 36880.035 
     user    system   elapsed 
36752.857   321.192 37149.976 
     user    system   elapsed 
37017.811   323.769 37418.026 
     user    system   elapsed 
37271.948   326.077 37674.958 
     user    system   elapsed 
37527.178   328.372 37933.032 
     user    system   elapsed 
37775.710   330.715 38184.406 
     user    system   elapsed 
38030.116   333.178 38441.785 
     user    system   elapsed 
38278.681   335.374 38692.999 
     user    system   elapsed 
38522.958   337.687 38940.041 
     user    system   elapsed 
38759.223   339.812 39178.832 
     user    system   elapsed 
39009.187   342.043 39431.548 
     user    system   elapsed 
39249.758   344.526 39675.038 
     user    system   elapsed 
39494.652   346.879 39922.747 
     user    system   elapsed 
39746.814   349.365 40177.911 
     user    system   elapsed 
39987.028   351.649 40420.837 
     user    system   elapsed 
40242.952   354.395 40680.045 
    user   system  elapsed 
40493.21   356.63 40933.03 
     user    system   elapsed 
40744.761   359.143 41187.557 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.97 (ave)

============================================
