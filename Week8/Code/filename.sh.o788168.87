 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.666   0.034   0.702 
   user  system elapsed 
288.699   2.743 292.716 
   user  system elapsed 
576.989   5.261 584.608 
   user  system elapsed 
856.694   7.869 867.870 
    user   system  elapsed 
1139.121   10.508 1153.878 
    user   system  elapsed 
1421.061   13.265 1439.444 
    user   system  elapsed 
1708.932   16.275 1731.120 
    user   system  elapsed 
1963.274   19.245 1989.024 
    user   system  elapsed 
2231.289   22.089 2260.922 
    user   system  elapsed 
2496.859   24.699 2529.758 
    user   system  elapsed 
2762.571   26.911 2798.305 
    user   system  elapsed 
3021.642   28.980 3060.034 
    user   system  elapsed 
3278.123   31.193 3319.266 
    user   system  elapsed 
3540.110   33.458 3584.121 
    user   system  elapsed 
3800.235   35.617 3847.012 
    user   system  elapsed 
4068.311   38.138 4118.292 
    user   system  elapsed 
4334.145   40.181 4386.802 
    user   system  elapsed 
4602.638   42.341 4658.146 
    user   system  elapsed 
4864.480   44.483 4922.718 
    user   system  elapsed 
5122.571   46.621 5183.542 
    user   system  elapsed 
5385.256   49.333 5449.527 
    user   system  elapsed 
5645.669   52.107 5713.308 
    user   system  elapsed 
5907.555   54.410 5978.079 
    user   system  elapsed 
6167.690   56.957 6241.330 
    user   system  elapsed 
6426.397   59.037 6502.762 
    user   system  elapsed 
6680.143   61.163 6759.221 
    user   system  elapsed 
6941.740   63.307 7023.571 
    user   system  elapsed 
7184.984   65.547 7269.640 
    user   system  elapsed 
7415.108   67.791 7502.441 
    user   system  elapsed 
7652.381   69.664 7742.043 
    user   system  elapsed 
7882.426   71.719 7974.534 
    user   system  elapsed 
8114.407   73.658 8208.862 
    user   system  elapsed 
8322.828   75.435 8419.317 
    user   system  elapsed 
8531.151   76.965 8629.424 
    user   system  elapsed 
8739.379   79.060 8839.997 
    user   system  elapsed 
8947.118   80.902 9049.826 
    user   system  elapsed 
9154.441   82.787 9259.269 
    user   system  elapsed 
9370.873   84.761 9477.978 
    user   system  elapsed 
9579.561   86.620 9688.785 
    user   system  elapsed 
9789.550   88.443 9900.847 
     user    system   elapsed 
10001.414    90.327 10114.859 
    user   system  elapsed 
10207.39    92.26 10323.02 
     user    system   elapsed 
10412.753    93.965 10530.316 
     user    system   elapsed 
10621.524    95.996 10741.320 
     user    system   elapsed 
10830.629    97.937 10952.559 
     user    system   elapsed 
11036.662    99.804 11160.669 
     user    system   elapsed 
11243.628   101.562 11369.617 
     user    system   elapsed 
11450.832   103.383 11578.853 
     user    system   elapsed 
11661.804   105.198 11791.895 
     user    system   elapsed 
11876.281   106.976 12008.444 
     user    system   elapsed 
12087.671   108.943 12222.110 
     user    system   elapsed 
12300.388   110.686 12436.857 
     user    system   elapsed 
12515.270   112.626 12654.002 
     user    system   elapsed 
12723.711   114.302 12864.395 
     user    system   elapsed 
12938.384   116.476 13081.567 
     user    system   elapsed 
13147.569   118.142 13292.739 
    user   system  elapsed 
13356.90   119.88 13504.10 
     user    system   elapsed 
13567.101   121.827 13716.545 
     user    system   elapsed 
13775.551   123.802 13927.258 
     user    system   elapsed 
13987.396   125.918 14141.503 
     user    system   elapsed 
14200.194   127.983 14356.670 
     user    system   elapsed 
14413.544   130.384 14572.729 
     user    system   elapsed 
14623.901   132.329 14785.320 
     user    system   elapsed 
14840.538   133.965 15003.934 
     user    system   elapsed 
15054.813   136.038 15220.609 
     user    system   elapsed 
15267.846   137.774 15435.706 
     user    system   elapsed 
15480.342   139.589 15650.332 
     user    system   elapsed 
15694.100   141.392 15866.198 
     user    system   elapsed 
15906.134   143.115 16080.247 
     user    system   elapsed 
16118.491   144.707 16294.508 
     user    system   elapsed 
16325.631   146.271 16503.463 
     user    system   elapsed 
16538.196   148.213 16718.259 
     user    system   elapsed 
16753.417   149.971 16935.552 
     user    system   elapsed 
16969.681   151.587 17153.733 
     user    system   elapsed 
17187.595   153.145 17373.527 
     user    system   elapsed 
17396.353   155.143 17584.544 
     user    system   elapsed 
17603.429   156.771 17793.498 
     user    system   elapsed 
17817.522   158.607 18009.723 
     user    system   elapsed 
18026.245   160.233 18220.343 
     user    system   elapsed 
18239.982   162.472 18436.616 
     user    system   elapsed 
18455.138   164.383 18653.995 
     user    system   elapsed 
18668.862   164.516 18868.132 
     user    system   elapsed 
18880.651   164.577 19080.245 
     user    system   elapsed 
19094.547   164.666 19294.508 
     user    system   elapsed 
19304.001   164.746 19504.296 
     user    system   elapsed 
19529.881   164.822 19730.561 
     user    system   elapsed 
19745.009   164.898 19946.043 
     user    system   elapsed 
19960.266   164.977 20161.662 
     user    system   elapsed 
20173.477   165.053 20375.208 
     user    system   elapsed 
20392.722   165.229 20594.921 
     user    system   elapsed 
20605.710   165.279 20808.227 
     user    system   elapsed 
20821.446   165.372 21024.343 
     user    system   elapsed 
21038.215   165.506 21241.543 
     user    system   elapsed 
21251.667   165.569 21455.323 
     user    system   elapsed 
21466.002   165.692 21670.046 
     user    system   elapsed 
21678.180   165.792 21882.585 
     user    system   elapsed 
21895.664   165.862 22100.427 
     user    system   elapsed 
22113.131   165.928 22318.235 
     user    system   elapsed 
22326.343   166.002 22531.793 
     user    system   elapsed 
22541.572   166.078 22747.384 
     user    system   elapsed 
22759.493   166.162 22965.671 
    user   system  elapsed 
22974.69   166.22 23181.19 
     user    system   elapsed 
23183.193   166.307 23390.015 
     user    system   elapsed 
23388.534   166.376 23595.641 
     user    system   elapsed 
23602.157   166.485 23809.641 
     user    system   elapsed 
23813.368   166.542 24021.166 
     user    system   elapsed 
24029.174   166.621 24237.320 
     user    system   elapsed 
24244.141   166.797 24452.733 
     user    system   elapsed 
24457.682   166.852 24666.588 
     user    system   elapsed 
24676.211   166.925 24885.483 
    user   system  elapsed 
24891.93   167.03 25101.60 
     user    system   elapsed 
25107.735   167.088 25317.733 
     user    system   elapsed 
25319.018   167.248 25529.433 
     user    system   elapsed 
25525.355   167.332 25736.095 
     user    system   elapsed 
25733.880   167.374 25944.908 
     user    system   elapsed 
25950.731   167.536 26162.203 
     user    system   elapsed 
26165.878   167.618 26377.718 
     user    system   elapsed 
26388.255   167.697 26600.494 
    user   system  elapsed 
26597.24   167.77 26809.81 
     user    system   elapsed 
26808.959   167.854 27021.871 
     user    system   elapsed 
27024.501   167.917 27237.765 
     user    system   elapsed 
27237.964   167.991 27451.567 
     user    system   elapsed 
27450.542   168.056 27664.485 
     user    system   elapsed 
27662.991   168.129 27877.278 
     user    system   elapsed 
27875.229   168.184 28089.842 
     user    system   elapsed 
28093.925   168.337 28308.973 
    user   system  elapsed 
28312.37   168.53 28527.92 
     user    system   elapsed 
28533.413   168.609 28749.365 
     user    system   elapsed 
28747.233   168.686 28963.547 
     user    system   elapsed 
28964.793   168.755 29181.478 
     user    system   elapsed 
29181.882   168.858 29398.970 
     user    system   elapsed 
29404.482   168.951 29621.986 
     user    system   elapsed 
29621.622   169.012 29839.489 
     user    system   elapsed 
29842.516   169.189 30060.862 
     user    system   elapsed 
30070.417   169.288 30289.211 
     user    system   elapsed 
30296.295   169.376 30515.512 
     user    system   elapsed 
30522.034   169.481 30741.694 
     user    system   elapsed 
30747.625   169.563 30967.709 
     user    system   elapsed 
30967.561   169.632 31188.032 
     user    system   elapsed 
31190.800   169.866 31411.835 
     user    system   elapsed 
31416.523   169.948 31637.982 
     user    system   elapsed 
31645.855   170.033 31867.733 
     user    system   elapsed 
31866.935   170.126 32089.202 
     user    system   elapsed 
32089.715   170.256 32312.448 
     user    system   elapsed 
32317.133   170.342 32540.272 
    user   system  elapsed 
32541.91   170.47 32765.51 
     user    system   elapsed 
32764.196   170.521 32988.178 
     user    system   elapsed 
32989.354   170.619 33213.743 
    user   system  elapsed 
33203.57   170.72 33428.33 
     user    system   elapsed 
33427.939   170.836 33653.127 
     user    system   elapsed 
33646.869   171.063 33872.578 
     user    system   elapsed 
33857.982   171.141 34084.034 
     user    system   elapsed 
34069.176   171.338 34295.764 
     user    system   elapsed 
34281.513   171.446 34508.516 
     user    system   elapsed 
34487.185   171.548 34714.553 
     user    system   elapsed 
34690.661   171.675 34918.417 
     user    system   elapsed 
34889.218   171.734 35117.209 
     user    system   elapsed 
35095.771   171.961 35324.864 
     user    system   elapsed 
35303.033   172.058 35532.492 
     user    system   elapsed 
35502.020   172.107 35731.702 
     user    system   elapsed 
35701.303   172.185 35931.220 
    user   system  elapsed 
35907.12   172.28 36137.39 
     user    system   elapsed 
36108.215   172.373 36338.807 
     user    system   elapsed 
36304.011   172.439 36534.832 
     user    system   elapsed 
36500.258   172.496 36731.301 
     user    system   elapsed 
36702.260   172.561 36933.560 
     user    system   elapsed 
36897.623   172.637 37129.148 
     user    system   elapsed 
37092.747   172.696 37324.483 
     user    system   elapsed 
37290.212   172.769 37522.202 
     user    system   elapsed 
37494.395   172.854 37726.709 
     user    system   elapsed 
37692.986   172.912 37925.531 
     user    system   elapsed 
37889.147   172.953 38121.873 
    user   system  elapsed 
38085.78   173.01 38318.71 
     user    system   elapsed 
38281.241   173.086 38514.405 
     user    system   elapsed 
38476.651   173.147 38710.022 
    user   system  elapsed 
38673.92   173.22 38907.54 
     user    system   elapsed 
38868.928   173.268 39102.747 
     user    system   elapsed 
39064.422   173.333 39298.464 
    user   system  elapsed 
39263.89   173.39 39498.18 
    user   system  elapsed 
39465.81   173.46 39700.39 
     user    system   elapsed 
39670.857   173.572 39905.795 
     user    system   elapsed 
39872.178   173.651 40107.408 
    user   system  elapsed 
40065.52   173.70 40300.94 
     user    system   elapsed 
40260.504   173.814 40496.247 
     user    system   elapsed 
40454.443   173.862 40690.370 
    user   system  elapsed 
40647.51   173.92 40883.64 
     user    system   elapsed 
40848.874   173.996 41085.297 
     user    system   elapsed 
41043.529   174.072 41280.197 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
