 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.619   0.031   0.651 
   user  system elapsed 
277.312   2.484 280.462 
   user  system elapsed 
550.503   4.811 556.622 
   user  system elapsed 
830.396   7.046 839.467 
    user   system  elapsed 
1099.905    9.461 1112.042 
    user   system  elapsed 
1361.071   11.804 1376.055 
    user   system  elapsed 
1646.726   14.560 1665.127 
    user   system  elapsed 
1891.636   17.213 1913.208 
    user   system  elapsed 
2136.562   19.870 2161.374 
    user   system  elapsed 
2418.408   22.643 2446.811 
    user   system  elapsed 
2697.879   25.202 2729.517 
    user   system  elapsed 
2972.790   27.506 3007.459 
    user   system  elapsed 
3255.317   29.595 3292.939 
    user   system  elapsed 
3529.047   31.868 3569.611 
    user   system  elapsed 
3806.596   33.899 3849.936 
    user   system  elapsed 
4091.124   35.911 4137.347 
    user   system  elapsed 
4365.655   37.865 4414.570 
    user   system  elapsed 
4652.149   40.115 4704.032 
    user   system  elapsed 
4937.149   42.063 4991.726 
    user   system  elapsed 
5229.678   44.045 5287.023 
    user   system  elapsed 
5509.179   46.371 5569.633 
    user   system  elapsed 
5780.654   48.865 5844.247 
    user   system  elapsed 
6046.387   50.646 6112.300 
    user   system  elapsed 
6320.247   52.742 6388.866 
    user   system  elapsed 
6586.891   54.609 6657.928 
    user   system  elapsed 
6854.171   56.639 6927.840 
    user   system  elapsed 
7121.669   58.559 7197.819 
    user   system  elapsed 
7390.671   60.940 7469.802 
    user   system  elapsed 
7648.335   63.226 7730.288 
    user   system  elapsed 
7896.275   65.519 7981.004 
    user   system  elapsed 
8135.019   67.556 8222.208 
    user   system  elapsed 
8385.330   69.468 8474.908 
    user   system  elapsed 
8637.734   71.450 8729.779 
    user   system  elapsed 
8887.310   73.481 8981.861 
    user   system  elapsed 
9132.165   75.309 9228.989 
    user   system  elapsed 
9381.466   77.372 9480.827 
    user   system  elapsed 
9647.392   79.244 9749.187 
     user    system   elapsed 
 9896.891    81.391 10001.339 
     user    system   elapsed 
10149.203    83.397 10256.158 
     user    system   elapsed 
10399.661    85.276 10508.969 
     user    system   elapsed 
10644.563    87.195 10756.249 
     user    system   elapsed 
10901.821    89.206 11016.005 
     user    system   elapsed 
11145.779    91.106 11262.290 
     user    system   elapsed 
11393.104    93.281 11512.249 
    user   system  elapsed 
11666.85    95.41 11788.72 
     user    system   elapsed 
11944.507    97.343 12068.921 
     user    system   elapsed 
12221.139    99.441 12348.248 
     user    system   elapsed 
12500.843   101.578 12630.719 
     user    system   elapsed 
12780.957   103.513 12913.402 
     user    system   elapsed 
13067.235   105.587 13202.422 
     user    system   elapsed 
13348.324   107.919 13486.477 
     user    system   elapsed 
13636.835   109.841 13777.550 
     user    system   elapsed 
13921.857   111.731 14065.133 
     user    system   elapsed 
14202.604   114.072 14348.861 
     user    system   elapsed 
14478.567   116.299 14627.669 
     user    system   elapsed 
14761.408   118.352 14913.198 
     user    system   elapsed 
15047.216   120.252 15201.543 
     user    system   elapsed 
15332.344   122.383 15489.464 
     user    system   elapsed 
15607.324   124.804 15767.457 
     user    system   elapsed 
15886.650   127.076 16049.694 
     user    system   elapsed 
16166.142   129.537 16332.312 
     user    system   elapsed 
16454.330   131.666 16623.316 
     user    system   elapsed 
16744.154   133.723 16915.879 
     user    system   elapsed 
17027.344   135.832 17201.848 
     user    system   elapsed 
17313.271   137.685 17490.289 
     user    system   elapsed 
17598.495   139.725 17778.200 
     user    system   elapsed 
17889.520   141.638 18071.846 
    user   system  elapsed 
18177.91   143.68 18362.97 
     user    system   elapsed 
18458.194   145.518 18645.714 
     user    system   elapsed 
18745.732   147.481 18935.903 
     user    system   elapsed 
19031.546   149.638 19224.555 
     user    system   elapsed 
19314.849   152.113 19511.013 
     user    system   elapsed 
19597.875   153.996 19796.590 
     user    system   elapsed 
19879.371   155.658 20080.404 
     user    system   elapsed 
20159.725   157.487 20363.254 
     user    system   elapsed 
20445.117   159.105 20650.939 
     user    system   elapsed 
20723.173   160.976 20931.515 
     user    system   elapsed 
21003.280   162.916 21214.198 
     user    system   elapsed 
21310.159   164.971 21523.982 
     user    system   elapsed 
21612.000   167.316 21829.008 
    user   system  elapsed 
21918.88   169.78 22139.20 
     user    system   elapsed 
22232.761   171.958 22456.186 
     user    system   elapsed 
22543.954   174.303 22770.574 
     user    system   elapsed 
22825.181   176.608 23054.763 
     user    system   elapsed 
23110.582   178.687 23342.888 
     user    system   elapsed 
23399.285   180.631 23634.185 
     user    system   elapsed 
23693.175   182.758 23930.847 
     user    system   elapsed 
23998.543   184.911 24239.021 
     user    system   elapsed 
24298.474   186.646 24541.381 
     user    system   elapsed 
24588.839   188.672 24834.406 
     user    system   elapsed 
24881.410   190.632 25129.538 
     user    system   elapsed 
25170.014   192.609 25420.736 
     user    system   elapsed 
25458.937   194.398 25712.065 
     user    system   elapsed 
25761.393   196.368 26017.192 
     user    system   elapsed 
26056.271   198.334 26314.685 
     user    system   elapsed 
26340.422   200.459 26601.593 
     user    system   elapsed 
26624.793   202.445 26888.589 
     user    system   elapsed 
26921.110   204.554 27187.619 
     user    system   elapsed 
27210.730   206.571 27479.842 
     user    system   elapsed 
27493.264   208.895 27765.253 
     user    system   elapsed 
27782.040   211.045 28056.806 
     user    system   elapsed 
28067.759   213.191 28345.265 
     user    system   elapsed 
28356.193   215.338 28636.471 
     user    system   elapsed 
28640.628   217.519 28923.640 
     user    system   elapsed 
28924.763   219.818 29210.661 
     user    system   elapsed 
29213.317   221.988 29501.991 
     user    system   elapsed 
29500.569   224.405 29792.242 
     user    system   elapsed 
29787.054   226.529 30081.429 
     user    system   elapsed 
30080.286   228.788 30377.545 
     user    system   elapsed 
30366.102   230.767 30665.911 
     user    system   elapsed 
30648.435   233.086 30951.103 
     user    system   elapsed 
30927.183   235.235 31232.560 
     user    system   elapsed 
31212.181   237.484 31520.360 
     user    system   elapsed 
31498.254   239.978 31809.524 
     user    system   elapsed 
31785.767   242.184 32099.841 
     user    system   elapsed 
32068.718   244.304 32385.484 
     user    system   elapsed 
32360.709   246.594 32680.421 
     user    system   elapsed 
32644.389   248.949 32967.025 
     user    system   elapsed 
32932.699   251.179 33258.166 
     user    system   elapsed 
33215.165   253.289 33543.357 
     user    system   elapsed 
33496.053   255.516 33827.028 
     user    system   elapsed 
33781.479   257.564 34115.083 
    user   system  elapsed 
34071.09   259.90 34407.64 
     user    system   elapsed 
34357.347   262.104 34696.676 
     user    system   elapsed 
34646.457   264.169 34988.458 
     user    system   elapsed 
34931.639   266.322 35276.377 
     user    system   elapsed 
35217.689   268.611 35565.324 
     user    system   elapsed 
35501.701   270.711 35851.990 
    user   system  elapsed 
35787.49   272.98 36140.62 
     user    system   elapsed 
36081.154   275.545 36437.486 
     user    system   elapsed 
36364.453   277.794 36723.613 
     user    system   elapsed 
36651.624   280.019 37013.619 
     user    system   elapsed 
36945.389   282.217 37310.221 
     user    system   elapsed 
37237.802   284.408 37605.442 
     user    system   elapsed 
37534.829   286.545 37905.217 
     user    system   elapsed 
37842.033   288.847 38215.410 
     user    system   elapsed 
38130.168   291.245 38506.577 
     user    system   elapsed 
38413.170   293.306 38792.252 
     user    system   elapsed 
38697.491   295.539 39079.424 
     user    system   elapsed 
38977.854   297.546 39362.375 
     user    system   elapsed 
39267.599   299.844 39655.107 
     user    system   elapsed 
39550.265   302.005 39940.515 
     user    system   elapsed 
39832.791   304.478 40226.092 
     user    system   elapsed 
40117.080   306.536 40513.045 
     user    system   elapsed 
40401.024   308.791 40799.875 
     user    system   elapsed 
40683.178   310.886 41084.713 
     user    system   elapsed 
40967.796   312.983 41372.027 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
