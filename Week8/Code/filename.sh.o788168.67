 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.605   0.043   0.652 
   user  system elapsed 
279.873   3.031 283.973 
   user  system elapsed 
563.949   5.487 572.017 
   user  system elapsed 
839.656   7.947 851.144 
    user   system  elapsed 
1113.914   10.628 1129.006 
    user   system  elapsed 
1390.834   13.271 1409.582 
    user   system  elapsed 
1669.183   16.030 1691.738 
    user   system  elapsed 
1919.692   18.675 1945.591 
    user   system  elapsed 
2182.919   21.889 2213.129 
    user   system  elapsed 
2463.089   24.666 2497.139 
    user   system  elapsed 
2737.751   26.812 2774.950 
    user   system  elapsed 
3014.766   28.877 3055.069 
    user   system  elapsed 
3290.540   31.185 3334.208 
    user   system  elapsed 
3567.786   33.497 3614.844 
    user   system  elapsed 
3845.061   35.627 3895.314 
    user   system  elapsed 
4122.173   38.028 4175.937 
    user   system  elapsed 
4404.943   40.473 4462.342 
    user   system  elapsed 
4676.178   42.852 4736.916 
    user   system  elapsed 
4948.939   45.096 5012.874 
    user   system  elapsed 
5213.720   47.275 5280.577 
    user   system  elapsed 
5488.595   49.704 5558.608 
    user   system  elapsed 
5763.441   52.129 5836.606 
    user   system  elapsed 
6037.835   54.262 6113.902 
    user   system  elapsed 
6310.273   56.746 6389.575 
    user   system  elapsed 
6582.218   58.813 6664.282 
    user   system  elapsed 
6853.564   60.930 6938.481 
    user   system  elapsed 
7128.006   62.996 7215.696 
    user   system  elapsed 
7389.552   65.351 7480.204 
    user   system  elapsed 
7638.419   67.586 7731.847 
    user   system  elapsed 
7879.309   69.500 7975.117 
    user   system  elapsed 
8079.305   71.417 8177.233 
    user   system  elapsed 
8278.455   73.296 8378.468 
    user   system  elapsed 
8476.616   75.186 8578.714 
    user   system  elapsed 
8673.105   77.116 8777.346 
    user   system  elapsed 
8868.982   78.947 8975.260 
    user   system  elapsed 
9068.540   80.916 9176.997 
    user   system  elapsed 
9266.771   82.602 9377.113 
    user   system  elapsed 
9464.711   84.629 9577.284 
    user   system  elapsed 
9662.239   86.506 9776.865 
    user   system  elapsed 
9870.463   88.351 9987.217 
     user    system   elapsed 
10092.603    90.163 10211.560 
     user    system   elapsed 
10319.499    92.037 10440.732 
     user    system   elapsed 
10540.645    94.251 10664.473 
     user    system   elapsed 
10755.137    96.129 10881.192 
     user    system   elapsed 
10970.700    98.102 11099.090 
     user    system   elapsed 
11185.168   100.283 11316.085 
     user    system   elapsed 
11402.637   102.241 11535.879 
     user    system   elapsed 
11628.914   104.353 11764.714 
     user    system   elapsed 
11872.553   106.333 12010.838 
     user    system   elapsed 
12114.255   108.252 12254.962 
     user    system   elapsed 
12357.480   110.298 12500.724 
     user    system   elapsed 
12599.549   112.152 12745.135 
    user   system  elapsed 
12839.96   114.23 12988.10 
     user    system   elapsed 
13083.434   116.529 13234.364 
     user    system   elapsed 
13326.260   118.466 13479.643 
     user    system   elapsed 
13562.791   120.537 13718.717 
     user    system   elapsed 
13808.282   122.514 13966.680 
     user    system   elapsed 
14051.765   124.609 14212.769 
     user    system   elapsed 
14299.236   126.869 14462.994 
     user    system   elapsed 
14544.907   129.018 14711.316 
    user   system  elapsed 
14773.42   131.27 14942.50 
     user    system   elapsed 
15012.790   133.371 15184.432 
     user    system   elapsed 
15253.042   135.394 15427.167 
     user    system   elapsed 
15493.848   137.142 15670.197 
     user    system   elapsed 
15739.079   139.216 15917.989 
     user    system   elapsed 
15977.274   141.026 16158.463 
     user    system   elapsed 
16218.931   142.803 16402.396 
     user    system   elapsed 
16464.473   144.628 16650.285 
     user    system   elapsed 
16700.219   146.427 16888.266 
     user    system   elapsed 
16916.357   148.203 17106.557 
     user    system   elapsed 
17131.421   149.825 17323.595 
     user    system   elapsed 
17348.199   151.437 17542.341 
     user    system   elapsed 
17568.681   153.356 17765.117 
     user    system   elapsed 
17784.934   155.158 17983.530 
     user    system   elapsed 
18002.381   156.953 18203.140 
     user    system   elapsed 
18222.912   158.638 18425.744 
     user    system   elapsed 
18448.035   160.367 18652.969 
     user    system   elapsed 
18670.016   161.876 18876.842 
     user    system   elapsed 
18888.703   163.446 19097.474 
     user    system   elapsed 
19112.920   165.484 19324.128 
     user    system   elapsed 
19335.765   167.469 19549.360 
     user    system   elapsed 
19555.445   167.529 19769.459 
     user    system   elapsed 
19773.801   167.618 19988.255 
     user    system   elapsed 
19994.076   167.708 20208.998 
     user    system   elapsed 
20213.353   167.776 20428.702 
     user    system   elapsed 
20434.741   167.998 20650.663 
     user    system   elapsed 
20657.315   168.149 20873.742 
     user    system   elapsed 
20876.886   168.273 21093.801 
    user   system  elapsed 
21099.13   168.35 21316.49 
     user    system   elapsed 
21323.807   168.443 21541.642 
     user    system   elapsed 
21540.625   168.647 21759.006 
     user    system   elapsed 
21761.524   168.706 21980.329 
     user    system   elapsed 
21982.325   168.783 22201.559 
     user    system   elapsed 
22201.137   168.859 22420.755 
     user    system   elapsed 
22402.024   169.006 22621.960 
     user    system   elapsed 
22602.312   169.064 22822.461 
     user    system   elapsed 
22802.666   169.174 23023.093 
     user    system   elapsed 
23003.966   169.272 23224.658 
     user    system   elapsed 
23205.597   169.338 23426.517 
     user    system   elapsed 
23406.701   169.404 23627.848 
     user    system   elapsed 
23607.118   169.464 23828.481 
     user    system   elapsed 
23808.350   169.559 24029.968 
     user    system   elapsed 
24008.907   169.644 24230.774 
     user    system   elapsed 
24209.496   169.717 24431.604 
    user   system  elapsed 
24409.87   169.90 24632.32 
    user   system  elapsed 
24613.23   169.97 24835.92 
     user    system   elapsed 
24814.362   170.104 25037.362 
     user    system   elapsed 
25015.795   170.199 25239.064 
     user    system   elapsed 
25217.223   170.288 25440.754 
    user   system  elapsed 
25418.83   170.39 25642.64 
     user    system   elapsed 
25621.288   170.472 25845.343 
     user    system   elapsed 
25824.031   170.665 26048.450 
    user   system  elapsed 
26021.87   170.74 26246.53 
    user   system  elapsed 
26220.13   170.80 26445.03 
     user    system   elapsed 
26416.873   170.865 26641.999 
     user    system   elapsed 
26612.802   171.002 26838.207 
     user    system   elapsed 
26807.939   171.068 27033.542 
     user    system   elapsed 
27003.432   171.129 27229.240 
     user    system   elapsed 
27199.424   171.177 27425.428 
     user    system   elapsed 
27391.547   171.239 27617.758 
     user    system   elapsed 
27589.168   171.384 27815.673 
     user    system   elapsed 
27786.100   171.461 28012.809 
     user    system   elapsed 
27982.992   171.529 28209.899 
     user    system   elapsed 
28179.781   171.586 28406.869 
     user    system   elapsed 
28377.048   171.643 28604.328 
     user    system   elapsed 
28574.401   171.711 28801.883 
     user    system   elapsed 
28771.392   171.763 28999.056 
     user    system   elapsed 
28968.496   171.817 29196.346 
     user    system   elapsed 
29165.615   171.878 29393.656 
    user   system  elapsed 
29357.60   171.95 29585.83 
     user    system   elapsed 
29554.963   172.014 29783.392 
     user    system   elapsed 
29752.684   172.062 29981.305 
     user    system   elapsed 
29950.020   172.121 30178.868 
     user    system   elapsed 
30147.112   172.184 30376.187 
     user    system   elapsed 
30344.277   172.235 30573.563 
     user    system   elapsed 
30546.340   172.282 30775.833 
     user    system   elapsed 
30746.912   172.339 30976.621 
     user    system   elapsed 
30942.630   172.385 31172.543 
    user   system  elapsed 
31135.89   172.44 31365.99 
     user    system   elapsed 
31330.828   172.487 31561.086 
     user    system   elapsed 
31532.406   172.555 31762.871 
     user    system   elapsed 
31733.929   172.705 31964.816 
     user    system   elapsed 
31931.294   172.753 32162.372 
     user    system   elapsed 
32134.060   172.828 32365.382 
     user    system   elapsed 
32330.118   172.877 32561.618 
    user   system  elapsed 
32528.38   172.95 32760.11 
     user    system   elapsed 
32731.828   173.036 32963.821 
     user    system   elapsed 
32933.795   173.092 33166.026 
    user   system  elapsed 
33150.03   173.46 33382.82 
     user    system   elapsed 
33347.869   173.524 33580.864 
     user    system   elapsed 
33545.364   173.582 33778.544 
     user    system   elapsed 
33744.933   173.654 33978.330 
     user    system   elapsed 
33945.440   173.704 34179.057 
     user    system   elapsed 
34146.067   173.764 34379.915 
     user    system   elapsed 
34345.126   173.838 34579.249 
     user    system   elapsed 
34542.626   173.964 34777.098 
     user    system   elapsed 
34742.852   174.007 34977.470 
     user    system   elapsed 
34945.085   174.078 35179.873 
     user    system   elapsed 
35153.672   174.133 35388.675 
     user    system   elapsed 
35356.674   174.182 35591.907 
     user    system   elapsed 
35554.699   174.254 35790.214 
     user    system   elapsed 
35755.301   174.302 35990.988 
     user    system   elapsed 
35956.701   174.415 36192.698 
     user    system   elapsed 
36161.580   174.793 36398.223 
    user   system  elapsed 
36363.55   174.87 36600.40 
     user    system   elapsed 
36563.050   174.918 36800.094 
     user    system   elapsed 
36761.947   174.973 36999.208 
     user    system   elapsed 
36960.056   175.054 37197.570 
     user    system   elapsed 
37155.604   175.113 37393.269 
     user    system   elapsed 
37354.610   175.304 37592.721 
     user    system   elapsed 
37557.419   175.991 37796.916 
    user   system  elapsed 
37748.11   176.05 37987.75 
     user    system   elapsed 
37938.868   176.347 38179.163 
     user    system   elapsed 
38129.734   176.921 38371.222 
     user    system   elapsed 
38319.313   176.963 38560.937 
     user    system   elapsed 
38511.807   177.027 38753.594 
     user    system   elapsed 
39124.061   177.694 39367.145 
     user    system   elapsed 
40416.965   183.088 40667.046 
     user    system   elapsed 
41055.706   184.424 41308.405 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
