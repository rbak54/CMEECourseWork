 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.641   0.060   0.701 
   user  system elapsed 
283.282   2.989 286.373 
   user  system elapsed 
561.770   5.145 567.097 
   user  system elapsed 
842.514   7.603 850.396 
    user   system  elapsed 
1123.952   10.672 1135.007 
    user   system  elapsed 
1370.982   13.109 1384.500 
    user   system  elapsed 
1619.236   15.688 1635.356 
    user   system  elapsed 
1857.242   18.301 1875.991 
    user   system  elapsed 
2088.695   21.297 2110.460 
    user   system  elapsed 
2337.975   23.933 2362.397 
    user   system  elapsed 
2586.042   26.166 2612.738 
    user   system  elapsed 
2836.677   28.658 2865.977 
    user   system  elapsed 
3087.382   31.159 3119.268 
    user   system  elapsed 
3335.520   33.275 3369.590 
    user   system  elapsed 
3588.296   35.332 3624.448 
    user   system  elapsed 
3836.368   37.620 3874.824 
    user   system  elapsed 
4080.695   39.489 4121.035 
    user   system  elapsed 
4334.603   41.626 4377.129 
    user   system  elapsed 
4587.314   43.734 4631.976 
    user   system  elapsed 
4830.120   46.247 4877.324 
    user   system  elapsed 
5069.391   48.590 5118.963 
    user   system  elapsed 
5311.411   50.755 5363.167 
    user   system  elapsed 
5552.887   52.845 5606.751 
    user   system  elapsed 
5791.253   54.850 5847.141 
    user   system  elapsed 
6030.371   56.959 6088.400 
    user   system  elapsed 
6268.601   58.975 6328.665 
    user   system  elapsed 
6505.951   60.961 6568.022 
    user   system  elapsed 
6743.507   62.936 6807.572 
    user   system  elapsed 
6982.053   64.707 7047.908 
    user   system  elapsed 
7218.905   67.024 7287.096 
    user   system  elapsed 
7461.606   69.129 7531.922 
    user   system  elapsed 
7701.320   71.524 7774.076 
    user   system  elapsed 
7942.147   73.320 8016.713 
    user   system  elapsed 
8183.367   75.138 8259.767 
    user   system  elapsed 
8416.371   76.820 8494.471 
    user   system  elapsed 
8649.747   78.677 8729.721 
    user   system  elapsed 
8882.900   80.591 8964.804 
    user   system  elapsed 
9117.348   82.434 9201.112 
    user   system  elapsed 
9351.066   84.361 9436.773 
    user   system  elapsed 
9584.727   86.437 9672.525 
    user   system  elapsed 
9820.369   88.163 9909.908 
     user    system   elapsed 
10049.118    89.965 10140.475 
     user    system   elapsed 
10273.238    91.672 10366.318 
     user    system   elapsed 
10493.783    93.528 10588.735 
     user    system   elapsed 
10710.765    95.314 10807.519 
     user    system   elapsed 
10926.534    96.995 11024.985 
     user    system   elapsed 
11142.750    98.855 11243.076 
     user    system   elapsed 
11360.017   100.479 11461.982 
     user    system   elapsed 
11576.935   102.007 11680.443 
     user    system   elapsed 
11818.568   103.946 11924.034 
     user    system   elapsed 
12059.193   106.032 12166.764 
     user    system   elapsed 
12307.997   107.919 12417.664 
     user    system   elapsed 
12559.598   109.885 12671.255 
     user    system   elapsed 
12812.345   112.043 12926.195 
     user    system   elapsed 
13065.130   114.056 13181.019 
     user    system   elapsed 
13318.284   115.775 13435.926 
     user    system   elapsed 
13572.388   117.791 13692.085 
     user    system   elapsed 
13823.969   120.083 13945.980 
     user    system   elapsed 
14076.283   122.445 14200.686 
     user    system   elapsed 
14331.828   124.655 14458.496 
     user    system   elapsed 
14584.818   127.146 14714.023 
     user    system   elapsed 
14836.788   129.211 14968.103 
     user    system   elapsed 
15095.624   131.403 15229.201 
     user    system   elapsed 
15358.367   133.576 15494.194 
     user    system   elapsed 
15619.492   135.823 15757.632 
     user    system   elapsed 
15875.298   137.657 16015.335 
     user    system   elapsed 
16134.550   139.514 16276.508 
     user    system   elapsed 
16393.823   141.586 16537.906 
     user    system   elapsed 
16655.106   143.415 16801.101 
     user    system   elapsed 
16912.404   145.616 17060.649 
     user    system   elapsed 
17174.645   147.296 17324.651 
     user    system   elapsed 
17436.252   149.243 17588.288 
     user    system   elapsed 
17694.791   151.032 17848.674 
     user    system   elapsed 
17954.951   153.134 18110.999 
     user    system   elapsed 
18217.961   155.059 18376.021 
     user    system   elapsed 
18478.351   157.017 18638.438 
     user    system   elapsed 
18742.189   158.807 18904.155 
     user    system   elapsed 
19002.179   160.699 19166.095 
     user    system   elapsed 
19262.135   162.764 19428.181 
     user    system   elapsed 
19524.197   164.698 19692.244 
     user    system   elapsed 
19786.245   166.504 19956.173 
     user    system   elapsed 
20035.851   168.073 20207.405 
     user    system   elapsed 
20283.272   169.738 20456.510 
     user    system   elapsed 
20529.824   171.278 20704.619 
     user    system   elapsed 
20774.186   172.845 20950.564 
     user    system   elapsed 
21020.707   174.503 21198.776 
    user   system  elapsed 
21265.91   176.02 21445.54 
     user    system   elapsed 
21515.300   177.642 21696.600 
     user    system   elapsed 
21762.423   179.215 21945.320 
     user    system   elapsed 
22006.957   180.715 22191.372 
     user    system   elapsed 
22254.130   182.483 22440.330 
     user    system   elapsed 
22505.767   184.091 22693.600 
     user    system   elapsed 
22761.027   185.947 22950.747 
     user    system   elapsed 
23011.198   187.803 23202.797 
     user    system   elapsed 
23258.840   189.396 23452.061 
     user    system   elapsed 
23509.579   190.923 23704.347 
     user    system   elapsed 
23762.150   192.607 23958.630 
     user    system   elapsed 
24008.967   194.186 24207.046 
     user    system   elapsed 
24258.347   195.922 24458.184 
     user    system   elapsed 
24506.831   197.733 24708.501 
     user    system   elapsed 
24753.035   199.308 24956.300 
     user    system   elapsed 
24998.745   201.094 25203.817 
    user   system  elapsed 
25243.77   202.62 25450.39 
     user    system   elapsed 
25490.441   204.318 25698.777 
     user    system   elapsed 
25735.373   205.871 25945.282 
    user   system  elapsed 
25984.56   207.40 26196.03 
     user    system   elapsed 
26231.413   209.032 26444.538 
     user    system   elapsed 
26475.233   210.647 26689.992 
     user    system   elapsed 
26724.126   212.172 26940.437 
     user    system   elapsed 
26972.140   213.757 27190.057 
     user    system   elapsed 
27215.715   215.428 27435.318 
     user    system   elapsed 
27459.360   217.035 27680.586 
     user    system   elapsed 
27701.092   218.679 27923.978 
     user    system   elapsed 
27943.499   220.346 28168.070 
    user   system  elapsed 
28185.49   222.02 28411.75 
     user    system   elapsed 
28426.694   223.601 28654.558 
     user    system   elapsed 
28666.665   225.216 28896.162 
     user    system   elapsed 
28908.434   226.832 29139.567 
     user    system   elapsed 
29156.136   228.387 29388.847 
    user   system  elapsed 
29403.70   230.07 29638.11 
     user    system   elapsed 
29649.623   231.811 29885.802 
     user    system   elapsed 
29902.366   233.804 30140.566 
    user   system  elapsed 
30148.80   235.82 30389.04 
     user    system   elapsed 
30386.650   238.142 30629.242 
     user    system   elapsed 
30627.637   239.935 30872.178 
     user    system   elapsed 
30870.275   241.575 31116.475 
     user    system   elapsed 
31111.673   243.146 31359.464 
     user    system   elapsed 
31353.175   244.681 31602.520 
     user    system   elapsed 
31597.957   246.307 31848.950 
     user    system   elapsed 
31839.180   247.965 32091.846 
     user    system   elapsed 
32080.025   249.482 32334.224 
    user   system  elapsed 
32320.24   251.03 32576.00 
     user    system   elapsed 
32559.383   252.537 32816.668 
     user    system   elapsed 
32800.552   254.166 33059.482 
     user    system   elapsed 
33040.395   255.748 33300.924 
     user    system   elapsed 
33284.479   257.521 33546.797 
     user    system   elapsed 
33526.406   259.262 33790.484 
     user    system   elapsed 
33768.522   260.938 34034.292 
     user    system   elapsed 
34009.110   262.501 34276.459 
    user   system  elapsed 
34248.91   264.08 34517.85 
    user   system  elapsed 
34485.24   265.86 34755.98 
     user    system   elapsed 
34719.653   267.473 34992.019 
     user    system   elapsed 
34952.064   269.174 35226.146 
    user   system  elapsed 
35184.93   270.78 35460.63 
     user    system   elapsed 
35418.295   272.353 35695.589 
     user    system   elapsed 
35652.371   273.906 35931.235 
    user   system  elapsed 
35887.99   275.59 36168.55 
    user   system  elapsed 
36121.94   277.15 36404.08 
     user    system   elapsed 
36356.842   278.651 36640.496 
     user    system   elapsed 
36590.683   280.354 36876.057 
     user    system   elapsed 
36825.893   281.869 37112.801 
     user    system   elapsed 
37055.940   283.584 37344.580 
     user    system   elapsed 
37289.783   285.185 37580.045 
     user    system   elapsed 
37524.312   286.769 37816.178 
     user    system   elapsed 
37758.462   288.342 38051.918 
     user    system   elapsed 
37992.161   289.902 38287.195 
     user    system   elapsed 
38238.105   291.391 38534.653 
     user    system   elapsed 
38485.581   293.142 38783.903 
     user    system   elapsed 
38737.617   294.801 39037.624 
     user    system   elapsed 
38988.157   296.654 39290.042 
     user    system   elapsed 
39241.367   298.547 39545.175 
     user    system   elapsed 
39487.948   300.014 39793.243 
     user    system   elapsed 
39738.248   301.895 40045.450 
     user    system   elapsed 
39988.234   303.731 40297.307 
     user    system   elapsed 
40239.125   305.405 40549.899 
     user    system   elapsed 
40488.508   307.197 40801.098 
     user    system   elapsed 
40738.754   308.745 41052.930 
     user    system   elapsed 
40988.185   310.331 41303.979 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
