 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.531   0.031   0.563 
   user  system elapsed 
272.148   2.548 275.397 
   user  system elapsed 
541.570   4.594 547.561 
   user  system elapsed 
827.280   6.725 836.097 
    user   system  elapsed 
1086.269    8.780 1097.678 
    user   system  elapsed 
1348.339   11.516 1363.070 
    user   system  elapsed 
1622.438   13.698 1639.946 
    user   system  elapsed 
1870.200   16.301 1890.826 
    user   system  elapsed 
2107.393   18.592 2130.785 
    user   system  elapsed 
2385.671   21.065 2412.398 
    user   system  elapsed 
2669.479   23.370 2699.232 
    user   system  elapsed 
2969.976   25.507 3002.674 
    user   system  elapsed 
3256.218   27.983 3292.151 
    user   system  elapsed 
3537.959   30.038 3576.897 
    user   system  elapsed 
3813.382   32.185 3855.174 
    user   system  elapsed 
4101.393   34.447 4146.229 
    user   system  elapsed 
4371.254   36.664 4419.001 
    user   system  elapsed 
4650.417   38.544 4700.772 
    user   system  elapsed 
4930.541   40.347 4983.408 
    user   system  elapsed 
5214.052   42.381 5269.901 
    user   system  elapsed 
5492.920   44.531 5551.639 
    user   system  elapsed 
5758.230   46.488 5819.464 
    user   system  elapsed 
6018.482   48.541 6082.337 
    user   system  elapsed 
6284.778   50.942 6351.596 
    user   system  elapsed 
6548.229   52.940 6617.628 
    user   system  elapsed 
6813.003   55.128 6885.161 
    user   system  elapsed 
7086.456   57.098 7161.165 
    user   system  elapsed 
7356.705   59.124 7434.065 
    user   system  elapsed 
7616.775   61.121 7696.616 
    user   system  elapsed 
7878.356   63.231 7960.860 
    user   system  elapsed 
8127.433   65.290 8212.452 
    user   system  elapsed 
8379.633   67.488 8467.335 
    user   system  elapsed 
8628.312   69.301 8718.290 
    user   system  elapsed 
8883.858   71.011 8976.017 
    user   system  elapsed 
9132.136   72.939 9226.662 
    user   system  elapsed 
9379.465   74.666 9476.160 
    user   system  elapsed 
9634.746   76.439 9733.706 
    user   system  elapsed 
9889.599   78.586 9991.184 
     user    system   elapsed 
10147.808    80.694 10252.010 
     user    system   elapsed 
10399.291    82.744 10506.010 
    user   system  elapsed 
10646.30    84.76 10755.46 
    user   system  elapsed 
10897.59    86.84 11009.28 
     user    system   elapsed 
11150.178    88.687 11264.190 
     user    system   elapsed 
11405.558    90.717 11522.076 
     user    system   elapsed 
11688.535    92.648 11807.591 
     user    system   elapsed 
11979.215    94.813 12101.109 
     user    system   elapsed 
12274.450    97.155 12399.337 
     user    system   elapsed 
12561.072    98.879 12688.358 
     user    system   elapsed 
12842.764   101.282 12973.079 
     user    system   elapsed 
13121.767   103.465 13254.856 
     user    system   elapsed 
13402.230   105.607 13538.069 
     user    system   elapsed 
13676.419   107.743 13814.959 
     user    system   elapsed 
13954.358   109.598 14095.366 
     user    system   elapsed 
14249.342   111.765 14393.199 
     user    system   elapsed 
14535.902   113.643 14682.276 
    user   system  elapsed 
14814.15   115.55 14963.00 
     user    system   elapsed 
15091.545   117.643 15243.066 
     user    system   elapsed 
15373.006   120.067 15527.531 
     user    system   elapsed 
15649.270   122.324 15806.618 
     user    system   elapsed 
15921.558   124.515 16081.683 
     user    system   elapsed 
16212.268   127.409 16375.994 
     user    system   elapsed 
16508.867   129.622 16675.502 
     user    system   elapsed 
16805.375   131.816 16974.868 
     user    system   elapsed 
17096.744   133.946 17269.001 
     user    system   elapsed 
17376.609   136.068 17551.543 
     user    system   elapsed 
17660.851   138.146 17838.461 
     user    system   elapsed 
17950.524   140.138 18130.808 
     user    system   elapsed 
18238.211   142.401 18421.389 
     user    system   elapsed 
18531.493   144.447 18717.354 
     user    system   elapsed 
18825.037   146.554 19013.659 
     user    system   elapsed 
19116.429   148.509 19307.637 
     user    system   elapsed 
19405.962   150.614 19599.880 
    user   system  elapsed 
19698.55   152.85 19895.34 
     user    system   elapsed 
19989.967   154.568 20189.133 
     user    system   elapsed 
20281.157   156.313 20482.723 
    user   system  elapsed 
20573.23   157.98 20777.11 
     user    system   elapsed 
20864.978   160.029 21071.550 
     user    system   elapsed 
21169.687   161.995 21379.128 
     user    system   elapsed 
21500.607   164.276 21713.268 
     user    system   elapsed 
21824.967   166.819 22041.178 
    user   system  elapsed 
22148.89   169.56 22368.70 
     user    system   elapsed 
22460.356   171.142 22682.624 
     user    system   elapsed 
22761.839   172.776 22986.531 
    user   system  elapsed 
23044.78   174.27 23271.58 
     user    system   elapsed 
23341.291   175.702 23570.215 
     user    system   elapsed 
23627.277   177.113 23858.256 
    user   system  elapsed 
23914.98   178.62 24148.15 
     user    system   elapsed 
24213.500   180.085 24448.807 
     user    system   elapsed 
24508.955   181.511 24746.341 
     user    system   elapsed 
24802.899   182.826 25042.225 
     user    system   elapsed 
25095.970   184.327 25337.436 
    user   system  elapsed 
25395.90   185.84 25639.56 
     user    system   elapsed 
25690.121   187.372 25935.972 
    user   system  elapsed 
25981.38   188.85 26229.33 
     user    system   elapsed 
26275.772   190.492 26526.049 
     user    system   elapsed 
26567.992   191.879 26820.334 
     user    system   elapsed 
26848.243   193.306 27102.623 
     user    system   elapsed 
27138.585   194.783 27395.097 
     user    system   elapsed 
27423.896   196.125 27682.370 
     user    system   elapsed 
27707.602   197.446 27968.013 
     user    system   elapsed 
27992.175   198.843 28254.607 
     user    system   elapsed 
28284.949   200.368 28549.574 
     user    system   elapsed 
28568.566   201.687 28835.128 
     user    system   elapsed 
28853.793   203.196 29122.492 
     user    system   elapsed 
29136.961   204.594 29407.680 
    user   system  elapsed 
29426.23   206.04 29699.06 
     user    system   elapsed 
29718.863   207.513 29993.828 
     user    system   elapsed 
30004.751   208.934 30281.761 
     user    system   elapsed 
30288.587   210.362 30567.653 
     user    system   elapsed 
30573.271   211.729 30854.328 
     user    system   elapsed 
30864.651   213.274 31147.892 
     user    system   elapsed 
31156.789   214.813 31442.210 
     user    system   elapsed 
31440.531   216.225 31727.983 
     user    system   elapsed 
31731.390   217.685 32020.970 
     user    system   elapsed 
32011.828   219.161 32303.503 
     user    system   elapsed 
32299.037   220.674 32592.876 
     user    system   elapsed 
32585.046   222.152 32881.019 
     user    system   elapsed 
32871.613   223.481 33169.563 
     user    system   elapsed 
33155.634   225.074 33455.790 
     user    system   elapsed 
33437.174   226.626 33739.509 
     user    system   elapsed 
33725.412   228.205 34029.981 
     user    system   elapsed 
34011.328   229.647 34317.992 
     user    system   elapsed 
34299.770   231.143 34608.598 
     user    system   elapsed 
34586.089   232.615 34897.046 
    user   system  elapsed 
34872.78   234.04 35185.80 
     user    system   elapsed 
35159.510   235.431 35474.575 
     user    system   elapsed 
35444.089   237.044 35761.413 
     user    system   elapsed 
35731.835   238.619 36051.393 
     user    system   elapsed 
36020.032   240.122 36341.780 
     user    system   elapsed 
36306.751   241.505 36630.557 
     user    system   elapsed 
36593.938   242.996 36919.901 
     user    system   elapsed 
36881.714   244.539 37209.878 
     user    system   elapsed 
37165.407   246.051 37495.725 
     user    system   elapsed 
37453.355   247.617 37785.897 
     user    system   elapsed 
37742.638   249.064 38077.278 
     user    system   elapsed 
38024.177   250.482 38360.878 
     user    system   elapsed 
38312.676   251.842 38651.401 
     user    system   elapsed 
38595.839   253.313 38936.670 
     user    system   elapsed 
38883.188   254.713 39226.066 
     user    system   elapsed 
39167.911   256.137 39512.846 
     user    system   elapsed 
39455.440   257.714 39802.607 
     user    system   elapsed 
39740.364   259.148 40089.599 
     user    system   elapsed 
40028.512   260.513 40379.775 
     user    system   elapsed 
40316.182   261.945 40669.527 
     user    system   elapsed 
40608.507   263.421 40964.002 
     user    system   elapsed 
40894.928   264.882 41252.528 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
