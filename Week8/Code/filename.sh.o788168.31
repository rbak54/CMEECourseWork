 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.671   0.032   0.705 
   user  system elapsed 
267.031   2.128 269.798 
   user  system elapsed 
539.123   4.129 544.608 
   user  system elapsed 
816.211   6.374 824.589 
    user   system  elapsed 
1081.817    8.620 1093.065 
    user   system  elapsed 
1334.403   11.096 1348.689 
    user   system  elapsed 
1608.091   13.561 1625.545 
    user   system  elapsed 
1867.019   16.195 1887.621 
    user   system  elapsed 
2101.973   18.598 2125.465 
    user   system  elapsed 
2371.097   21.071 2397.707 
    user   system  elapsed 
2646.551   23.573 2676.368 
    user   system  elapsed 
2917.539   25.856 2950.379 
    user   system  elapsed 
3202.085   28.175 3238.003 
    user   system  elapsed 
3475.881   30.609 3514.908 
    user   system  elapsed 
3755.405   32.677 3797.709 
    user   system  elapsed 
4038.623   34.889 4083.860 
    user   system  elapsed 
4306.350   36.816 4354.212 
    user   system  elapsed 
4582.366   38.544 4632.631 
    user   system  elapsed 
4870.094   40.591 4923.226 
    user   system  elapsed 
5159.543   42.555 5215.515 
    user   system  elapsed 
5441.545   44.713 5500.412 
    user   system  elapsed 
5706.364   46.871 5767.973 
    user   system  elapsed 
5968.858   48.761 6032.894 
    user   system  elapsed 
6238.564   50.987 6305.404 
    user   system  elapsed 
6503.571   53.017 6573.004 
    user   system  elapsed 
6763.541   54.795 6835.300 
    user   system  elapsed 
7032.318   56.791 7106.653 
    user   system  elapsed 
7293.870   59.039 7370.982 
    user   system  elapsed 
7550.187   61.377 7630.157 
    user   system  elapsed 
7802.684   63.536 7885.330 
    user   system  elapsed 
8046.932   65.602 8132.100 
    user   system  elapsed 
8299.449   67.563 8387.088 
    user   system  elapsed 
8546.404   69.484 8636.433 
    user   system  elapsed 
8799.574   71.313 8891.950 
    user   system  elapsed 
9045.011   73.094 9139.624 
    user   system  elapsed 
9286.955   74.911 9383.826 
    user   system  elapsed 
9543.243   76.867 9642.581 
    user   system  elapsed 
9788.348   78.740 9890.018 
    user   system  elapsed 
10031.14    80.53 10135.06 
     user    system   elapsed 
10289.251    82.527 10395.725 
     user    system   elapsed 
10541.264    84.501 10650.216 
     user    system   elapsed 
10789.316    86.304 10900.580 
    user   system  elapsed 
11040.03    88.06 11153.51 
     user    system   elapsed 
11284.265    90.096 11400.236 
     user    system   elapsed 
11550.746    92.308 11669.506 
     user    system   elapsed 
11828.110    94.203 11949.374 
     user    system   elapsed 
12100.250    96.001 12223.889 
     user    system   elapsed 
12378.031    98.189 12504.472 
    user   system  elapsed 
12655.83   100.06 12784.77 
     user    system   elapsed 
12935.440   102.328 13067.274 
     user    system   elapsed 
13223.187   104.365 13357.714 
     user    system   elapsed 
13509.172   106.382 13646.381 
    user   system  elapsed 
13788.93   108.55 13928.93 
     user    system   elapsed 
14072.487   110.542 14215.158 
     user    system   elapsed 
14344.593   112.658 14489.969 
     user    system   elapsed 
14621.275   114.662 14769.281 
     user    system   elapsed 
14899.966   116.676 15050.599 
     user    system   elapsed 
15186.520   118.838 15339.980 
     user    system   elapsed 
15462.651   120.748 15618.619 
     user    system   elapsed 
15736.664   123.174 15895.663 
     user    system   elapsed 
16013.404   125.503 16175.406 
     user    system   elapsed 
16298.009   127.511 16462.684 
     user    system   elapsed 
16589.791   129.625 16757.271 
     user    system   elapsed 
16874.686   131.679 17044.893 
     user    system   elapsed 
17180.694   133.989 17353.931 
     user    system   elapsed 
17469.335   136.039 17645.270 
     user    system   elapsed 
17763.440   137.934 17941.965 
     user    system   elapsed 
18047.400   139.981 18228.640 
     user    system   elapsed 
18332.313   142.183 18516.420 
     user    system   elapsed 
18615.046   143.798 18801.404 
     user    system   elapsed 
18905.176   145.806 19094.234 
     user    system   elapsed 
19182.168   147.907 19373.957 
    user   system  elapsed 
19474.53   149.99 19669.11 
     user    system   elapsed 
19778.382   152.016 19975.684 
    user   system  elapsed 
20075.80   153.74 20275.54 
     user    system   elapsed 
20365.651   155.803 20568.107 
     user    system   elapsed 
20662.151   158.075 20867.587 
     user    system   elapsed 
20957.870   160.077 21166.001 
     user    system   elapsed 
21266.069   161.969 21476.783 
     user    system   elapsed 
21583.374   164.156 21797.098 
     user    system   elapsed 
21900.693   166.672 22117.619 
     user    system   elapsed 
22209.948   169.053 22431.728 
     user    system   elapsed 
22520.104   171.365 22744.926 
     user    system   elapsed 
22810.570   173.649 23038.297 
     user    system   elapsed 
23090.140   175.591 23320.343 
     user    system   elapsed 
23377.203   177.627 23610.008 
     user    system   elapsed 
23667.585   180.026 23903.395 
     user    system   elapsed 
23957.889   182.281 24196.553 
     user    system   elapsed 
24260.087   184.175 24501.290 
     user    system   elapsed 
24549.942   186.086 24793.681 
     user    system   elapsed 
24842.665   188.195 25089.139 
     user    system   elapsed 
25131.941   190.207 25381.067 
     user    system   elapsed 
25422.668   192.275 25674.506 
     user    system   elapsed 
25708.542   194.499 25963.210 
    user   system  elapsed 
26006.95   196.86 26264.63 
     user    system   elapsed 
26299.937   198.865 26560.211 
     user    system   elapsed 
26588.414   201.133 26851.586 
    user   system  elapsed 
26874.61   203.35 27140.60 
     user    system   elapsed 
27160.826   205.659 27429.691 
    user   system  elapsed 
27445.51   207.78 27717.06 
     user    system   elapsed 
27733.401   209.888 28007.636 
     user    system   elapsed 
28020.969   212.006 28297.907 
     user    system   elapsed 
28310.721   214.472 28590.728 
     user    system   elapsed 
28603.867   216.593 28886.656 
     user    system   elapsed 
28890.701   218.831 29176.305 
     user    system   elapsed 
29178.266   221.009 29466.681 
     user    system   elapsed 
29473.141   223.381 29764.600 
     user    system   elapsed 
29759.072   225.539 30053.261 
    user   system  elapsed 
30043.67   227.63 30340.52 
     user    system   elapsed 
30334.847   229.861 30634.541 
    user   system  elapsed 
30616.66   232.19 30919.23 
     user    system   elapsed 
30899.241   234.569 31204.753 
     user    system   elapsed 
31176.732   236.935 31485.126 
     user    system   elapsed 
31462.774   238.959 31773.782 
     user    system   elapsed 
31754.005   241.376 32068.092 
     user    system   elapsed 
32040.585   243.427 32357.319 
     user    system   elapsed 
32332.276   245.583 32651.800 
     user    system   elapsed 
32621.660   247.879 32944.117 
     user    system   elapsed 
32911.006   250.159 33236.393 
    user   system  elapsed 
33188.73   252.34 33516.86 
     user    system   elapsed 
33471.160   254.667 33802.197 
     user    system   elapsed 
33758.248   256.792 34092.012 
     user    system   elapsed 
34052.081   258.901 34388.608 
     user    system   elapsed 
34340.291   261.242 34679.762 
     user    system   elapsed 
34631.712   263.428 34973.984 
     user    system   elapsed 
34915.567   265.498 35260.481 
     user    system   elapsed 
35201.595   267.676 35549.288 
     user    system   elapsed 
35487.607   269.778 35837.993 
     user    system   elapsed 
35776.187   272.053 36129.468 
     user    system   elapsed 
36059.903   274.167 36415.890 
     user    system   elapsed 
36343.838   276.589 36702.820 
     user    system   elapsed 
36632.876   278.655 36994.555 
     user    system   elapsed 
36919.633   280.852 37284.106 
     user    system   elapsed 
37206.167   283.222 37573.588 
     user    system   elapsed 
37492.111   285.636 37862.563 
     user    system   elapsed 
37775.793   287.835 38149.048 
     user    system   elapsed 
38062.625   290.027 38438.708 
     user    system   elapsed 
38352.218   292.063 38730.978 
     user    system   elapsed 
38643.549   294.399 39025.340 
     user    system   elapsed 
38931.952   296.366 39316.333 
     user    system   elapsed 
39215.769   298.348 39602.770 
     user    system   elapsed 
39494.224   300.389 39883.842 
    user   system  elapsed 
39783.26   302.71 40175.89 
     user    system   elapsed 
40070.815   305.068 40466.465 
     user    system   elapsed 
40359.206   307.094 40757.591 
     user    system   elapsed 
40642.523   309.203 41043.664 
     user    system   elapsed 
40925.523   311.564 41329.632 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.97 (ave)

============================================
