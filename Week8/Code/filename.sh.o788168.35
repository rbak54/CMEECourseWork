 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.512   0.031   0.544 
   user  system elapsed 
262.442   2.027 265.022 
   user  system elapsed 
533.783   4.559 539.504 
   user  system elapsed 
808.988   6.916 817.772 
    user   system  elapsed 
1087.245    9.520 1099.317 
    user   system  elapsed 
1360.125   12.345 1375.705 
    user   system  elapsed 
1626.852   15.024 1645.696 
    user   system  elapsed 
1878.343   17.567 1900.358 
    user   system  elapsed 
2128.396   20.236 2153.717 
    user   system  elapsed 
2398.731   22.737 2427.280 
    user   system  elapsed 
2684.513   25.055 2716.048 
    user   system  elapsed 
2961.131   27.212 2995.592 
    user   system  elapsed 
3255.801   29.817 3293.850 
    user   system  elapsed 
3540.435   32.048 3581.422 
    user   system  elapsed 
3824.834   34.159 3868.690 
    user   system  elapsed 
4103.660   36.520 4150.548 
    user   system  elapsed 
4394.496   38.657 4444.295 
    user   system  elapsed 
4697.001   40.783 4750.142 
    user   system  elapsed 
4995.687   42.945 5051.761 
    user   system  elapsed 
5300.247   45.043 5359.580 
    user   system  elapsed 
5605.901   47.480 5668.559 
    user   system  elapsed 
5914.118   50.099 5980.468 
    user   system  elapsed 
6215.125   52.287 6284.514 
    user   system  elapsed 
6524.988   54.921 6597.861 
    user   system  elapsed 
6831.631   57.164 6907.594 
    user   system  elapsed 
7125.367   59.629 7204.473 
    user   system  elapsed 
7435.849   62.295 7518.458 
    user   system  elapsed 
7751.591   64.679 7837.387 
    user   system  elapsed 
8056.097   66.800 8144.745 
    user   system  elapsed 
8365.374   69.557 8457.630 
    user   system  elapsed 
8670.075   72.303 8765.875 
    user   system  elapsed 
8973.239   74.720 9072.252 
    user   system  elapsed 
9274.451   77.015 9376.509 
    user   system  elapsed 
9569.991   79.765 9675.459 
    user   system  elapsed 
9859.696   82.238 9968.296 
     user    system   elapsed 
10161.593    84.461 10273.200 
     user    system   elapsed 
10458.040    86.475 10572.349 
     user    system   elapsed 
10748.240    89.034 10865.805 
     user    system   elapsed 
11046.254    91.445 11166.885 
    user   system  elapsed 
11362.58    93.75 11486.34 
     user    system   elapsed 
11680.007    96.122 11807.013 
     user    system   elapsed 
12003.873    98.246 12133.878 
     user    system   elapsed 
12330.690   100.604 12463.970 
     user    system   elapsed 
12656.290   102.891 12792.747 
     user    system   elapsed 
12979.889   105.263 13119.626 
     user    system   elapsed 
13305.834   107.729 13448.897 
     user    system   elapsed 
13620.020   110.121 13766.266 
     user    system   elapsed 
13946.600   112.651 14096.272 
     user    system   elapsed 
14261.870   115.097 14414.797 
     user    system   elapsed 
14580.062   117.482 14736.190 
     user    system   elapsed 
14903.233   119.857 15062.598 
     user    system   elapsed 
15220.981   122.255 15383.656 
     user    system   elapsed 
15542.201   124.587 15707.997 
     user    system   elapsed 
15864.132   126.892 16033.045 
     user    system   elapsed 
16183.753   129.456 16356.059 
     user    system   elapsed 
16506.736   131.717 16682.082 
     user    system   elapsed 
16817.011   134.145 16995.535 
     user    system   elapsed 
17132.628   136.916 17314.683 
    user   system  elapsed 
17441.27   139.47 17626.64 
     user    system   elapsed 
17745.724   141.937 17934.386 
     user    system   elapsed 
18064.743   144.877 18257.170 
     user    system   elapsed 
18385.984   147.441 18581.800 
     user    system   elapsed 
18710.065   149.833 18909.177 
     user    system   elapsed 
19028.944   151.992 19231.058 
     user    system   elapsed 
19354.390   154.693 19560.026 
     user    system   elapsed 
19676.246   156.931 19884.968 
     user    system   elapsed 
19997.766   159.063 20209.464 
     user    system   elapsed 
20322.143   161.342 20536.996 
     user    system   elapsed 
20640.793   163.264 20858.417 
     user    system   elapsed 
20963.046   165.714 21183.985 
     user    system   elapsed 
21276.003   167.876 21499.887 
     user    system   elapsed 
21584.126   170.403 21811.280 
     user    system   elapsed 
21903.584   172.746 22133.893 
     user    system   elapsed 
22217.940   175.088 22451.387 
     user    system   elapsed 
22534.706   177.179 22771.104 
     user    system   elapsed 
22840.395   179.064 23079.408 
     user    system   elapsed 
23129.742   180.984 23371.281 
     user    system   elapsed 
23420.923   183.114 23665.206 
     user    system   elapsed 
23709.858   185.031 23956.660 
     user    system   elapsed 
24001.134   187.118 24250.634 
     user    system   elapsed 
24288.000   189.478 24540.456 
     user    system   elapsed 
24580.270   191.524 24835.387 
     user    system   elapsed 
24891.991   193.755 25150.064 
     user    system   elapsed 
25192.611   195.836 25453.408 
     user    system   elapsed 
25489.485   198.165 25753.259 
     user    system   elapsed 
25778.934   200.013 26045.149 
     user    system   elapsed 
26070.355   202.382 26339.552 
     user    system   elapsed 
26365.088   204.519 26637.058 
     user    system   elapsed 
26653.533   206.611 26928.187 
     user    system   elapsed 
26951.602   208.753 27229.056 
     user    system   elapsed 
27240.328   210.785 27520.414 
     user    system   elapsed 
27534.162   212.887 27816.977 
     user    system   elapsed 
27821.484   214.933 28106.931 
     user    system   elapsed 
28110.619   217.126 28398.852 
     user    system   elapsed 
28403.129   219.235 28694.097 
    user   system  elapsed 
28691.65   221.61 28985.60 
     user    system   elapsed 
28993.666   223.638 29290.344 
     user    system   elapsed 
29280.529   225.534 29579.700 
     user    system   elapsed 
29570.300   227.659 29872.202 
     user    system   elapsed 
29865.216   229.644 30169.736 
     user    system   elapsed 
30159.466   231.984 30466.975 
     user    system   elapsed 
30455.204   233.998 30765.409 
     user    system   elapsed 
30746.595   236.418 31059.838 
     user    system   elapsed 
31049.213   238.651 31365.477 
     user    system   elapsed 
31344.106   240.798 31663.242 
    user   system  elapsed 
31647.93   242.86 31970.47 
     user    system   elapsed 
31973.302   245.253 32299.212 
     user    system   elapsed 
32279.823   247.585 32608.847 
    user   system  elapsed 
32575.98   249.92 32908.06 
     user    system   elapsed 
32872.137   251.855 33206.920 
    user   system  elapsed 
33175.16   253.87 33512.81 
     user    system   elapsed 
33483.126   256.249 33824.096 
     user    system   elapsed 
33779.003   258.217 34122.633 
    user   system  elapsed 
34072.21   260.10 34418.40 
     user    system   elapsed 
34367.098   262.472 34716.460 
     user    system   elapsed 
34664.850   264.673 35017.409 
     user    system   elapsed 
34961.844   266.892 35317.497 
     user    system   elapsed 
35258.123   268.953 35616.513 
     user    system   elapsed 
35556.658   271.194 35918.026 
     user    system   elapsed 
35860.038   273.519 36224.807 
     user    system   elapsed 
36161.435   275.766 36529.374 
     user    system   elapsed 
36453.037   278.086 36823.926 
     user    system   elapsed 
36743.793   280.153 37117.368 
     user    system   elapsed 
37029.438   281.994 37405.463 
     user    system   elapsed 
37310.665   283.998 37689.343 
     user    system   elapsed 
37606.840   286.421 37988.701 
     user    system   elapsed 
37897.133   288.568 38281.816 
    user   system  elapsed 
38195.17   290.84 38582.82 
    user   system  elapsed 
38494.31   293.29 38885.19 
     user    system   elapsed 
38792.925   295.378 39186.669 
     user    system   elapsed 
39093.977   297.572 39490.780 
     user    system   elapsed 
39389.764   299.622 39789.520 
     user    system   elapsed 
39690.041   301.697 40092.565 
     user    system   elapsed 
39985.976   303.877 40391.394 
     user    system   elapsed 
40282.985   306.032 40691.292 
     user    system   elapsed 
40591.557   308.147 41003.104 
     user    system   elapsed 
40906.787   310.335 41322.023 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
