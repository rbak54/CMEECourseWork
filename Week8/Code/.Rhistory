div<-list(0)
div
for (k in length(a)){
div[k]<-a[[k]]/count[[k]]
}
div<-list(0,0,0,0)
for (k in length(a)){
div[k]<-a[[k]]/count[[k]]
}
div
div
div[[1]]
div<-list(0,0,0,0)
for (k in length(a)){
div[[k]]<-a[[k]]/count[[k]]
}
div
a[[1]]
k[[1]]
count[[k]]
a[[k]]/count[[k]]
2045968/1975
class(a[[k]])
A
A/1
A/2
a[[k]]
k=4
a[[k]]
div<-list(0,0,0,0)
a<-list(vect500=c(0),vect1000=c(0),vect2500=c(0),vect5000=c(0))
count<-list(vect500=0,vect1000=0,vect2500=0,vect5000=0)
for (i in 1:100){
file<-paste0("output2_",i,".rda")
load(file)
v<-paste0("vect",size)
which<-(burn_in_generations/interval_oct)+1
for (j in (which:length(oct))){
a[[v]]<-sum_vect(a[[v]],oct[[j]])
count[[v]]<-count[[v]]+1
}
div<-list(0,0,0,0)
for (k in length(a)){
div[[k]]<-a[[k]]/count[[k]]
}
}
a
div
div
div<-list(0,0,0,0)
for (k in length(a)){
div[[k]]<-a[[k]]/count[[k]]
}
div
div<-list(0,0,0,0)
for (k in (1:length(a))){
div[[k]]<-a[[k]]/count[[k]]
}
div
a
count
42882/1975
div
a
count(3)
count[[3]]
162/21226
div
par(mfrow=c(1,4))
plot(div[[1]])
par(mfrow=c(4,1))
plot(div[[1]])
hist(div[[1]])
par(mfrow=c(4,1))
hist(div[[1]])
hist(div[[2]])
hist(div[[3]])
hist(div[[4]])
plot(div[[1]])
barplot(div[[1]])
par(mfrow=c(4,1))
par(mfrow=c(4,1))
barplot(div[[1]])
barplot(div[[2]])
barplot(div[[3]])
barplot(div[[4]])
par(mfrow=c(2,2))
barplot(div[[1]])
barplot(div[[2]])
barplot(div[[3]])
barplot(div[[3]])
barplot(div[[4]])
barplot(div[[1]])
barplot(div[[2]])
barplot(div[[3]])
#only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
require(ggplot2)
par(mfrow=c(2,2))
ggplot(data=div[[1]])
ggplot(data=div)
as.data.frame(div)
as.data.frame(div[[1]])
sizes<-c(500,1000,2500,5000)
par(mfrow=c(2,2))
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
sizes<-c(500,1000,2500,5000)
sizes[1]
data<-as.data.frame((div[[sizes]]))
data<-as.data.frame((div[[m]]))
for (m in sizes){
print(m)
#  data<-as.data.frame((div[[sizes]]))
#   barplot(div[[1]],)
#  barplot(div[[2]])
# barplot(div[[3]])
#barplot(div[[4]])
}#
data<-as.data.frame((div[[m]]))
m<-1
data<-as.data.frame((div[[m]]))
data
ggplot(data=data,aes((div[[m]])))
ggplot(data=data,aes((div[[m]])))+geom_bar()
ggplot(data=data,aes((div[[m]])))+geom_histogram()
ggplot(data=data,aes((div[[m]])))+geom_bar()
ggplot(data=data,aes((div[[m]])))+geom_bar()
ggplot(data=data,aes((div[[m]])))+geom_bar(stat="identity")
data
data[2]<-c(1:length(nrow(data)))
dara
data
data[2]<-seq(1,length(nrow(data)),1)
data[2]<-c(1:length(nrow(data)))data
seq(1,length(nrow(data)),1)
length(data)
nrow(data)
seq(1,nrow(data),1)
data[2]<-seq(1,nrow(data),1)
data
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()
par(mfrow=c(2,2))
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+xlim(20)
#   barplot(div[[1]],)
#  barplot(div[[2]])
# barplot(div[[3]])
#barplot(div[[4]])
}#
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+theme(xlim(20))
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+scale_fill_manual(c(20))
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+xlim(0,20)
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
div[[k]]<-a[[k]]/count[[k]]
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
# clear any existing graphs and plot your graph within the R window
graphics.off()
a<-list(vect500=c(0),vect1000=c(0),vect2500=c(0),vect5000=c(0))
count<-list(vect500=0,vect1000=0,vect2500=0,vect5000=0)
for (i in 1:100){
file<-paste0("output2_",i,".rda")
load(file)
v<-paste0("vect",size)
which<-(burn_in_generations/interval_oct)+1
for (j in (which:length(oct))){
a[[v]]<-sum_vect(a[[v]],oct[[j]])
count[[v]]<-count[[v]]+1
}
div<-list(0,0,0,0)
}
a
a
div
for (i in 1:100){
file<-paste0("output2_",i,".rda")
load(file)
v<-paste0("vect",size)
which<-(burn_in_generations/interval_oct)+1
for (j in (which:length(oct))){
a[[v]]<-sum_vect(a[[v]],oct[[j]])
count[[v]]<-count[[v]]+1
}
}
div<-list(0,0,0,0)
for (k in (1:length(a))){
div[[k]]<-a[[k]]/count[[k]]
}
div
div<-list(0,0,0,0)
div[[]]<-a[[]]/count[[]]
for (k in (1:length(a))){
div[[k]]<-a[[k]]/count[[k]]
}
m<-ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
sizes[m]
sizes<-c(500,1000,2500,5000)
sizes[m]
m<-1
sizes[m]
sizes<-list(graph500=500,graph1000=1000,graph2500=2500,graph5000=5000)
sizes
sizes[[m]]
sizes[m
]
names(sizes[m])
names(sizes[m])<-ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
names(sizes[m])=ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
as.character(names(sizes[m]))<-ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
as.character(names(sizes[m]))
as.string(names(sizes[m]))
as.str(names(sizes[m]))
asNamespace(names(sizes[m]))
as.name(names(sizes[m]))
as.name(names(sizes[m]))<-ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
g<-paste0("Graph",sizes[1])
g
g<-ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
g<-as.str(paste0("Graph",sizes[1]))
require(gridExtra)
for (m in 1:4){
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
g<-as.str(paste0("Graph",sizes[1]))
p[[i]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
}
for (m in 1:4){
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[i]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
}
p<-list()
for (m in 1:4){
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[i]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
}
do.call(grid.arrange,p)
# Question 20
process_cluster_results <- function()  {
# clear any existing graphs and plot your graph within the R window
graphics.off()
a<-list(vect500=c(0),vect1000=c(0),vect2500=c(0),vect5000=c(0))
count<-list(vect500=0,vect1000=0,vect2500=0,vect5000=0)
for (i in 1:100){
file<-paste0("output2_",i,".rda")
load(file)
v<-paste0("vect",size)
which<-(burn_in_generations/interval_oct)+1
for (j in (which:length(oct))){
a[[v]]<-sum_vect(a[[v]],oct[[j]])
count[[v]]<-count[[v]]+1
}
}
div<-list(0,0,0,0)
for (k in (1:length(a))){
div[[k]]<-a[[k]]/count[[k]]
}
par(mfrow=c(2,2))
sizes<-list(graph500=500,graph1000=1000,graph2500=2500,graph5000=5000)
require(gridExtra)
p<-list()
for (m in 1:4){
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[i]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
}
do.call(grid.arrange,p)
}
grid.arrange(p1, p2, nrow = 1)
do.call(grid.arrange,p)
p[1]
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
div[[1]]
div[[2]]
div[[3]]
div[[4]]
V2
data
data[2]<-seq(1,nrow(data),1)
data
p[[m]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
m
m=3
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[m]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
m=2
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R', echo=TRUE)
data<-as.data.frame((div[[m]]))
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[m]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
m=1
data<-as.data.frame((div[[m]]))
data[2]<-seq(1,nrow(data),1)
p[[m]] <- ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
do.call(grid.arrange,p)
require(gridExtra)
do.call(grid.arrange,p)
grid.arrange(p,nrow=2)
grid.arrange(p[[1]],p[[2]],p[[3]],p[[4]])
ggarrange(p[[1]])
plot(data[V2],div[[m]])
plot(data[V2],data[div[[m]]])
data
plot(data[V2],data[div[[m]]])
plot(V2,(div[[m]]]))
plot(V2,(div[[m]]))
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
barplot(div[[1]],)
barplot(div[[1]],ylim(0,20))
barplot(div[[1]],xlim(0,20))
par(mfrow=c(2,2))
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
ggplot(data=data,aes(V2,(div[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
#  barplot(div[[2]])
# barplot(div[[3]])
#barplot(div[[4]])
#
combined_results <- list() #create your list output here to return
par(mfrow=c(2,2))
barplot(div[[1]],ylim=c(0,20))
par(mfrow=c(2,2))
barplot(div[[1]],ylim=c(0,20))
barplot(div[[2]],ylim=c(0,20))
barplot(div[[3]],ylim=c(0,20))
barplot(div[[4]],ylim=c(0,20))
barplot(div[[1]],ylim=c(0,20),main="size=500")
par(mfrow=c(2,2))
barplot(div[[1]],ylim=c(0,20),main="Size=500")
barplot(div[[2]],ylim=c(0,20),main="Size=1000")
barplot(div[[3]],ylim=c(0,20),main="Size=2500")
barplot(div[[4]],ylim=c(0,20),main="Size=5000")
barplot(div[[1]],ylim=c(0,20),main="Size=500",xlab="Species Abundance octave",ylab="Mean frequency")
par(mfrow=c(2,2))
barplot(div[[1]],ylim=c(0,20),main="Size=500",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[2]],ylim=c(0,20),main="Size=1000",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[3]],ylim=c(0,20),main="Size=2500",xlab="Species Abundance octave",ylab="Mean frequency")
barplot(div[[4]],ylim=c(0,20),main="Size=5000",xlab="Species Abundance octave",ylab="Mean frequency")
div
a
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
#for (m in 1:4){
#   data<-as.data.frame((combined_results[[m]]))
#data[2]<-seq(1,nrow(data),1)
# }
## ggplot(data=data,aes(V2,(combined_results[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
#  do.call(grid.arrange,p)
# ggarrange(p[[1]])
#p<-list()  #   grid.arrange(p1, p2, nrow = 1)
save(combined_results,file="rbk119_cluster_results.rda")
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
process_cluster_results()
load("rbk119_cluster_results.rda")
View(combined_results)
View(combined_results)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
#for (m in 1:4){
#   data<-as.data.frame((combined_results[[m]]))
#data[2]<-seq(1,nrow(data),1)
# }
## ggplot(data=data,aes(V2,(combined_results[[m]])))+geom_bar(stat="identity")+theme_bw()+ylim(0,20)
#  do.call(grid.arrange,p)
# ggarrange(p[[1]])
#p<-list()  #   grid.arrange(p1, p2, nrow = 1)
save(combined_results,file="rbk119_cluster_results.rda")
combined_results
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
combined_results
process_cluster_results()
combined_results
load("rbk119_cluster_results.rda")
load("rbk119_cluster_results.rda")
View(combined_results)
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_cluster.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
combined_results
process_cluster_results()
source('~/Documents/CMEECourseWork/Week8/Code/rbk119_HPC_2019_main.R')
#Author: Ruth Keane (ruth.keane19@imperial.ac.uk)
#Script: Vectorize1.R
#Desc: Summing the elements of a matrix using both a vectorized and non-vectorized function
#Arguments: none
#Input: none
#Output: none
#Date: Oct 2019
#matrix
M <- matrix(runif(1000000),1000,1000)
M
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize1.R', echo=TRUE)
a<-matrix(data=1,nrow=3,ncol=4)
a
SumAllElements(a)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize1.R', echo=TRUE)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R', echo=TRUE)
#Author: Ruth Keane (ruth.keane19@imperial.ac.uk)
#Script: Vectorize2.R
#Desc: vectorizing stochastic Ricker model
#Arguments: none
#Input: none
#Output: none
#Date: Oct 2019
# Runs the stochastic Ricker equation with gaussian fluctuations
rm(list=ls())
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
# Now write another function called stochrickvect that vectorizes the above
# to the extent possible, with improved performance:
stochrickvect<-function(r=1.2,K=1,sigma=0.2){
#make matrix
N<-matrix(NA,100,1000)
#add random initial population size
pop<-rnorm(1000,0.5,1.5)
N[1,]<-pop
#loop through the populations
for (yr in 2:100){ #for each pop, loop through the years
N[yr,] <- N[yr-1,] * exp(r * (1 - N[yr - 1,] / K) + rnorm(1,0,sigma))
}
return(N)
}
print("Stochastic Ricker takes:")
print(system.time(res2<-stochrick()))
print("Vectorized Stochastic Ricker takes:")
print(system.time(res2<-stochrickvect()))
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
{
#initialize
N<-matrix(NA,numyears,length(p0))
N[1,]<-p0
for (pop in 1:length(p0)){#loop through the populations
for (yr in 2:numyears){ #for each pop, loop through the years
N[yr,pop] <- N[yr-1,pop] * exp(r * (1 - N[yr - 1,pop] / K) + rnorm(1,0,sigma))
}
}
return(N)
}
N
A<-stochrich(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
A<-stochrick(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
A
B<-stochrickvect(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
View(A)
View(B)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize2.R')
#initialize
N<-matrix(NA,numyears,length(p0))
p0=runif(1000,.5,1.5)
r=1.2
K=1
sigma=0.2
numyears=100
#initialize
N<-matrix(NA,numyears,length(p0))
N
runif(10,5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
runif(10,.5,1.5)
help(runig)
help(runif)
help("rnorm")
setwd("~/Documents/CMEECourseWork/Week8/Code")
load("output2_1.rda")
load("output2_4.rda")
load("output2_8.rda")
load("output2_6.rda")
load("output2_7.rda")
View(res2)
View(res2)
View(res2)
View(oct)
View(oct)
load("output2_11.rda")
load("output2_19.rda")
load("../Results/output_2.rda")
reticulate::source_python('~/Documents/CMEECourseWork/Week7/Code/Nets_R.py')
load("output2_7.rda")
load("output2_37.rda")
load("output2_31.rda")
reticulate::repl_python()
