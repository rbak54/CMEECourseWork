 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.625   0.026   0.652 
   user  system elapsed 
266.236   2.384 269.198 
   user  system elapsed 
522.065   4.484 527.672 
   user  system elapsed 
799.037   6.788 807.557 
    user   system  elapsed 
1074.792    9.424 1086.570 
    user   system  elapsed 
1352.049   12.179 1367.272 
    user   system  elapsed 
1619.469   14.445 1637.608 
    user   system  elapsed 
1872.768   16.805 1893.833 
    user   system  elapsed 
2125.077   19.204 2149.209 
    user   system  elapsed 
2413.773   21.825 2441.339 
    user   system  elapsed 
2690.936   24.203 2721.553 
    user   system  elapsed 
2991.650   26.876 3025.835 
    user   system  elapsed 
3285.271   28.792 3322.172 
    user   system  elapsed 
3567.177   31.268 3607.191 
    user   system  elapsed 
3849.591   33.549 3892.614 
    user   system  elapsed 
4134.743   35.853 4180.710 
    user   system  elapsed 
4435.062   38.027 4484.220 
    user   system  elapsed 
4741.011   40.570 4793.853 
    user   system  elapsed 
5043.570   42.752 5099.568 
    user   system  elapsed 
5350.119   45.203 5409.874 
    user   system  elapsed 
5648.189   47.890 5711.385 
    user   system  elapsed 
5951.907   50.584 6018.671 
    user   system  elapsed 
6254.056   52.851 6324.044 
    user   system  elapsed 
6565.928   55.478 6639.432 
    user   system  elapsed 
6873.378   57.834 6950.122 
    user   system  elapsed 
7172.309   59.870 7251.858 
    user   system  elapsed 
7487.225   62.328 7570.270 
    user   system  elapsed 
7796.355   65.006 7882.866 
    user   system  elapsed 
8099.901   67.687 8189.872 
    user   system  elapsed 
8407.393   70.369 8501.040 
    user   system  elapsed 
8712.092   72.758 8808.921 
    user   system  elapsed 
9012.245   75.094 9112.286 
    user   system  elapsed 
9310.538   77.457 9413.707 
    user   system  elapsed 
9606.094   79.755 9712.291 
     user    system   elapsed 
 9897.994    81.885 10006.995 
     user    system   elapsed 
10194.988    84.229 10307.083 
     user    system   elapsed 
10492.541    86.605 10607.812 
     user    system   elapsed 
10788.433    89.069 10906.894 
     user    system   elapsed 
11090.923    91.175 11212.211 
     user    system   elapsed 
11410.863    93.599 11535.481 
     user    system   elapsed 
11726.561    95.887 11854.288 
     user    system   elapsed 
12042.393    98.149 12173.171 
    user   system  elapsed 
12365.88   100.77 12500.15 
     user    system   elapsed 
12691.659   103.428 12829.492 
     user    system   elapsed 
13013.619   105.589 13154.552 
    user   system  elapsed 
13335.85   107.97 13480.08 
     user    system   elapsed 
13656.598   110.315 13804.100 
     user    system   elapsed 
13984.704   112.531 14135.324 
    user   system  elapsed 
14308.40   114.95 14462.34 
     user    system   elapsed 
14628.653   117.549 14786.085 
    user   system  elapsed 
14953.40   119.68 15113.84 
     user    system   elapsed 
15271.762   122.309 15435.692 
     user    system   elapsed 
15585.382   124.793 15752.639 
     user    system   elapsed 
15903.737   127.433 16074.523 
     user    system   elapsed 
16217.935   129.908 16392.054 
     user    system   elapsed 
16529.567   132.497 16707.077 
     user    system   elapsed 
16842.874   135.091 17023.788 
     user    system   elapsed 
17160.298   137.903 17344.952 
     user    system   elapsed 
17472.635   140.975 17661.230 
    user   system  elapsed 
17798.42   144.24 17991.38 
    user   system  elapsed 
18121.00   146.89 18317.52 
     user    system   elapsed 
18425.275   149.541 18625.279 
     user    system   elapsed 
18754.504   152.012 18958.104 
     user    system   elapsed 
19066.682   154.559 19273.934 
     user    system   elapsed 
19380.938   156.956 19591.457 
     user    system   elapsed 
19692.246   158.958 19905.737 
     user    system   elapsed 
20003.831   161.048 20220.258 
     user    system   elapsed 
20310.178   163.165 20529.501 
     user    system   elapsed 
20615.150   165.398 20837.887 
     user    system   elapsed 
20923.156   167.594 21149.044 
     user    system   elapsed 
21222.568   169.634 21451.470 
    user   system  elapsed 
21517.01   171.76 21748.77 
     user    system   elapsed 
21852.278   173.596 22087.211 
     user    system   elapsed 
22151.797   175.752 22389.729 
     user    system   elapsed 
22461.908   177.697 22702.784 
     user    system   elapsed 
22759.567   179.514 23003.091 
     user    system   elapsed 
23045.896   181.647 23292.193 
     user    system   elapsed 
23334.328   183.752 23583.397 
     user    system   elapsed 
23625.333   185.843 23877.179 
    user   system  elapsed 
23919.83   188.74 24175.28 
     user    system   elapsed 
24213.327   191.216 24471.938 
     user    system   elapsed 
24506.771   191.334 24766.143 
    user   system  elapsed 
24798.38   191.43 25058.47 
     user    system   elapsed 
25087.085   191.538 25347.901 
     user    system   elapsed 
25378.669   191.671 25640.244 
     user    system   elapsed 
25681.650   191.897 25944.091 
     user    system   elapsed 
25983.378   192.208 26246.775 
     user    system   elapsed 
26271.539   192.304 26535.657 
     user    system   elapsed 
26561.573   192.426 26826.475 
    user   system  elapsed 
26853.87   192.56 27119.56 
     user    system   elapsed 
27151.096   192.699 27417.602 
     user    system   elapsed 
27442.909   192.795 27710.129 
     user    system   elapsed 
27737.142   192.912 28005.116 
     user    system   elapsed 
28029.228   193.042 28297.967 
     user    system   elapsed 
28320.143   193.174 28589.621 
     user    system   elapsed 
28613.353   193.311 28883.620 
     user    system   elapsed 
28920.728   193.542 29191.905 
     user    system   elapsed 
29226.648   193.868 29498.836 
     user    system   elapsed 
29517.012   193.995 29789.926 
     user    system   elapsed 
29810.030   194.113 30083.707 
     user    system   elapsed 
30113.983   194.244 30388.471 
     user    system   elapsed 
30407.039   194.344 30682.288 
     user    system   elapsed 
30702.366   194.497 30978.450 
     user    system   elapsed 
30994.975   194.653 31271.843 
     user    system   elapsed 
31289.713   194.774 31567.360 
     user    system   elapsed 
31592.790   195.002 31871.367 
     user    system   elapsed 
31902.927   195.134 32182.454 
     user    system   elapsed 
32210.844   195.284 32491.268 
     user    system   elapsed 
32508.094   195.411 32789.378 
     user    system   elapsed 
32802.830   195.536 33084.903 
     user    system   elapsed 
33102.007   195.663 33385.027 
     user    system   elapsed 
33410.688   195.777 33694.872 
     user    system   elapsed 
33710.544   195.887 33995.491 
     user    system   elapsed 
34024.302   196.134 34310.274 
     user    system   elapsed 
34312.312   196.386 34599.181 
     user    system   elapsed 
34609.272   196.524 34897.271 
    user   system  elapsed 
34932.66   197.22 35222.42 
     user    system   elapsed 
35234.584   197.427 35525.281 
    user   system  elapsed 
35531.71   197.56 35823.22 
     user    system   elapsed 
35821.769   197.802 36114.324 
     user    system   elapsed 
36127.493   198.125 36421.409 
     user    system   elapsed 
36423.267   198.287 36718.073 
     user    system   elapsed 
36719.431   198.421 37015.004 
     user    system   elapsed 
37011.407   198.531 37307.721 
     user    system   elapsed 
37298.652   198.793 37595.932 
     user    system   elapsed 
37588.981   199.196 37887.815 
     user    system   elapsed 
37882.598   199.437 38182.556 
    user   system  elapsed 
38179.51   199.57 38480.29 
     user    system   elapsed 
38480.619   199.715 38782.256 
     user    system   elapsed 
38765.738   199.904 39068.254 
     user    system   elapsed 
39059.206   200.313 39363.424 
     user    system   elapsed 
39351.326   200.608 39657.071 
     user    system   elapsed 
39675.873   201.133 39982.912 
     user    system   elapsed 
39971.507   201.281 40279.400 
     user    system   elapsed 
40268.506   201.398 40577.259 
     user    system   elapsed 
40566.104   201.514 40876.043 
     user    system   elapsed 
40867.899   201.653 41179.377 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.99 (ave)

============================================
