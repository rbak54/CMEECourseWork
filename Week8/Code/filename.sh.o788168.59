 R is about to run

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-conda_cos6-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> graphics.off()
> 
> # CMEE 2019 HPC excercises R code main proforma
> # you don't HAVE to use this but it will be very helpful.  If you opt to write everything yourself from scratch please ensure you use EXACTLY the same function and parameter names and beware that you may loose marks if it doesn't work properly because of not using the proforma.
> 
> name <- "Ruth Keane"
> preferred_name <- "Ruth"
> email <- "ruth.keane19@imperial.ac.uk"
> username <- "rbk119"
> personal_speciation_rate <- 0.004345 
> #only for hpc # will be assigned to each person individually in class and should be between 0.002 and 0.007
> 
> # Question 1
> species_richness <- function(community){
+   richness<-length(unique(community))
+   return(richness)
+ }
> 
> # Question 2
> init_community_max <- function(size){
+   imax<-as.vector(seq(1,size,1))
+   return(imax)
+ }
> 
> # Question 3
> init_community_min <- function(size){
+   imin<-rep(1,length=size)
+   return(imin)
+ }
> 
> # Question 4
> choose_two <- function(max_value){
+   imax<-as.vector(seq(1,max_value,1))
+   two<-as.vector(sample(imax,2,replace=FALSE))
+   return(two)
+ }
> 
> # Question 5
> neutral_step <- function(community){
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   community2<-c((community[indexes[2]]),community2)
+   return(community2)
+ }
> 
> 
> # Question 6
> neutral_generation <- function(community){
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step(community)
+   }
+   return(community)
+ }
> 
> # Question 7
> neutral_time_series <- function(community,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation(community)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 8
> question_8 <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   return("Species richness of 1 ")
+ }
> 
> # Question 9
> neutral_step_speciation <- function(community,speciation_rate)  {
+   indexes<-choose_two(length(community))
+   community2<-community[-indexes[1]]
+   rand<-runif(1,0,1)
+   if(rand>speciation_rate){
+     community2<-c((community[indexes[2]]),community2) 
+   }else{
+     community2<-c(community2,max(community)+1)
+   }
+   return(community2)
+ }
> 
> # Question 10
> neutral_generation_speciation <- function(community,speciation_rate)  {
+   a<-sample(1:2,1)
+   generations<-length(community)/2 
+   if(a==1){
+     generations<-floor(generations)
+   }else{
+     generations<-ceiling(generations)
+   }
+   for (i in 1:generations){
+     community<-neutral_step_speciation(community,speciation_rate =speciation_rate)
+   }
+   return(community)
+ }
> 
> 
> # Question 11
> neutral_time_series_speciation <- function(community,speciation_rate,duration)  {
+   richness<-vector(length=duration)
+   for(j in (1:duration)){
+     community<-neutral_generation_speciation(community=community, speciation_rate = speciation_rate)
+     richness[j]<-species_richness(community)
+   }
+   return(richness)
+ }
> 
> # Question 12
> question_12 <- function()  {
+   graphics.off()
+   #plot(neutral_time_series(init_community_max(100),duration=200),xlab="Generation",ylab="Species Richness")
+   mat<-as.data.frame(matrix(ncol=3, nrow=400))
+   min<-neutral_time_series_speciation(community=init_community_min(100),speciation_rate = 0.1, duration=200)
+   max<-neutral_time_series_speciation(community=init_community_max(100),speciation_rate = 0.1, duration=200)
+   time<-seq(1,200,1)
+   #  mat[1:200,2]<-min
+   # mat[201:400,2]<-max
+   #  mat[,1]<-time
+   # mat[1:200,3]<-"min"
+   #  mat[201:400,3]<-"max"
+   #  colnames(mat)<-c("time","rich","which")
+   graphics.off()
+   plot(time,min,col="blue",ylab="Species richness")
+   points(time,max,col="red")
+   #matrix<-matrix(c(a,b),nrow=200)
+   #  require(ggplot2)
+   #  ggplot(aes(mat[,1],mat[,2],colour=which), data=mat)+geom_point()+xlab("Generation")+ylab("Species Richness")
+   return("They converge to similar species richnesses. The neutral model gives these results because new species are being added and the when there are many species, there is a higher chance of a population going extinct")
+ }
> 
> 
> # Question 13
> species_abundance <- function(community)  {
+   
+   # for (i in (1:range(max(community)))){
+   t<-table(community)
+   t<-sort(t,decreasing = TRUE)
+   # t<-as.data.frame(t)
+   f<-vector()
+   j=0
+   for (i in t){
+     j=j+1
+     f[j]<-i
+   }
+   return(f)
+ }
> 
> # Question 14
> octaves <- function(abundance_vector) {
+   #to find n
+   m<-max(abundance_vector)
+   nm<-log(m)/log(2)
+   nm<-ceiling(nm)
+   t<-tabulate(abundance_vector)
+   v<-vector(length=nm)
+   for (n in (1:nm)){
+     a<-2^(n-1)
+     b<-(2^n)-1
+     v[n]<-sum(t[a:b],na.rm = TRUE)
+   }
+   return(v)
+ }
> 
> # Question 15
> sum_vect <- function(x, y) {
+   lx<-length(x)
+   ly<-length(y)
+   if (lx>ly){
+     yn<-rep(0,lx)
+     yn[1:ly]<-y
+     y<-yn
+   }else{
+     xn<-rep(0,ly)
+     xn[1:lx]<-x
+     x<-xn
+   }
+   s<-x+y
+   return(s)
+ }
> 
> # Question 16 
> question_16 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   graphics.off()
+   oc<-matrix(nrow=200,ncol=10)
+   max<-init_community_max(100)
+   for (p in 1:200){
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+   }
+   ab<-species_abundance(max)
+   oc<-octaves(ab)
+   o<-1
+   #oc[1,1:length(octaves(ab))]<-octaves(ab)
+   
+   #dont need to do both
+   gens<-seq(20,2000,20)
+   nint<-1:19
+   
+   for (d in gens){
+     for (q in nint){
+       max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)}
+     max<-neutral_generation_speciation(community=max,speciation_rate = 0.1)
+     ab<-species_abundance(max)
+     o<-o+1
+     #oc[o,1:length(octaves(ab))]<-octaves(ab)
+     oc<-sum_vect(oc,octaves(ab))
+   }
+   oc<-oc/o
+   barplot(oc)
+   #return(oc)
+   return("type your written answer here")
+ }
> 
> # Question 17
> cluster_run <- function(speciation_rate, size, wall_time, interval_rich, interval_oct, burn_in_generations, output_file_name)  {
+   community<-init_community_min(size=size)
+   a<-proc.time()
+   b<-proc.time()-a
+   nruns=0
+   richrows=0
+   richness<-c()
+   oct<-list()
+   #octrows=0
+   while (((b[3])/60)<wall_time){
+     community=neutral_generation_speciation(community=community,speciation_rate =speciation_rate )
+     nruns=nruns+1
+     b<-proc.time()-a
+     #richness<-matrix(nrow=burn_in_generations)
+     #richness<-list()
+     #richness<-c()
+     if (nruns<burn_in_generations){
+       if (nruns%%interval_rich==0){
+         #richrows=richrows+1
+         #richness[richrows]<-species_richness(community)
+         # richness[richrows]<-list(species_richness(community))
+         richness<-c(richness,species_richness(community))
+       }
+     }
+     #oct<-list()
+     if (nruns%%interval_oct==1){
+       octrows=length(oct)+1
+       #index<-length(oct) + 1
+       oct[[octrows]]<-(octaves(species_abundance(community)))
+       print(b)
+     }
+     # if (nruns%%interval_oct==0){
+     ##octrows=octrows+1
+     #  index<-length(oct) + 1
+     # oct[index]<-list(octaves(species_abundance(community)))
+     #}
+   }
+   c<-proc.time()-a
+   c<-c[3]
+   filename<-paste0(output_file_name,".rda")
+   save(oct,community,speciation_rate,richness,wall_time,interval_rich,interval_oct,burn_in_generations,size,c,file=filename)
+   
+ }
> 
> # Questions 18 and 19 involve writing code elsewhere to run your simulations on the cluster
> 
> # Question 20 
> process_cluster_results <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   combined_results <- list() #create your list output here to return
+   return(combined_results)
+ }
> 
> # Question 21
> question_21 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 22
> question_22 <- function()  {
+   return("type your written answer here")
+ }
> 
> # Question 23
> chaos_game <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Question 24
> turtle <- function(start_position, direction, length)  {
+   
+   return() # you should return your endpoint here.
+ }
> 
> # Question 25
> elbow <- function(start_position, direction, length)  {
+   
+ }
> 
> # Question 26
> spiral <- function(start_position, direction, length)  {
+   return("type your written answer here")
+ }
> 
> # Question 27
> draw_spiral <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+   
+ }
> 
> # Question 28
> tree <- function(start_position, direction, length)  {
+   
+ }
> draw_tree <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 29
> fern <- function(start_position, direction, length)  {
+   
+ }
> draw_fern <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Question 30
> fern2 <- function(start_position, direction, length)  {
+   
+ }
> draw_fern2 <- function()  {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge questions - these are optional, substantially harder, and a maximum of 16% is available for doing them.  
> 
> # Challenge question A
> Challenge_A <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question B
> Challenge_B <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question C
> Challenge_C <- function() {
+   # clear any existing graphs and plot your graph within the R window
+ }
> 
> # Challenge question D
> Challenge_D <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question E
> Challenge_E <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question F
> Challenge_F <- function() {
+   # clear any existing graphs and plot your graph within the R window
+   return("type your written answer here")
+ }
> 
> # Challenge question G should be written in a separate file that has no dependencies on any functions here.
> 
> 
> ###go over richness , to see if my method worked
> #source("rbk119_HPC_2019_main.R")
> 
> iter<-as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
> #   iter<-3
> #last thing- undo above
> set.seed(iter)
> #if iter<25
> if (iter%%4==0){
+   popsize<-500
+ }else if (iter%%4==1){
+     popsize<-1000
+ }else if (iter%%4==2){
+     popsize<-2500
+ }else if (iter%%4==3){
+   popsize<-5000
+ }
> 
> filename<-paste0("output2_",iter)
> #timeinhours<-0.01
> timeinhours<-11.5
> timeinmins<-timeinhours*60
> cluster_run(speciation_rate = personal_speciation_rate,size=popsize,wall_time=timeinmins,interval_rich = 1,interval_oct = popsize/10,burn_in_generations = 8*popsize,output_file_name = filename)
   user  system elapsed 
  0.698   0.064   0.765 
   user  system elapsed 
294.002   3.116 297.803 
   user  system elapsed 
596.662   5.473 603.628 
   user  system elapsed 
905.454   8.266 916.417 
    user   system  elapsed 
1223.047   11.021 1237.717 
    user   system  elapsed 
1531.359   14.078 1550.020 
    user   system  elapsed 
1835.282   16.689 1857.443 
    user   system  elapsed 
2138.940   19.364 2164.654 
    user   system  elapsed 
2430.806   22.429 2460.646 
    user   system  elapsed 
2724.186   25.112 2757.588 
    user   system  elapsed 
3024.453   27.818 3061.420 
    user   system  elapsed 
3323.732   30.247 3364.772 
    user   system  elapsed 
3625.031   33.027 3669.739 
    user   system  elapsed 
3922.747   35.523 3970.721 
    user   system  elapsed 
4221.417   37.947 4272.817 
    user   system  elapsed 
4532.576   40.530 4587.693 
    user   system  elapsed 
4845.966   42.703 4904.599 
    user   system  elapsed 
5156.185   44.939 5217.855 
    user   system  elapsed 
5471.249   47.399 5536.146 
    user   system  elapsed 
5773.596   49.585 5841.623 
    user   system  elapsed 
6076.365   52.297 6148.500 
    user   system  elapsed 
6374.512   54.847 6450.247 
    user   system  elapsed 
6673.638   57.275 6752.843 
    user   system  elapsed 
6974.604   59.685 7058.211 
    user   system  elapsed 
7257.533   61.564 7343.715 
    user   system  elapsed 
7502.397   63.609 7591.111 
    user   system  elapsed 
7775.382   65.927 7867.038 
    user   system  elapsed 
8029.291   68.004 8123.520 
    user   system  elapsed 
8280.235   70.467 8377.421 
    user   system  elapsed 
8545.470   72.394 8645.101 
    user   system  elapsed 
8833.177   74.961 8935.990 
    user   system  elapsed 
9111.788   76.917 9217.135 
    user   system  elapsed 
9394.518   79.017 9502.601 
    user   system  elapsed 
9677.088   81.370 9788.159 
     user    system   elapsed 
 9962.180    83.354 10075.851 
     user    system   elapsed 
10250.692    85.656 10367.317 
     user    system   elapsed 
10533.672    88.045 10653.278 
     user    system   elapsed 
10827.098    90.474 10949.813 
     user    system   elapsed 
11111.949    92.808 11237.619 
     user    system   elapsed 
11399.360    95.016 11527.855 
     user    system   elapsed 
11690.731    97.056 11821.917 
     user    system   elapsed 
11979.163    99.327 12113.263 
     user    system   elapsed 
12262.059   101.593 12399.043 
     user    system   elapsed 
12547.034   103.711 12686.760 
    user   system  elapsed 
12825.57   105.86 12968.02 
     user    system   elapsed 
13105.821   107.841 13250.858 
     user    system   elapsed 
13385.628   109.929 13533.369 
     user    system   elapsed 
13655.598   111.683 13805.636 
     user    system   elapsed 
13932.936   113.662 14085.549 
     user    system   elapsed 
14213.730   115.569 14368.849 
     user    system   elapsed 
14485.784   117.809 14643.701 
     user    system   elapsed 
14768.789   119.994 14929.488 
     user    system   elapsed 
15046.713   121.981 15209.983 
     user    system   elapsed 
15331.597   124.196 15497.708 
     user    system   elapsed 
15609.143   126.513 15778.163 
     user    system   elapsed 
15881.161   128.545 16052.778 
     user    system   elapsed 
16156.432   130.521 16330.594 
     user    system   elapsed 
16436.809   132.806 16613.846 
     user    system   elapsed 
16712.398   135.119 16892.325 
     user    system   elapsed 
16989.944   137.512 17172.852 
    user   system  elapsed 
17278.72   140.05 17464.79 
     user    system   elapsed 
17551.353   142.369 17740.316 
     user    system   elapsed 
17839.379   144.587 18031.189 
    user   system  elapsed 
18136.81   146.78 18331.48 
     user    system   elapsed 
18419.109   148.813 18616.403 
     user    system   elapsed 
18701.037   150.704 18900.812 
     user    system   elapsed 
18980.700   152.459 19182.803 
     user    system   elapsed 
19257.677   154.425 19462.329 
     user    system   elapsed 
19531.743   156.582 19739.090 
     user    system   elapsed 
19808.052   158.251 20017.635 
     user    system   elapsed 
20086.234   160.171 20298.316 
     user    system   elapsed 
20364.767   162.052 20579.313 
     user    system   elapsed 
20649.763   163.902 20866.758 
    user   system  elapsed 
20945.37   165.80 21164.90 
     user    system   elapsed 
21218.126   167.162 21439.555 
     user    system   elapsed 
21481.650   169.218 21705.675 
     user    system   elapsed 
21743.613   171.261 21970.183 
     user    system   elapsed 
22001.777   173.745 22231.331 
     user    system   elapsed 
22258.624   175.376 22490.304 
     user    system   elapsed 
22517.560   177.374 22751.757 
     user    system   elapsed 
22780.037   179.475 23016.867 
     user    system   elapsed 
23040.616   181.489 23279.971 
     user    system   elapsed 
23293.161   183.313 23534.802 
     user    system   elapsed 
23555.556   185.275 23799.690 
     user    system   elapsed 
23805.992   187.343 24052.675 
     user    system   elapsed 
24054.308   189.596 24303.699 
    user   system  elapsed 
24307.03   191.24 24558.55 
     user    system   elapsed 
24559.222   193.352 24813.324 
     user    system   elapsed 
24804.467   195.363 25061.027 
     user    system   elapsed 
25056.039   197.668 25315.375 
     user    system   elapsed 
25308.786   199.524 25570.449 
     user    system   elapsed 
25555.656   201.545 25819.783 
     user    system   elapsed 
25807.710   203.444 26074.216 
    user   system  elapsed 
26059.88   205.38 26328.81 
     user    system   elapsed 
26323.688   207.493 26595.261 
     user    system   elapsed 
26576.836   209.352 26850.748 
     user    system   elapsed 
26830.915   211.127 27107.064 
     user    system   elapsed 
27084.213   213.166 27362.875 
     user    system   elapsed 
27333.294   214.855 27614.094 
     user    system   elapsed 
27581.425   216.598 27864.434 
     user    system   elapsed 
27832.886   218.403 28118.146 
     user    system   elapsed 
28081.773   220.129 28369.230 
     user    system   elapsed 
28338.295   222.161 28628.287 
     user    system   elapsed 
28589.322   224.208 28881.821 
     user    system   elapsed 
28850.125   226.201 29145.122 
     user    system   elapsed 
29105.114   228.097 29402.463 
     user    system   elapsed 
29353.065   229.911 29652.669 
     user    system   elapsed 
29604.581   231.799 29906.559 
     user    system   elapsed 
29873.993   233.982 30178.812 
     user    system   elapsed 
30147.925   236.315 30455.724 
     user    system   elapsed 
30422.754   238.356 30733.228 
     user    system   elapsed 
30696.720   240.714 31010.180 
     user    system   elapsed 
30972.333   242.871 31288.608 
     user    system   elapsed 
31245.909   244.941 31564.867 
     user    system   elapsed 
31516.252   246.868 31837.755 
     user    system   elapsed 
31786.641   248.918 32110.801 
    user   system  elapsed 
32061.76   251.04 32388.68 
     user    system   elapsed 
32343.334   252.942 32672.834 
     user    system   elapsed 
32616.808   254.993 32948.972 
    user   system  elapsed 
32886.33   256.96 33221.03 
     user    system   elapsed 
33156.701   258.991 33494.016 
     user    system   elapsed 
33431.470   260.976 33771.442 
     user    system   elapsed 
33698.866   262.944 34041.391 
     user    system   elapsed 
33969.579   265.004 34314.763 
     user    system   elapsed 
34238.452   267.025 34586.306 
     user    system   elapsed 
34514.937   268.981 34865.401 
    user   system  elapsed 
34785.27   271.11 35138.46 
     user    system   elapsed 
35055.140   273.268 35411.117 
     user    system   elapsed 
35329.388   275.368 35688.099 
     user    system   elapsed 
35606.720   277.517 35968.216 
     user    system   elapsed 
35879.177   279.745 36243.524 
     user    system   elapsed 
36142.846   281.657 36509.665 
     user    system   elapsed 
36395.824   283.459 36764.904 
     user    system   elapsed 
36645.840   285.366 37017.341 
     user    system   elapsed 
36881.512   287.189 37255.259 
     user    system   elapsed 
37126.282   289.122 37502.559 
     user    system   elapsed 
37373.472   291.283 37752.542 
     user    system   elapsed 
37616.612   293.031 37997.974 
     user    system   elapsed 
37865.497   294.975 38249.355 
     user    system   elapsed 
38124.951   297.089 38511.458 
     user    system   elapsed 
38380.250   298.656 38768.845 
     user    system   elapsed 
38629.031   300.577 39020.080 
     user    system   elapsed 
38878.723   302.653 39272.429 
     user    system   elapsed 
39132.559   304.769 39529.087 
     user    system   elapsed 
39387.571   306.919 39786.895 
    user   system  elapsed 
39639.04   309.09 40041.17 
     user    system   elapsed 
39896.540   311.066 40301.172 
     user    system   elapsed 
40153.093   313.128 40560.325 
     user    system   elapsed 
40406.586   315.242 40816.432 
     user    system   elapsed 
40671.758   317.408 41084.361 
     user    system   elapsed 
40930.092   319.497 41345.320 
> 
R has finished running

============================================

        Job resource usage summary 

                 Memory (GB)    NCPUs
 Requested  :         1             1
 Used       :         0 (peak)   0.98 (ave)

============================================
